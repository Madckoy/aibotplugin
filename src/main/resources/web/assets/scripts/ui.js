let previousBotData = {};

function updateMonitoringHeader(data) {
    const mcTimeElem = document.getElementById("mc-time");
    const serverTimeElem = document.getElementById("server-time");

    const mcTime = data["mc-time"];
    mcTimeElem.textContent = `‚õÖ ${typeof mcTime === "string" && mcTime.trim() !== "" ? mcTime : "--:--"}`;

    const serverTime = data["server-time"];
    serverTimeElem.textContent = `üïí ${typeof serverTime === "string" && serverTime.trim() !== "" ? serverTime : "--:--"}`;
}

function renderBotTable(data) {
    const table = document.getElementById("bot-table");
    const tbody = table.querySelector("tbody") || table.appendChild(document.createElement("tbody"));

    data.bots.forEach(bot => updateOrCreateBotRow(bot, tbody));

    setupButtonHandlers(data.bots);
}

function updateOrCreateBotRow(bot, tbody) {
    const rowId = `bot-row-${bot.id}`;
    let row = document.getElementById(rowId);

    if (!row) {
        row = document.createElement("tr");
        row.id = rowId;
        row.innerHTML = `
            <td><img src="${bot.skin}" width="20" height="20" style="border-radius: 4px; margin-right: 5px;"> ${bot.id}</td>
            <td class="stats"></td>
            <td class="pos"></td>
            <td class="stuck"></td>
            <td class="task"></td>
            <td class="objective"></td>
            <td class="elapsed"></td>
            <td class="inventory-cell"></td>
            <td class="commands"></td>
        `;
        tbody.appendChild(row);
    }

    const cells = row.children;

    // ü™® –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    cells[1].innerHTML = `
        <div class="bot-stats-cell">
            <div><span>‚õèÔ∏è</span><span>${bot.blocksBroken}</span></div>
            <div><span>‚ò†Ô∏è</span><span>${bot.mobsKilled}</span></div>
            <div><span>‚ö°Ô∏è</span><span>${bot.teleportUsed}</span></div>
        </div>`;

    // üìç –ü–æ–∑–∏—Ü–∏—è –∏ —Ü–µ–ª—å
    cells[2].innerHTML = `
        <div class="bot-stats-cell">
            <div><span>üìç</span><span>${bot.position}</span></div>
            <div class="bot-objective-divider"></div>
            <div><span>üéØ</span><span>${bot.target}</span></div>
        </div>`;

    // üß± –ó–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ
    cells[3].innerHTML = `
        <div class="bot-position-cell">
            <div><span>${bot.stuck}</span></div>
            <div class="bot-objective-divider"></div>
            <div><span>${bot.stuckCount}</span></div>
        </div>`;

    // üß† –ó–∞–¥–∞—á–∞
    cells[4].innerHTML = `
        <div class="bot-position-cell">
            <div><span>${bot.task}</span></div>
            <div class="bot-objective-divider"></div>
            <div><span>${getTaskStatusEmoji(bot.taskIsReactive)}</span></div>
        </div>`;

    // üìã –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
    cells[5].innerHTML = `
        <div class="bot-objective-cell">
            <div><span>·Øì </span><span>${bot.queue}</span></div>
            <div class="bot-objective-divider"></div>
            <div><span>‚ú¥ </span><span>${bot.object}</span></div>
        </div>`;

    // ‚è±Ô∏è –í—Ä–µ–º—è
    cells[6].textContent = bot.elapsedTime;

    // üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
    cells[7].title = `Items: ${bot.inventoryCount} / ${bot.inventoryMax}`;
    cells[7].innerHTML = generateInventoryGrid(bot.inventorySlotsFilled, bot.autoPickUpItems);

    // ‚öôÔ∏è –ö–æ–º–∞–Ω–¥—ã
    if (!cells[8].innerHTML.trim()) {
        cells[8].innerHTML = `
            <div class="bot-position-cell">
                <button class="cmd-btn" data-bot="${bot.id}" data-cmd="bot-tp">‚ö°</button>
                <button class="cmd-btn" data-bot="${bot.id}" data-cmd="bot-move">üèÉüèª‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è</button>
                <button class="cmd-btn" data-bot="${bot.id}" data-cmd="bot-excavate">‚õèÔ∏è</button>
                <div class="bot-objective-divider"></div>      
                <button class="cmd-btn" data-bot="${bot.id}" data-cmd="bot-drop-all">üì¶</button>
                <button class="cmd-btn" data-bot="${bot.id}" data-cmd="bot-dump">#Ô∏è‚É£</button>
                <button class="cmd-btn" data-bot="${bot.id}" data-cmd="bot-info">‚ÑπÔ∏è</button>
            </div>`;
    }

    updateInfoPanel(bot);     
}

function getTaskStatusEmoji(isReactive) {
    if (isReactive === true || isReactive === "true") return "üî∏";
    if (isReactive === false || isReactive === "false") return "‚ñ™Ô∏è";
    return "‚ùî";
}

function generateInventoryGrid(slots, autoPickupEnabled) {
    const maxSlots = 36;
    slots = Array.isArray(slots) ? slots : [];
    return '<div class="inv-bar">' + Array.from({length: maxSlots}, (_, i) => {
        const slot = slots[i];
        let className = "inv-slot";
        if (slot?.amount >= 64) className += " full";
        else if (slot?.amount > 0) className += " partial";
        if (autoPickupEnabled) className += " pickup-enabled";
        const tooltip = slot ? `${slot.amount}√ó ${slot.type}` : 'Empty';
        return `<div class="${className}" title="${tooltip}"></div>`;
    }).join('') + '</div>';
}
