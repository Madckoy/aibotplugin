package com.devone.aibot;

import java.io.File;
import java.io.IOException;

import org.bukkit.Bukkit;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.plugin.java.JavaPlugin;

import com.devone.aibot.core.BotManager;
import com.devone.aibot.core.BotCmdDispatcher;
import com.devone.aibot.core.BotZoneManager;
import com.devone.aibot.core.events.BotEvents;
import com.devone.aibot.core.events.PlayerEvents;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.web.BotWebService;

public class AIBotPlugin extends JavaPlugin {
    private static AIBotPlugin instance;

    private BotZoneManager zoneManager;
    private BotManager botManager;
    private BotWebService web_service;

    @Override
    public void onEnable() {
        instance = this; // ‚úÖ Store the plugin instance

        ensureDataFolderExists();

        setupConfig();

        reloadPlugin(); // ‚úÖ Now `onEnable()` only calls `reloadPlugin()`

        BotLogger.info("‚úÖ AI Bot Plugin has been enabled successfully!");
    }

    @Override
    public void onDisable() {
        BotLogger.info("‚ôªÔ∏è AI Bot Plugin is shutting down...");

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞
        if (web_service!= null) {
            try {
                web_service.stop();
                BotLogger.info("üõë HTTP WEB server stopped.");
            } catch (Exception e) {
                BotLogger.error("‚ùå HTTP WEB server could not be stopped." + e.getMessage());
            }
        }

        BotLogger.info("‚úÖ AI Bot Plugin has been disabled.");
        Bukkit.getScheduler().cancelTasks(this);
    }

    public void reloadPlugin() {
        BotLogger.init(this); // ‚úÖ Log initialization first
        BotLogger.info("üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.");

        BotLogger.info("‚ôªÔ∏è –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ AI Bot Plugin...");

        reloadConfig();
        BotLogger.info("üîÑ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞–Ω–æ–≤–æ.");

        botManager = new BotManager(this);
        zoneManager = new BotZoneManager(this, getDataFolder());
        new BotCmdDispatcher(this, botManager, zoneManager);

        BotLogger.info("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!");

        // ‚úÖ Restart HTTP server properly
        if (web_service != null) {
            try {
                web_service.stop();
            } catch (Exception e) {
                BotLogger.error("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
            }
        }

        web_service = new BotWebService(3000, botManager);
        try {
            web_service.start();
            BotLogger.info("üåê HTTP WEB Server started on port 3000.");
        } catch (Exception e) {
            BotLogger.error("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }

        // —Ç—É—Ç –∑–∞—Ä–µ–≥–∞–µ–º –∏–≤–µ–Ω—Ç—ã
        getServer().getPluginManager().registerEvents(new PlayerEvents(botManager), this);
        //
        getServer().getPluginManager().registerEvents(new BotEvents(botManager), this);

        BotLogger.info("‚úÖ AI Bot Plugin –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ!");

    }

    private void setupConfig() {
        File configFile = new File(getDataFolder(), "config.yml");

        if (!configFile.exists()) {
            getLogger().warning("‚ö† –§–∞–π–ª config.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π...");

            if (!getDataFolder().exists()) {
                getDataFolder().mkdirs();
            }

            FileConfiguration config = new YamlConfiguration();
            config.set("logging.level", "INFO");

            try {
                config.save(configFile);
                BotLogger.info("‚úÖ –°–æ–∑–¥–∞–Ω config.yml —Å —É—Ä–æ–≤–Ω–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è INFO.");
            } catch (IOException e) {
                BotLogger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ config.yml: " + e.getMessage());
            }
        }
    }

    private void ensureDataFolderExists() {
        if (!getDataFolder().exists() && getDataFolder().mkdirs()) {
            BotLogger.info("üìÅ Created plugin data folder: " + getDataFolder().getAbsolutePath());
        } else if (!getDataFolder().exists()) {
            BotLogger.error("‚ùå Failed to create plugin data folder!");
        }
    }

    public static AIBotPlugin getInstance() {
        return instance;
    }

    public BotManager getBotManager() {
        return botManager;
    }

    public BotZoneManager getZoneManager() {
        return zoneManager;
    }
}
