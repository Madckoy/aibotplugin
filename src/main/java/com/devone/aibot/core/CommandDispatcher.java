package com.devone.aibot.core;

import org.bukkit.command.Command;
import org.bukkit.command.CommandExecutor;
import org.bukkit.command.CommandSender;
import org.bukkit.plugin.java.JavaPlugin;

import com.devone.aibot.AIBotPlugin;
import com.devone.aibot.commands.*;
import com.devone.aibot.utils.BotLogger;

import java.util.HashMap;
import java.util.Map;

public class CommandDispatcher implements CommandExecutor {

    private final JavaPlugin plugin;
    private final Map<String, CommandExecutor> commandExecutors = new HashMap<>();

    public CommandDispatcher(AIBotPlugin plugin, BotManager botManager, ZoneManager zoneManager) {
        this.plugin = plugin;
        registerCommands(plugin, botManager, zoneManager);
    }

    // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    private void registerCommands(AIBotPlugin plugin, BotManager botManager, ZoneManager zoneManager) {
        registerCommand("bot-reload-plugin", new BotReloadPlugin(plugin));

        registerCommand("bot-add", new BotAdd(botManager));
        registerCommand("bot-select", new BotSelect(botManager));
        registerCommand("bot-list", new BotList(botManager));
        registerCommand("bot-remove", new BotRemove(botManager));
        registerCommand("bot-remove-all", new BotRemoveAll(botManager));

        registerCommand("bot-here", new BotHere(botManager));
        registerCommand("bot-move", new BotMove(botManager));
        registerCommand("bot-stop", new BotStop(botManager));
        registerCommand("bot-follow", new BotFollow(botManager));
        registerCommand("bot-protect", new BotProtect(botManager));
        registerCommand("bot-cancel", new BotCancel(botManager));

        registerCommand("zone-add", new ZoneAdd(zoneManager));
        registerCommand("zone-remove", new ZoneRemove(zoneManager));
        registerCommand("zone-list", new ZoneList(zoneManager));

        BotLogger.debug("‚úÖ –í—Å–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã: " + commandExecutors.keySet());
    }

    // ‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ–Ω–∞
    private void registerCommand(String command, CommandExecutor executor) {
        BotLogger.debug("üîπ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã: " + command);

        if (plugin.getCommand(command) == null) {
            BotLogger.debug("‚ùå –û—à–∏–±–∫–∞: –∫–æ–º–∞–Ω–¥–∞ " + command + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ plugin.yml!");
            return;
        }

        commandExecutors.put(command.toLowerCase(), executor);
        plugin.getCommand(command).setExecutor(this);

        BotLogger.debug("‚úÖ –ö–æ–º–∞–Ω–¥–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: " + command);
    }

    @Override
    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {
        CommandExecutor executor = commandExecutors.get(command.getName().toLowerCase());

        if (executor != null) {
            return executor.onCommand(sender, command, label, args);
        }

        sender.sendMessage("¬ßcUnknown command: " + command.getName());
        return false;
    }

    // ‚úÖ –ú–µ—Ç–æ–¥ –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–∞–Ω–¥ –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø–ª–∞–≥–∏–Ω–∞
    public void reloadCommands() {
        commandExecutors.clear();
        registerCommands((AIBotPlugin) plugin, ((AIBotPlugin) plugin).getBotManager(),
                ((AIBotPlugin) plugin).getZoneManager());
        BotLogger.debug("‚ôªÔ∏è –ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã!");
    }
}
