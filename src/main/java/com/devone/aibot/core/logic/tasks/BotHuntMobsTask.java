package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.logic.tasks.configs.BotHuntTaskConfig;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.utils.BotUtils;
import com.devone.aibot.utils.BotEntityUtils;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;

import java.util.List;

public class BotHuntMobsTask extends BotTask {

    private int scanRadius;
    private boolean shouldFollowPlayer = false;
    private LivingEntity targetMob = null;

    public BotHuntMobsTask(Bot bot) {
        super(bot, "üòà");
        this.config = new BotHuntTaskConfig(); // ‚úÖ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –ø–æ–ª–µ
        this.scanRadius = ((BotHuntTaskConfig) config).getScanRadius();
        this.isLogged = config.isLogged();
        setObjective("Look for hostile targets");
    }

    @Override
    public void execute() {
        BotLogger.info(isLogged(),"üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ö–æ—Ç—ã –¥–ª—è –±–æ—Ç–∞ " + bot.getId());

        setObjective("Look for hostile targets");

        if (getBioEntities() == null) {
            BotLogger.info(this.isLogged(),"üîç –ó–∞–ø—É—Å–∫–∞–µ–º 3D-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∂–∏–≤—ã—Ö —Ü–µ–ª–µ–π.");
            bot.addTaskToQueue(new BotSonar3DTask(bot, this, scanRadius, 4));
            return;
        }

        if (targetMob == null || targetMob.isDead()) {
            findTarget();
        }

        if (targetMob != null) {

            //BotUtils.lookAt(bot, targetMob.getLocation());

            bot.addTaskToQueue(new BotFollowTargetTask(bot, targetMob));
            BotLogger.info(this.isLogged(),"üéØ –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ " + targetMob.getType());
            this.stop();
            return;
        }

        if (getElapsedTime() > 180000) {
            BotLogger.info(this.isLogged(),"üò¥ –£—Å—Ç–∞–ª, –æ—Ö–æ—Ç–∞ —É—Ç–æ–º–ª—è–µ—Ç.");
            this.stop();
            return;
        }

        setBioEntities(null); // –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–∫—Ç
    }

    private void findTarget() {
        List<LivingEntity> nearbyEntities = getBioEntities();
        BotHuntTaskConfig huntConfig = (BotHuntTaskConfig) config;

        for (LivingEntity entity : nearbyEntities) {
            // kill them all
            targetMob = entity;
            BotLogger.info(this.isLogged(),"üéØ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª—å: " + targetMob.getType());
            return;

           // if (BotEntityUtils.isHostileMob(entity)) {
            //    if (huntConfig.getTargetAggressiveMobs().contains(entity.getType())) {
               //     targetMob = entity;
                //    BotLogger.info(this.isLogged(),"üéØ –ù–∞–π–¥–µ–Ω–∞ –≤—Ä–∞–∂–¥–µ–±–Ω–∞—è —Ü–µ–ª—å: " + targetMob.getType());
                   // return;
                //}
            //}
        }

        //if (shouldFollowPlayer) {
        //    for (LivingEntity entity : nearbyEntities) {
        //        if (entity instanceof Player) {
        //            targetMob = entity;
        //            BotLogger.info(this.isLogged(),"üéØ –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫! –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.");
        //            return;
        //        }
        //    }
        //}

        BotLogger.info(this.isLogged(),"‚ùå –ù–∏ –æ–¥–Ω–æ–π –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ü–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        this.stop();
    }

    @Override
    public void stop() {
        isDone = true;
    }

}
