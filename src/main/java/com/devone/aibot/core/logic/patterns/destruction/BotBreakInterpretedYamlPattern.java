package com.devone.aibot.core.logic.patterns.destruction;

import com.devone.aibot.core.Bot;
import com.devone.aibot.utils.BotLogger;
import org.bukkit.Location;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –∏–∑ YAML.
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é Java-–ª–æ–≥–∏–∫—É.
 */
public class BotBreakInterpretedYamlPattern implements IBotDestructionPattern {

    private final Path yamlPath;
    private BotBreakInterpretedPattern pattern;

    private boolean initialized = false;
    private int radius = 0;

    private final Queue<Location> blocksToBreak = new LinkedList<>();

    public BotBreakInterpretedYamlPattern(Path path) {
        this.yamlPath = path;
    }
 
    @Override    
    public IBotDestructionPattern configure(int radius) {
        this.radius = radius;
        BotLogger.trace(true, "üõ†Ô∏è –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É YAML-–ø–∞—Ç—Ç–µ—Ä–Ω–∞: " + yamlPath);

        try (InputStream inputStream = Files.newInputStream(yamlPath)) {
            this.pattern = BotBreakPatternLoader.loadFromYaml(inputStream);
            if (this.pattern != null) {
                BotLogger.info(true, "‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ YAML: " + yamlPath.getFileName());
            } else {
                BotLogger.error(true, "‚ùå loadFromYaml() –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ñ–∞–π–ª–∞: " + yamlPath);
            }
        } catch (IOException e) {
            BotLogger.error(true, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ YAML-—Ñ–∞–π–ª–∞: " + yamlPath + " ‚Äî " + e.getMessage());
        }

        return this;
    }


    public Location findNextBlock(Bot bot) {
        if (this.pattern == null) {
            BotLogger.error(true, "üö® ‚ùå –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! YAML: " + yamlPath);
            return null;
        }

        if (!initialized) {
            BotLogger.trace(true, "üîÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É...");
            List<Location> points = pattern.generate(
                    new BotBreakInterpretedPattern.PatternContext(
                            bot.getRuntimeStatus().getCurrentLocation(),
                            radius));

            if (points != null && !points.isEmpty()) {
                blocksToBreak.addAll(points);
                BotLogger.trace(true, "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ " + points.size() + " —Ç–æ—á–µ–∫ –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è");
            } else {
                BotLogger.warn(true, "‚ö†Ô∏è –ü–∞—Ç—Ç–µ—Ä–Ω YAML –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.");
            }

            initialized = true;
        }

        Location next = blocksToBreak.poll();
        if (next != null) {
            BotLogger.trace(true, "üéØ –°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫: " + next.getBlockX() + ", " + next.getBlockY() + ", " + next.getBlockZ());
        }
        return next;
    }


    public boolean isFinished() {
        return initialized && blocksToBreak.isEmpty();
    }


    public String getName() {
        return "BotBreakInterpretedYamlPattern(" + yamlPath.getFileName().toString() + ")";
    }


    public List<Location> getAllPlannedBlocks() {
        return new ArrayList<>(blocksToBreak);
    }

}
