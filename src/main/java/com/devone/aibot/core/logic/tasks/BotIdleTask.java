package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.core.logic.tasks.configs.BotIdleTaskConfig;
import com.devone.aibot.core.logic.tasks.configs.BotPatrolTaskConfig;

import org.bukkit.Location;
import org.bukkit.Material;

import com.devone.aibot.core.Bot;
import com.devone.aibot.utils.BotLogger;

public class BotIdleTask implements BotTask {
    private final Bot bot;
    private boolean isPaused = false;
    private String name = "IDLE";
    private final BotIdleTaskConfig config;
    private final BotPatrolTaskConfig patrolConfig;
    private long startTime = System.currentTimeMillis();

    public BotIdleTask(Bot bot) {
        this.bot = bot;
        this.config = new BotIdleTaskConfig();
        this.patrolConfig = new BotPatrolTaskConfig();
    }

    @Override
    public void configure(Object... params) {
        // –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ñ–∏–≥, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    }

    @Override
    public void update() {
        if (isPaused) return;
    
        double rand = Math.random();
        
        if (rand < 0.4) {
            // üìå 40% —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            BotLogger.debug(bot.getId() + " üëÄ Start Patroling");
            BotPatrolTask patrolTask = new BotPatrolTask(bot);
            bot.getLifeCycle().getTaskStackManager().pushTask(patrolTask);
        } else if (rand < 0.7) {
            // ‚õè 30% —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É
            BotLogger.debug(bot.getId() + " ‚õè Start Mining");
            BotBreakBlockTask mineTask = new BotBreakBlockTask(bot);
            mineTask.configure(Material.DIRT, 64, 4);
            bot.getLifeCycle().getTaskStackManager().pushTask(mineTask);
        } else {
            // üí§ 30% —à–∞–Ω—Å –æ—Å—Ç–∞—Ç—å—Å—è –≤ IDLE
            BotLogger.debug(bot.getId() + " üåô –û—Å—Ç–∞—ë—Ç—Å—è –≤ IDLE.");
        }
    }

    @Override
    public boolean isDone() {
        return false;
    }

    @Override
    public void setPaused(boolean paused) {
        this.isPaused = paused;
        BotLogger.debug(bot.getId() + (paused ? " Í©ú Waiting" : " ‚ñ∂Ô∏è Resuming"));
    }

    @Override
    public String getName() {
        return name;
    }

    @Override
    public Location getTargetLocation() {
        return bot.getNPCCurrentLocation();
    }

    @Override
    public long getElapsedTime() {
        return System.currentTimeMillis() - startTime;
    }
}
