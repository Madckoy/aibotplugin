package com.devone.aibot.core.logic.tasks;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.block.Block;
import com.devone.aibot.core.Bot;
import com.devone.aibot.core.ZoneManager;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.AIBotPlugin;

public class BotBreakBlockTask implements BotTask {
    private final Bot bot;
    private Location targetLocation;
    private boolean isDone = false;
    private long startTime = System.currentTimeMillis();

    private String name = "BREAK_BLOCK";

    public BotBreakBlockTask(Bot bot) {
        this.bot = bot;
    }

    @Override
    public void configure(Object... params) {
        if (params.length == 1 && params[0] instanceof Location) {
            this.targetLocation = (Location) params[0];
            
            isDone = false;
            BotLogger.debug("üî® BreakBlockTask —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞: " + formatLocation(targetLocation));
        } else {
            BotLogger.debug("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ BreakBlockTask: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
        }
    }

    @Override
    public void update() {
        if (isDone || targetLocation == null) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –±–ª–æ–∫ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ
        if (ZoneManager.getInstance().isInProtectedZone(targetLocation)) {
            BotLogger.debug("‚õî –ë–æ—Ç " + bot.getId() + " –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï —Ä–∞–∑—Ä—É—à–∞–µ—Ç –±–ª–æ–∫ " + formatLocation(targetLocation));
            isDone = true;
            return;
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑—Ä—É—à–∞—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Bukkit.getScheduler().runTask(AIBotPlugin.getInstance(), () -> {
            Block block = targetLocation.getBlock();
            Material type = block.getType();

            if (type != Material.AIR) {
                block.breakNaturally(); // ‚úÖ –¢–µ–ø–µ—Ä—å –ª–æ–º–∞–µ–º –±–ª–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                BotLogger.debug("üí• –ë–æ—Ç " + bot.getId() + " —Ä–∞–∑—Ä—É—à–∏–ª –±–ª–æ–∫ " + type + " –Ω–∞ " + formatLocation(targetLocation));
            }

            isDone = true; // ‚úÖ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
        });
    }

    @Override
    public boolean isDone() {
        return isDone;
    }

    @Override
    public void setPaused(boolean paused) {
        // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–∞ –∑–∞–¥–∞—á–∞ –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è
    }

    private String formatLocation(Location loc) {
        return "(" + loc.getBlockX() + ", " + loc.getBlockY() + ", " + loc.getBlockZ() + ")";
    }

    @Override
    public String getName() {
        return name;
    }

    public Location getTargetLocation() {
        return targetLocation;
    }

    @Override
    public long getElapsedTime() {
        return System.currentTimeMillis() - startTime;
    }
}
