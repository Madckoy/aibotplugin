package com.devone.aibot.core.logic.tasks;

import java.util.HashMap;
import java.util.Map;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import com.devone.aibot.core.Bot;
import com.devone.aibot.core.ZoneManager;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.utils.BotUtils;
import com.devone.aibot.utils.MaterialDetector;
import com.devone.aibot.AIBotPlugin;

public class BotBreakBlockTask implements BotTask {

    private final Bot bot;
        
    private Location targetLocation;

    private long startTime = System.currentTimeMillis();

    private String name = "BREAK";

    private MaterialDetector materialDetector;

    private int blocksMined = 0;
    private int maxBlocks;
    private int searchRadius; // –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤
    private int breakProgress = 0;
    private Material mat = Material.DIRT;
    
    private boolean isDone;
    
    private static final Map<Material, Integer> BREAK_TIME_PER_BLOCK = new HashMap<>();
    
    static {
        BREAK_TIME_PER_BLOCK.put(Material.DIRT, 5);  // 5 —Ç–∏–∫–æ–≤ (0.25 —Å–µ–∫)
        BREAK_TIME_PER_BLOCK.put(Material.STONE, 30); // –î–æ–ª—å—à–µ –ª–æ–º–∞—Ç—å (1.5 —Å–µ–∫)
            //BREAK_TIME_PER_BLOCK.put(Material.LOG, 15);   // –î–µ—Ä–µ–≤–æ (0.75 —Å–µ–∫)
    }
    
    public BotBreakBlockTask(Bot bot) {
        this.bot = bot;
    }
    
    @Override
    public void configure(Object... params) {
        if (params.length >= 1 && params[0] instanceof Material) {
            mat = (Material) params[0];
        }
            
        if (params.length >= 2 && params[1] instanceof Integer) {
            this.searchRadius = (Integer) params[1];
        }
            
        if (params.length >= 3 && params[2] instanceof Integer) {
            this.maxBlocks = (Integer) params[2];
        }        
    
        materialDetector = new MaterialDetector(searchRadius); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        BotLogger.debug("üî® BreakBlockTask —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞: " + BotUtils.formatLocation(targetLocation));
    }
    
    @Override
    public void update() {
        if (isDone()) return;
    
        if (targetLocation==null) {
            // –ò—â–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–ª–æ–∫
            targetLocation = materialDetector.findClosestMaterial(mat, bot.getNPCCurrentLocation());
            if (targetLocation == null) {
                BotLogger.info(bot.getId() + " ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–æ–±—ã—á–∏!");
                isDone = true;
                return;
            }
        }

        if(targetLocation!=null) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –±–ª–æ–∫ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ
            if (ZoneManager.getInstance().isInProtectedZone(targetLocation)) {
                BotLogger.debug("‚õî –ë–æ—Ç " + bot.getId() + " –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï —Ä–∞–∑—Ä—É—à–∞–µ—Ç –±–ª–æ–∫ " + BotUtils.formatLocation(targetLocation));
                isDone = true;
                return;
            }
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞–∑—Ä—É—à–∞—é—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        Bukkit.getScheduler().runTask(AIBotPlugin.getInstance(), () -> {
            if (targetLocation != null) {
                Material blockType = targetLocation.getBlock().getType();
                int breakTime = BREAK_TIME_PER_BLOCK.getOrDefault(blockType, 10); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 10 —Ç–∏–∫–æ–≤ (0.5 —Å–µ–∫)
                // –≠–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ª–æ–º–∞–Ω–∏—è
                if (breakProgress < breakTime) {
                breakProgress++;
                BotLogger.info(bot.getId() + " ‚è≥ –õ–æ–º–∞–µ–º " + blockType + " [" + breakProgress + "/" + breakTime + "]");
                    return;
                }
        
                targetLocation.getBlock().setType(Material.AIR); // –ö–æ–ø–∞–µ–º –±–ª–æ–∫
                blocksMined++;
                breakProgress = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ª–æ–º–∞–Ω–∏—è
                BotLogger.debug("üí• –ë–æ—Ç " + bot.getId() + " —Ä–∞–∑—Ä—É—à–∏–ª –±–ª–æ–∫ " + blockType + " –Ω–∞ " + BotUtils.formatLocation(targetLocation));
                targetLocation = null;
            }
    
            if (blocksMined >= maxBlocks) {
                isDone = true;   
            }
        });
    }

    @Override
    public boolean isDone() {
        return isDone;
    }

    @Override
    public void setPaused(boolean paused) { 
        BotLogger.debug("‚è∏ –ü–∞—É–∑–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è " + name);
    }

    @Override
    public String getName() {
        return name;
    }

    public Location getTargetLocation() {
        return targetLocation;
    }

    @Override
    public long getElapsedTime() {
        return System.currentTimeMillis() - startTime;
    }
}
