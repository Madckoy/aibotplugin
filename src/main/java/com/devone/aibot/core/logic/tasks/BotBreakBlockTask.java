package com.devone.aibot.core.logic.tasks;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import com.devone.aibot.core.Bot;
import com.devone.aibot.core.ZoneManager;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.utils.BotUtils;
import com.devone.aibot.utils.MaterialDetector;
import com.devone.aibot.AIBotPlugin;

public class BotBreakBlockTask implements BotTask {

    private final Bot bot;
    private Location targetLocation;
    private long startTime = System.currentTimeMillis();
    private String name = "BREAK";
    private MaterialDetector materialDetector;
    private int blocksMined = 0;
    private int maxBlocks;
    private int searchRadius;
    private int breakProgress = 0;
    private Set<Material> targetMaterials = null;
    private boolean isDone;

    private static final Map<Material, Integer> BREAK_TIME_PER_BLOCK = new HashMap<>();
    
    static {
        BREAK_TIME_PER_BLOCK.put(Material.DIRT, 5);  
        BREAK_TIME_PER_BLOCK.put(Material.STONE, 30); 
    }
    
    public BotBreakBlockTask(Bot bot) {
        this.bot = bot;
    }
    
    @Override
    public void configure(Object... params) {
        if (params.length >= 1) {
            if (params[0] instanceof Material) {
                targetMaterials = Set.of((Material) params[0]);
            } else if (params[0] instanceof Set) {
                targetMaterials = (Set<Material>) params[0];
                if (targetMaterials.isEmpty()) {
                    targetMaterials = null; 
                }
            }
        }
        
        if (params.length >= 2 && params[1] instanceof Integer) {
            this.searchRadius = (Integer) params[1];
        }

        if (params.length >= 3 && params[2] instanceof Integer) {
            this.maxBlocks = (Integer) params[2];
        }

        materialDetector = new MaterialDetector(searchRadius);
        BotLogger.debug("üî® BreakBlockTask —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞: " + (targetMaterials == null ? "–í–°–ï –ë–õ–û–ö–ò" : targetMaterials));
    }

    @Override
    public boolean isDone() {
        return isDone;
    }

    @Override
    public void setPaused(boolean paused) { 
        BotLogger.debug("‚è∏ –ü–∞—É–∑–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –¥–ª—è " + name);
    }

    @Override
    public String getName() {
        return name;
    }

    public Location getTargetLocation() {
        return targetLocation;
    }

    @Override
    public long getElapsedTime() {
        return System.currentTimeMillis() - startTime;
    }

    //-----------------------------------------------------------------
    @Override
    public void update() {
        if (isDone) return;
    
        if (targetLocation == null) {
            BotLogger.debug("[BotBreakBlockTask] "+bot.getId() + " is looking for a block to break. Target material - "+ targetMaterials);
            targetLocation = materialDetector.findClosestMaterialInSet(targetMaterials, bot.getNPCCurrentLocation());

            if (targetLocation == null) {
                BotLogger.debug(bot.getId() + " ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–æ–±—ã—á–∏!");
                isDone = true;
                return;
            }

            BotLogger.debug(bot.getId() + " üõ†Ô∏è –ù–∞—à–µ–ª " + targetLocation.getBlock().getType() + " –Ω–∞ " + BotUtils.formatLocation(targetLocation));

        } else {
            BotLogger.debug("[BotBreakBlockTask] "+bot.getId() + " Wants to break a block of  "+ targetMaterials + " at " + BotUtils.formatLocation(targetLocation));
        }

        if (targetLocation.getBlock().getType() == Material.AIR) {
            BotLogger.debug("‚ö†Ô∏è –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –ª–æ–º–∞—Ç—å –≤–æ–∑–¥—É—Ö! –ú–µ–Ω—è–µ–º —Ü–µ–ª—å...");
            targetLocation = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–µ–ª—å, —á—Ç–æ–±—ã –±–æ—Ç –∏—Å–∫–∞–ª –∑–∞–Ω–æ–≤–æ
            return;
        }

        if (ZoneManager.getInstance().isInProtectedZone(targetLocation)) {
            BotLogger.debug("‚õî –ë–æ—Ç " + bot.getId() + " –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï —Ä–∞–∑—Ä—É—à–∞–µ—Ç –±–ª–æ–∫ " + BotUtils.formatLocation(targetLocation));
            isDone = true;
            return;
        }

        // –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤ –≤–æ–∫—Ä—É–≥
        List<Location> blocksToMine = new ArrayList<>();
        Location[] adjacentLocations = {
            targetLocation.clone().add(1, 0, 0),
            targetLocation.clone().add(-1, 0, 0),
            targetLocation.clone().add(0, 0, 1),
            targetLocation.clone().add(0, 0, -1),
            targetLocation.clone().add(0, 1, 0)
        };

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏
        for (Location loc : adjacentLocations) {
            if (targetMaterials == null || targetMaterials.contains(loc.getBlock().getType())) {
                blocksToMine.add(loc);
            }
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –±–ª–æ–∫–∏ –≤–æ–∫—Ä—É–≥ ‚Äì —Å–Ω–∞—á–∞–ª–∞ –∫–æ–ø–∞–µ–º –∏—Ö
        if (!blocksToMine.isEmpty()) {
            targetLocation = blocksToMine.get(0);
            BotLogger.debug("üß± –õ–æ–º–∞–µ–º —Å–æ—Å–µ–¥–Ω–∏–π –±–ª–æ–∫ " + BotUtils.formatLocation(targetLocation));
            return;
        }

        // –ï—Å–ª–∏ –≤–æ–∫—Ä—É–≥ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ –Ω–∏–∂–µ
        Location below = targetLocation.clone().add(0, -1, 0);
        if (targetMaterials == null || targetMaterials.contains(below.getBlock().getType())) {
            targetLocation = below;
            BotLogger.debug("üîΩ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±–ª–æ–∫ –Ω–∏–∂–µ " + BotUtils.formatLocation(below));
            return;
        }

        // –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è
        Material blockType = targetLocation.getBlock().getType();
        int breakTime = BREAK_TIME_PER_BLOCK.getOrDefault(blockType, 10);

        if (breakProgress < breakTime) {
            breakProgress++;
            bot.getNPCEntity().getWorld().playEffect(targetLocation, org.bukkit.Effect.STEP_SOUND, blockType);
            BotLogger.debug(bot.getId() + " ‚è≥ –õ–æ–º–∞–µ–º " + blockType + " [" + breakProgress + "/" + breakTime + "]");
            return;
        }

        // –†–∞–∑—Ä—É—à–∞–µ–º –±–ª–æ–∫
        Bukkit.getScheduler().runTask(AIBotPlugin.getInstance(), () -> {
            if (targetLocation != null) {
                Material currentBlock = targetLocation.getBlock().getType();
                BotLogger.debug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ –ø–µ—Ä–µ–¥ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ–º: " + currentBlock);

                if (currentBlock == blockType) {
                    targetLocation.getBlock().breakNaturally();
                    BotLogger.debug("‚úÖ –ë–ª–æ–∫ —Ä–∞–∑—Ä—É—à–µ–Ω –Ω–∞ " + BotUtils.formatLocation(targetLocation));

                    blocksMined++;
                    breakProgress = 0;

                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å–µ–¥–Ω–∏—Ö –±–ª–æ–∫–æ–≤
                    List<Location> newBlocksToMine = new ArrayList<>();
                    for (Location loc : adjacentLocations) {
                        if (targetMaterials == null || targetMaterials.contains(loc.getBlock().getType())) {
                            newBlocksToMine.add(loc);
                        }
                    }

                    if (!newBlocksToMine.isEmpty()) {
                        targetLocation = newBlocksToMine.get(0);
                        BotLogger.debug("üß± –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ª–æ–º–∞—Ç—å —Å–æ—Å–µ–¥–Ω–∏–π –±–ª–æ–∫ " + BotUtils.formatLocation(targetLocation));
                        return;
                    }

                    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫ –Ω–∏–∂–µ
                    if (targetMaterials == null || targetMaterials.contains(below.getBlock().getType())) {
                        targetLocation = below;
                        BotLogger.debug("üîΩ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –±–ª–æ–∫ –Ω–∏–∂–µ " + BotUtils.formatLocation(below));
                    } else {
                        targetLocation = null;
                        isDone = true;
                    }
                } else {
                    BotLogger.debug("‚ö†Ô∏è –ë–ª–æ–∫ —É–∂–µ –∏–∑–º–µ–Ω–µ–Ω! " + BotUtils.formatLocation(targetLocation));
                }
            }
        });
    }
}
