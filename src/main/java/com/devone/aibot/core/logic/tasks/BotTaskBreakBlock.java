package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.core.BotInventory;
import java.util.*;

import com.devone.aibot.utils.BotStringUtils;
import com.devone.aibot.utils.BotUtils;
import com.devone.aibot.utils.BotEnv3DScan;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.util.Vector;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.BotZoneManager;
import com.devone.aibot.core.logic.tasks.configs.BotTaskBreakBlockConfig;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.AIBotPlugin;

public class BotTaskBreakBlock extends BotTask {

    private int maxBlocks;
    private int searchRadius;
    private boolean shouldPickup = true;
    private boolean destroyAllIfNoTarget = false;
    private Set<Material> targetMaterials = null;
    //private BotTaskBreakBlockConfig config;
    private Location targetLocation;

    public BotTaskBreakBlock(Bot bot) {
        super(bot, "‚õèÔ∏è");
        config = new BotTaskBreakBlockConfig();
    }

    @Override
    public BotTask configure(Object... params) {
        super.configure(params);
        if (params.length >= 1 && params[0] instanceof Set) {
            targetMaterials = (Set<Material>) params[0];
            if (targetMaterials.isEmpty()) targetMaterials = null;
        }
        if (params.length >= 2 && params[1] instanceof Integer) {
            this.maxBlocks = (Integer) params[1];
        }
        if (params.length >= 3 && params[2] instanceof Integer) {
            this.searchRadius = (Integer) params[2];
        }
        if (params.length >= 4 && params[3] instanceof Boolean) {
            this.shouldPickup = (Boolean) params[3];
        }
        if (params.length >= 5 && params[4] instanceof Boolean) {
            this.destroyAllIfNoTarget = (Boolean) params[4];
        }
        bot.setAutoPickupEnabled(shouldPickup);
        BotLogger.debug("‚öôÔ∏è BotTaskBreakBlock –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: " + (targetMaterials == null ? "–í–°–ï –ë–õ–û–ö–ò" : targetMaterials));
        return this;
    }

    public void setTargetMaterials(Set<Material> materials) {
        this.targetMaterials = materials;
        BotLogger.trace("üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + materials);
    }

    public Set<Material> getTargetMaterials() {
        BotLogger.trace("üìú –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + targetMaterials);
        return this.targetMaterials;
    }

    @Override
    public void executeTask() {
        BotLogger.trace("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ " + bot.getId() + " (–¶–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + (targetMaterials == null ? "–í–°–ï" : targetMaterials) + ")");


        if (isInventoryFull() || isEnoughBlocksCollected()) {
            BotLogger.trace("‚õî –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ");
            isDone = true;
            return;
        }

        bot.pickupNearbyItems(shouldPickup);

        if (getEnvMap() == null) {
            BotLogger.trace("üîç –ó–∞–ø—É—Å–∫–∞–µ–º 3D-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.");
            bot.addTaskToQueue(new BotTaskSonar3D(bot, this, searchRadius, searchRadius));
            isDone = false;
            return;
        }

        targetLocation = findNextTargetBlock();

        if (targetLocation != null) {
 
            if (isInProtectedZone(targetLocation)) {
                BotLogger.debug("‚õî " + bot.getId() + " –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï –±—É–¥–µ—Ç —Ä–∞–∑—Ä—É—à–∞—Ç—å –±–ª–æ–∫: " + BotStringUtils.formatLocation(targetLocation));
                isDone = true;
                return;
            }

            BotLogger.trace("üõ†Ô∏è –¶–µ–ª–µ–≤–æ–π –±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω: " + BotStringUtils.formatLocation(targetLocation));

            // Set<Material> targetMaterials = getTargetMaterials();

            setObjective("–†–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞: " + BotUtils.getBlockName(targetLocation.getBlock()));
   
            BotLogger.trace("üöß " + bot.getId() + " –†–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞: " + targetLocation.getBlock().toString());
        
            BotTaskUseHand hand_task = new BotTaskUseHand(bot);
            hand_task.configure(targetLocation);
            bot.addTaskToQueue(hand_task);

        } else {

            handleNoTargetFound();
        }
    }

    private Location findNextTargetBlock() {
        Location botLoc = bot.getNPCCurrentLocation();
        int botY = botLoc.getBlockY();
        Random random = new Random();
    
        List<Location> sortedTargets = envMap.keySet().stream()
            .filter(loc -> loc.getBlockY() >= botY - 1 && loc.getBlockY() <= botY + 1) // –¢–æ–ª—å–∫–æ ¬±1 —É—Ä–æ–≤–µ–Ω—å
            .filter(loc -> isBlockExposed(loc) && isValidTargetBlock(loc.getBlock().getType())) // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏
            .sorted(Comparator.comparingInt(loc -> -loc.getBlockY())) // ‚ùó –¢–µ–ø–µ—Ä—å –∫–æ–ø–∞–µ–º —Å–≤–µ—Ä—Ö—É –≤–Ω–∏–∑
            .toList();
    
        for (Location candidate : sortedTargets) {
            Material blockType = candidate.getBlock().getType();
    
            // ‚ùó –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≤–∏—Å–∞–µ—Ç –ª–∏ –±–ª–æ–∫ –≤ –≤–æ–∑–¥—É—Ö–µ
            if (gravityCheck(candidate)) continue; // ‚ùå –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∏—Å—è—â–∏–µ –±–ª–æ–∫–∏
    
            // ‚ùó –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            if (BotUtils.requiresTool(blockType) && !BotInventory.hasToolFor(bot, blockType)) {
                envMap.remove(candidate); // üî• –£–±–∏—Ä–∞–µ–º, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –ø—ã—Ç–∞–ª—Å—è —Å–Ω–æ–≤–∞
                BotUtils.sendMessageToPlayer(null, bot.getId(), "I need a proper tool to break " + blockType + "!");
                return null; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –±–ª–æ–∫
            }
    
            envMap.remove(candidate); // ‚úÖ –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            
            // üåÄ –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º
            int offsetX = random.nextInt(3) - 1; // -1, 0 –∏–ª–∏ +1
            int offsetZ = random.nextInt(3) - 1;
            int offsetY = (random.nextDouble() < 0.15) ? (random.nextBoolean() ? 1 : -1) : 0; // üîÑ 15% —à–∞–Ω—Å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—ã—Å–æ—Ç—É
    
            return candidate.clone().add(offsetX, offsetY, offsetZ);
        }
    
        return null; // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞—à–ª–∏
    }
    
    
    private boolean isValidTargetBlock(Material blockType) {
        return blockType != Material.AIR && blockType != Material.WATER && blockType != Material.LAVA &&
               (targetMaterials == null || targetMaterials.contains(blockType));
    }
    
    private boolean gravityCheck(Location loc) {
        Location above = loc.clone().add(0, 1, 0);
        return above.getBlock().getType() == Material.AIR; // –ï—Å–ª–∏ —Å–≤–µ—Ä—Ö—É –≤–æ–∑–¥—É—Ö ‚Äì –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    }
    

    private void handleNoTargetFound() {
        if (destroyAllIfNoTarget) {
            BotLogger.trace("üîÑ " + bot.getId() + " –¶–µ–ª–µ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –Ω–µ—Ç! –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ.");
            bot.addTaskToQueue(new BotTaskBreakBlockAny(bot));
            isDone = false;
        } else {
            setObjective("");  
            BotLogger.trace("‚ùå " + bot.getId() + " –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–∫–æ–≤. –ó–∞–≤–µ—Ä—à–∞–µ–º.");
            isDone = true;
        }
    }

    private boolean isInventoryFull() {
        boolean full = !BotInventory.hasFreeInventorySpace(bot, targetMaterials);
        BotLogger.trace("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: " + (full ? "–ø–æ–ª–æ–Ω" : "–µ—Å—Ç—å –º–µ—Å—Ç–æ"));
        return full;
    }

    private boolean isEnoughBlocksCollected() {
        boolean enough = BotInventory.hasEnoughBlocks(bot, targetMaterials, maxBlocks);
        BotLogger.trace("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤: " + (enough ? "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" : "–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ"));
        return enough;
    }

    private boolean isInProtectedZone(Location location) {
        boolean protectedZone = BotZoneManager.getInstance().isInProtectedZone(location);
        if (protectedZone) {
            BotLogger.trace("üõë –ë–ª–æ–∫ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.");
        }
        return protectedZone;
    }

    private boolean isBlockExposed(Location loc) {
        for (int dx = -1; dx <= 1; dx++) {
            for (int dy = -1; dy <= 1; dy++) {
                for (int dz = -1; dz <= 1; dz++) {
                    if (dx == 0 && dy == 0 && dz == 0) continue; // –°–∞–º –±–ª–æ–∫ –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
                    
                    Location neighbor = loc.clone().add(dx, dy, dz);
                    Material type = neighbor.getBlock().getType();
    
                    if (type == Material.AIR || type == Material.WATER || type == Material.LAVA) {
                        return true; // –ë–ª–æ–∫ –≤–∏–¥–∏–º—ã–π, –µ—Å–ª–∏ —Ä—è–¥–æ–º –≤–æ–∑–¥—É—Ö, –≤–æ–¥–∞ –∏–ª–∏ –ª–∞–≤–∞
                    }
                }
            }
        }
        return false; // –ë–ª–æ–∫ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–∫—Ä—É–∂—ë–Ω —Ç–≤—ë—Ä–¥—ã–º–∏ –±–ª–æ–∫–∞–º–∏
    }

}
