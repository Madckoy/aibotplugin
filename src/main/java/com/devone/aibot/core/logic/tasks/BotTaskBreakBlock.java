package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.core.BotInventory;
import java.util.*;

import com.devone.aibot.utils.BotStringUtils;
import com.devone.aibot.utils.BotUtils;
import com.devone.aibot.utils.BotEnv3DScan;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.util.Vector;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.BotZoneManager;
import com.devone.aibot.core.logic.tasks.configs.BotTaskBreakBlockConfig;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.AIBotPlugin;

public class BotTaskBreakBlock extends BotTask {

    private int maxBlocks;
    private int searchRadius;
    private boolean shouldPickup = true;
    private boolean destroyAllIfNoTarget = false;
    private Set<Material> targetMaterials = null;
    //private BotTaskBreakBlockConfig config;
    private Location targetLocation;

    public BotTaskBreakBlock(Bot bot) {
        super(bot, "‚õèÔ∏è");
        config = new BotTaskBreakBlockConfig();
    }

    @Override
    public BotTask configure(Object... params) {
        super.configure(params);
        if (params.length >= 1 && params[0] instanceof Set) {
            targetMaterials = (Set<Material>) params[0];
            if (targetMaterials.isEmpty()) targetMaterials = null;
        }
        if (params.length >= 2 && params[1] instanceof Integer) {
            this.maxBlocks = (Integer) params[1];
        }
        if (params.length >= 3 && params[2] instanceof Integer) {
            this.searchRadius = (Integer) params[2];
        }
        if (params.length >= 4 && params[3] instanceof Boolean) {
            this.shouldPickup = (Boolean) params[3];
        }
        if (params.length >= 5 && params[4] instanceof Boolean) {
            this.destroyAllIfNoTarget = (Boolean) params[4];
        }
        bot.setAutoPickupEnabled(shouldPickup);
        BotLogger.debug("‚öôÔ∏è BotTaskBreakBlock –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: " + (targetMaterials == null ? "–í–°–ï –ë–õ–û–ö–ò" : targetMaterials));
        return this;
    }

    public void setTargetMaterials(Set<Material> materials) {
        this.targetMaterials = materials;
        BotLogger.trace("üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + materials);
    }

    public Set<Material> getTargetMaterials() {
        BotLogger.trace("üìú –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + targetMaterials);
        return this.targetMaterials;
    }

    @Override
    public void executeTask() {
        BotLogger.trace("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ " + bot.getId() + " (–¶–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + (targetMaterials == null ? "–í–°–ï" : targetMaterials) + ")");


        if (isInventoryFull() || isEnoughBlocksCollected()) {
            BotLogger.trace("‚õî –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ");
            isDone = true;
            return;
        }

        bot.pickupNearbyItems(shouldPickup);

        if (getEnvMap() == null) {
            BotLogger.trace("üîç –ó–∞–ø—É—Å–∫–∞–µ–º 3D-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.");
            bot.addTaskToQueue(new BotTaskSonar3D(bot, this, searchRadius, searchRadius));
            isDone = false;
            return;
        }

        targetLocation = findNextTargetBlock();

        if (targetLocation != null) {
 
            if (isInProtectedZone(targetLocation)) {
                BotLogger.debug("‚õî " + bot.getId() + " –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï –±—É–¥–µ—Ç —Ä–∞–∑—Ä—É—à–∞—Ç—å –±–ª–æ–∫: " + BotStringUtils.formatLocation(targetLocation));
                isDone = true;
                return;
            }

            BotLogger.trace("üõ†Ô∏è –¶–µ–ª–µ–≤–æ–π –±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω: " + BotStringUtils.formatLocation(targetLocation));

            // Set<Material> targetMaterials = getTargetMaterials();

            setObjective("–†–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞: " + BotUtils.getBlockName(targetLocation.getBlock()));
   

            BotLogger.trace("üöß " + bot.getId() + " –†–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞: " + targetLocation.getBlock().toString());
        
            BotTaskUseHand hand_task = new BotTaskUseHand(bot);
            hand_task.configure(targetLocation);
            bot.addTaskToQueue(hand_task);

        } else {

            handleNoTargetFound();
        }
    }

    private Location findNextTargetBlock() {
        Map<Location, Material> envMap = getEnvMap();
    
        if (envMap == null || envMap.isEmpty()) {
            BotLogger.trace("üîÑ EnvMap –ø—É—Å—Ç–∞—è, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä...");
            bot.addTaskToQueue(new BotTaskSonar3D(bot, this, searchRadius, searchRadius));
            return null;
        }
    
        Location botLoc = bot.getNPCCurrentLocation();
        int botY = botLoc.getBlockY();
    
        Location target = null;
        Iterator<Map.Entry<Location, Material>> iterator = envMap.entrySet().iterator();
    
        // üî• 1. –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –±–ª–æ–∫–∏ –Ω–∞ —Å–≤–æ—ë–º —É—Ä–æ–≤–Ω–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å)
        while (iterator.hasNext()) {
            Map.Entry<Location, Material> entry = iterator.next();
            Location candidate = entry.getKey();
            Material blockType = entry.getValue();
    
            if (candidate.getBlockY() == botY) { // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –±–ª–æ–∫–∏ –Ω–∞ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ
                if (isValidTargetBlock(blockType)) {
                    target = candidate;
                    iterator.remove();
                    return target;
                }
            }
        }
    
        // üî• 2. –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤—ã—à–µ –∏ –Ω–∏–∂–µ
        iterator = envMap.entrySet().iterator();
        while (iterator.hasNext()) {
            Map.Entry<Location, Material> entry = iterator.next();
            Location candidate = entry.getKey();
            Material blockType = entry.getValue();
    
            if (isValidTargetBlock(blockType)) {
                target = candidate;
                iterator.remove();
                return target;
            }
        }
    
        BotLogger.trace("üîé –ü–æ–∏—Å–∫ —Ü–µ–ª–µ–≤–æ–≥–æ –±–ª–æ–∫–∞: " + (target != null ? "–Ω–∞–π–¥–µ–Ω" : "–Ω–µ –Ω–∞–π–¥–µ–Ω"));
        return target;
    }
    
    private boolean isValidTargetBlock(Material blockType) {
        return blockType != Material.AIR && blockType != Material.WATER && blockType != Material.LAVA &&
               (targetMaterials == null || targetMaterials.contains(blockType));
    }
    
    

    private void handleNoTargetFound() {
        if (destroyAllIfNoTarget) {
            BotLogger.trace("üîÑ " + bot.getId() + " –¶–µ–ª–µ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –Ω–µ—Ç! –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ.");
            bot.addTaskToQueue(new BotTaskBreakBlockAny(bot));
            isDone = false;
        } else {
            setObjective("");  
            BotLogger.trace("‚ùå " + bot.getId() + " –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–∫–æ–≤. –ó–∞–≤–µ—Ä—à–∞–µ–º.");
            isDone = true;
        }
    }

    private boolean isInventoryFull() {
        boolean full = !BotInventory.hasFreeInventorySpace(bot, targetMaterials);
        BotLogger.trace("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: " + (full ? "–ø–æ–ª–æ–Ω" : "–µ—Å—Ç—å –º–µ—Å—Ç–æ"));
        return full;
    }

    private boolean isEnoughBlocksCollected() {
        boolean enough = BotInventory.hasEnoughBlocks(bot, targetMaterials, maxBlocks);
        BotLogger.trace("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤: " + (enough ? "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" : "–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ"));
        return enough;
    }

    private boolean isInProtectedZone(Location location) {
        boolean protectedZone = BotZoneManager.getInstance().isInProtectedZone(location);
        if (protectedZone) {
            BotLogger.trace("üõë –ë–ª–æ–∫ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.");
        }
        return protectedZone;
    }

}
