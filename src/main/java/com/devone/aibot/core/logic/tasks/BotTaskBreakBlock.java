package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.core.BotInventory;
import java.util.*;

import com.devone.aibot.utils.BotStringUtils;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import com.devone.aibot.core.Bot;
import com.devone.aibot.core.BotZoneManager;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.utils.BotScanEnv;
import com.devone.aibot.AIBotPlugin;

public class BotTaskBreakBlock extends BotTask {

    private int maxBlocks;
    private int searchRadius;
    private int breakProgress = 0;
    private Set<Material> targetMaterials = null;

    private Map<Location, Material> scannedBlocks;

    private boolean shouldPickup = true;

    private Queue<Location> pendingBlocks = new LinkedList<>(); // –û—á–µ—Ä–µ–¥—å –±–ª–æ–∫–æ–≤ —Ä—è–¥–æ–º

    private static final Map<Material, Integer> BREAK_TIME_PER_BLOCK = new HashMap<>();
    
    public BotTaskBreakBlock(Bot bot) {
        super(bot, "BREAK");
        this.bot = bot;
    }
    
    @Override
    public void configure(Object... params) {
        super.configure(params);

        if (params.length >= 1 && params[0] instanceof Set) {
            targetMaterials = (Set<Material>) params[0];
            if (targetMaterials.isEmpty()) targetMaterials = null;
        }

        if (params.length >= 2 && params[1] instanceof Integer) {
            this.maxBlocks = (Integer) params[1];
        }

        if (params.length >= 3 && params[2] instanceof Integer) {
            this.searchRadius = (Integer) params[2];
        }
        
        if (params.length >= 4 && params[3] instanceof Integer) {
            this.shouldPickup = (boolean) params[3];
        }

        bot.setAutoPickupEnabled(shouldPickup);

        BotLogger.info("üî® BreakBlockTask —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–∞: " + (targetMaterials == null ? "–í–°–ï –ë–õ–û–ö–ò" : targetMaterials));
    }
    
    @Override
    public void executeTask() {

        if(!BotInventory.hasFreeInventorySpace(bot, targetMaterials)) {
            BotLogger.info("üîÑ " +bot.getId() + " No free space in Inventory! Exiting...");
            isDone = true;
            return;
        }

        //
        if (BotInventory.hasEnoughBlocks(bot, targetMaterials, maxBlocks)){
            BotLogger.info("üîÑ " + bot.getId() + " Collected enough materials! Exiting...");
            isDone = true;
            return;
        }

        // pickup items
        bot.pickupNearbyItems(shouldPickup);

        if (targetLocation == null) {
            if (!pendingBlocks.isEmpty()) {
                targetLocation = pendingBlocks.poll(); // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                BotLogger.info(" üîÑ " + bot.getId() + " –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –±–ª–æ–∫—É " + BotStringUtils.formatLocation(targetLocation));
            } else {
                // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ä—Ç—É –±–ª–æ–∫–æ–≤ –≤ —Ä–∞–¥–∏—É—Å–µ –ø–æ–∏—Å–∫–∞
                Map<Location, Material> scannedBlocks = BotScanEnv.scan3D(bot.getNPCCurrentLocation(), searchRadius);

                targetLocation = findNearestTargetBlock(scannedBlocks);

                if (targetLocation == null) {
                    BotLogger.info("‚ùå " + bot.getId() + " –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–ª–æ–∫–æ–≤ –¥–ª—è –¥–æ–±—ã—á–∏! –ü–µ—Ä–µ–º–µ—â–∞–µ–º—Å—è –∫ –Ω–æ–≤–æ–π —Ü–µ–ª–∏.");
                                               
                        Location newLocation = findNearestTargetBlock(scannedBlocks);

                        if(newLocation!=null) {

                            BotTaskMove moveTask = new BotTaskMove(bot);
                            moveTask.configure(newLocation);
                      
                            bot.getLifeCycle().getTaskStackManager().pushTask(moveTask); // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –±–æ—Ç–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π —Ç–∞—Å–∫ –≤ —Å—Ç–µ–∫–µ

                           return;

                        } else {
                            //  Stop Task and exit
                            isDone = true;
                            return;
                        }
                }

                BotLogger.info("üõ†Ô∏è " + bot.getId() + " –ù–∞—à–µ–ª " + targetLocation.getBlock().getType() + " –Ω–∞ " + BotStringUtils.formatLocation(targetLocation));

                // –¢–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                Bukkit.getScheduler().runTask(AIBotPlugin.getInstance(), () -> {
                    bot.getNPCEntity().teleport(bot.getNPCCurrentLocation().setDirection(
                        targetLocation.toVector().subtract(bot.getNPCCurrentLocation().toVector())));
                });
            }
        }

        if (targetLocation.getBlock().getType() == Material.AIR) {
            BotLogger.info("‚ö†Ô∏è " + bot.getId() + " –ë–æ—Ç –ø—ã—Ç–∞–µ—Ç—Å—è –ª–æ–º–∞—Ç—å –≤–æ–∑–¥—É—Ö! –ú–µ–Ω—è–µ–º —Ü–µ–ª—å...");
            targetLocation = null;
            return;
        }

        if (BotZoneManager.getInstance().isInProtectedZone(targetLocation)) {
            BotLogger.info("‚õî " + bot.getId() + " –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï –±—É–¥–µ—Ç —Ä–∞–∑—Ä—É—à–∞—Ç—å –±–ª–æ–∫: " + BotStringUtils.formatLocation(targetLocation));
            isDone = true;
            return;
        }

        int breakTime = BREAK_TIME_PER_BLOCK.getOrDefault(targetLocation.getBlock().getType(), 10);

        if (breakProgress < breakTime) {
            breakProgress += 1; // ‚ö° –£—Å–∫–æ—Ä—è–µ–º –≤ 1 —Ä–∞–∑
            bot.getNPCEntity().getWorld().playEffect(targetLocation, org.bukkit.Effect.STEP_SOUND, targetLocation.getBlock().getType());
            BotLogger.info("‚è≥ "+ bot.getId() + " –õ–æ–º–∞–µ—Ç " + targetLocation.getBlock().getType() + " [" + breakProgress + "/" + breakTime + "]");
            return;
        }

        Bukkit.getScheduler().runTask(AIBotPlugin.getInstance(), () -> {
            if (targetLocation != null && targetLocation.getBlock().getType() != Material.AIR) {
                targetLocation.getBlock().breakNaturally();
                BotLogger.info("‚úÖ –ë–ª–æ–∫ —Ä–∞–∑—Ä—É—à–µ–Ω –Ω–∞ " + BotStringUtils.formatLocation(targetLocation));

                // check inventory here

                //blocksMined++;
                breakProgress = 0;

                // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å–µ–¥–Ω–∏–µ –±–ª–æ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –¥–æ–±—ã—á–∏
                addAdjacentBlocksToQueue(targetLocation);

                bot.checkAndSelfMove(targetLocation);

                targetLocation = null;
            }
        });
    }

    private Location findNearestTargetBlock(Map<Location, Material> scannedBlocks) {
        Location botLocation = bot.getNPCCurrentLocation();
        Location closestBlock = null;
        double minDistance = Double.MAX_VALUE;

        for (Map.Entry<Location, Material> entry : scannedBlocks.entrySet()) {
            if (targetMaterials == null || targetMaterials.contains(entry.getValue())) {
                double distance = botLocation.distanceSquared(entry.getKey());
                if (distance < minDistance) {
                    minDistance = distance;
                    closestBlock = entry.getKey();
                }
            }
        }
        return closestBlock;
    }

    private void addAdjacentBlocksToQueue(Location baseLocation) {
        List<Location> neighbors = Arrays.asList(
            baseLocation.clone().add(1, 0, 0),
            baseLocation.clone().add(-1, 0, 0),
            baseLocation.clone().add(0, 0, 1),
            baseLocation.clone().add(0, 0, -1),
            baseLocation.clone().add(0, -1, 0) // –ë–ª–æ–∫–∏ —Å–Ω–∏–∑—É —Ç–æ–∂–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã
        );

        for (Location loc : neighbors) {
            if (targetMaterials == null || targetMaterials.contains(loc.getBlock().getType())) {
                pendingBlocks.add(loc);
                BotLogger.info("‚ûï –î–æ–±–∞–≤–∏–ª–∏ —Å–æ—Å–µ–¥–Ω–∏–π –±–ª–æ–∫ –≤ –æ—á–µ—Ä–µ–¥—å " + BotStringUtils.formatLocation(loc));
            }
        }
    }

}
