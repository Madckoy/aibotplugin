package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.logic.tasks.configs.BotTaskExploreConfig;
import com.devone.aibot.core.logic.tasks.configs.BotTaskHuntConfig;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.utils.BotStringUtils;

import org.bukkit.Location;
import org.bukkit.entity.*;

import java.util.List;

public class BotTaskHuntMobs extends BotTask {

    private int scanRadius;
    private boolean shouldFollowPlayer = false;

    private LivingEntity targetMob = null;

    public BotTaskHuntMobs(Bot bot) {
        super(bot, "üëÅÔ∏è");
        this.config = new BotTaskHuntConfig();

        this.scanRadius = ((BotTaskHuntConfig)this.config).getScanRadius();
        envMap = null;
    }

    @Override
    public void executeTask() {
        
        BotLogger.trace("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ö–æ—Ç—ã –¥–ª—è –±–æ—Ç–∞ " + bot.getId());
        
        setObjective("Looking for the hostile targets");

        // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
        if (getEnvMap() == null) {
            BotLogger.trace("üîç –ó–∞–ø—É—Å–∫–∞–µ–º 3D-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.");
            bot.addTaskToQueue(new BotTaskSonar3D(bot, this, scanRadius, scanRadius));
            isDone = false;
            return;
        }

        if (targetMob == null || targetMob.isDead()) {
            findTarget();
        }

        if (targetMob != null) {

            Location mobLocation = targetMob.getLocation(); // ‚úÖ –ë–µ—Ä—ë–º –ø–æ–∑–∏—Ü–∏—é —Ü–µ–ª–∏
            BotLogger.debug("üéØ –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ " + targetMob.getType() + " –Ω–∞ " + BotStringUtils.formatLocation(mobLocation));

            bot.addTaskToQueue(new BotTaskFollowTarget(bot, targetMob)); // ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã

            isDone = true;
            return;
        }

        if (getElapsedTime()>180000) {
            BotLogger.debug(" –£—Å—Ç–∞–ª, –æ—Ö–æ—Ç–∞ —É—Ç–æ–º–ª—è–µ—Ç.");
            isDone = true;
            return;
        }

        setEnvMap(null);
    }

    private void findTarget() {
        List<Entity> nearbyEntities = bot.getNPCEntity().getNearbyEntities(scanRadius, scanRadius, scanRadius);

        // –ò—â–µ–º –º–æ–±–æ–≤
        for (Entity entity : nearbyEntities) {
            if (entity instanceof Monster) {
                targetMob = (LivingEntity) entity;
                BotLogger.debug("üéØ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª—å: " + targetMob.getType());
                return;
            }
        }

        // –ï—Å–ª–∏ –º–æ–±–æ–≤ –Ω–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥–æ–≤–∞—Ç—å –∑–∞ –∏–≥—Ä–æ–∫–æ–º (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ)
        if (shouldFollowPlayer) {
            for (Entity entity : nearbyEntities) {
                if (entity instanceof Player) {
                    targetMob = (LivingEntity) entity;
                    BotLogger.debug("üéØ –ù–∞–π–¥–µ–Ω –∏–≥—Ä–æ–∫! –ù–∞—á–∏–Ω–∞–µ–º —Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.");
                    return;
                }
            }
        }

        BotLogger.debug("‚ùå –ù–∏ –æ–¥–Ω–æ–≥–æ –º–æ–±–∞ –∏–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.");
        isDone = true;
        return;
    }
}
