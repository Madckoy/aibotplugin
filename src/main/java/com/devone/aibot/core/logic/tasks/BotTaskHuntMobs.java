package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.BotInventory;
import com.devone.aibot.core.logic.tasks.configs.BotTaskExploreConfig;
import com.devone.aibot.core.logic.tasks.configs.BotTaskHuntConfig;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.AIBotPlugin;
import com.devone.aibot.utils.BotEnv3DScan;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.entity.*;

import java.util.Set;
import java.util.List;
import java.util.HashSet;

public class BotTaskHuntMobs extends BotTask {

    private LivingEntity targetMob = null;
    private double attackRange = 2.0; // –î–∞–ª—å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –≤ –±–ª–∏–∂–Ω–µ–º –±–æ—é
    private boolean shouldPickupLoot = true;
    private int searchRadius = 15; // –†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –º–æ–±–æ–≤
    private Set<EntityType> targetMobs = null; // –¶–µ–ª–µ–≤—ã–µ –º–æ–±—ã

    public BotTaskHuntMobs(Bot bot) {
        super(bot, "‚öîÔ∏è");
        config = new BotTaskHuntConfig();

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        if (config.isEnabled()) {
            searchRadius = ((BotTaskExploreConfig) config).getScanRadius();
            shouldPickupLoot = ((BotTaskHuntConfig) config).shouldPickupLoot();
            targetMobs = ((BotTaskHuntConfig) config).getTargetAgressiveMobs();
    }
    }

    @Override
    public BotTask configure(Object... params) {
        super.configure(params);
        
        if (params.length >= 1 && params[0] instanceof Set) {
            targetMobs = (Set<EntityType>) params[0];
            if (targetMobs.isEmpty()) targetMobs = null; // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–µ—Ç, –æ—Ö–æ—Ç–∏–º—Å—è –Ω–∞ –≤—Å–µ—Ö –º–æ–±–æ–≤
        }
        if (params.length >= 2 && params[1] instanceof Integer) {
            this.searchRadius = (Integer) params[1];
        }
        if (params.length >= 3 && params[2] instanceof Boolean) {
            this.shouldPickupLoot = (Boolean) params[2];
        }

        bot.setAutoPickupEnabled(shouldPickupLoot);
        BotLogger.debug("‚öôÔ∏è BotTaskHunt –Ω–∞—Å—Ç—Ä–æ–µ–Ω: " + (targetMobs == null ? "–í–°–ï –ú–û–ë–´" : targetMobs)); 
        return this;
    }

    @Override
    public void executeTask() {
        BotLogger.trace("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ –æ—Ö–æ—Ç—ã –¥–ª—è –±–æ—Ç–∞ " + bot.getId());

        if (isInventoryFull()) {
            BotLogger.trace("‚õî –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω, –æ—Ö–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.");
            isDone = true;
            return;
        }

        bot.pickupNearbyItems(shouldPickupLoot);

        // üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –º–µ—Å—Ç–Ω–æ—Å—Ç–∏
        if (getEnvMap() == null) {
            BotLogger.trace("üîç –ó–∞–ø—É—Å–∫–∞–µ–º 3D-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.");
            bot.addTaskToQueue(new BotTaskSonar3D(bot, this, searchRadius, 4));
            isDone = false;
            return;
        }

        if (targetMob == null || targetMob.isDead()) {
            findTargetMob();
        }

        if (targetMob != null) {
            moveToTargetMob();
            attackTargetMob();
        } else {
            BotLogger.trace("‚ùå –¶–µ–ª–µ–π –Ω–µ—Ç, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Ö–æ—Ç—É.");
            isDone = true;
        }
    }

    private void findTargetMob() {
        List<Entity> nearbyEntities = bot.getNPCEntity().getNearbyEntities(searchRadius, searchRadius, searchRadius);

        for (Entity entity : nearbyEntities) {
            if (entity instanceof Monster) { // –¢–æ–ª—å–∫–æ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –º–æ–±—ã
                if (targetMobs == null || targetMobs.contains(entity.getType())) { // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–µ–ª–µ–≤—ã–º –º–æ–±–∞–º
                    targetMob = (LivingEntity) entity;
                    BotLogger.debug("üéØ –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–ª—å: " + targetMob.getType());
                    break;
                }
            }
        }
    }

    private void moveToTargetMob() {
        if (targetMob == null) return;

        Location mobLocation = targetMob.getLocation();
        double distance = bot.getNPCCurrentLocation().distance(mobLocation);

        if (distance > attackRange) {
            Bot.navigateTo(bot, mobLocation);
            BotLogger.trace("üö∂ –î–≤–∏–≥–∞–µ–º—Å—è –∫ –º–æ–±—É: " + targetMob.getType());
        }
    }

    private void attackTargetMob() {
        if (targetMob == null) return;

        double distance = bot.getNPCCurrentLocation().distance(targetMob.getLocation());

        if (distance <= attackRange) {
            targetMob.damage(5); // –£—Ä–æ–Ω (–º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å)
            animateHand();
            BotLogger.debug("‚öîÔ∏è –ë–æ—Ç –∞—Ç–∞–∫–æ–≤–∞–ª " + targetMob.getType());
        }
    }

    private boolean isInventoryFull() {
        boolean full = !BotInventory.hasFreeInventorySpace(bot, null);
        return full;
    }

    private void animateHand() {
        if (bot.getNPCEntity() instanceof Player) {
            Player playerBot = (Player) bot.getNPCEntity();
            playerBot.swingMainHand();
        }
    }
}
