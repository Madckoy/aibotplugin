package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.logic.tasks.configs.BotTaskFollowConfig;
import com.devone.aibot.utils.BotLogger;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import java.util.Random;

public class BotTaskFollowTarget extends BotTask {

    private LivingEntity target;

    private static final BotTaskFollowConfig config = new BotTaskFollowConfig();
    private final double followDistance = config.getFollowDistance();
    private final double attackRange = config.getAttackRange();
    //private final long chatCooldown = config.getChatCooldown();
    //private final double insultChance = config.getInsultChance();

    private long lastChatTime = 0;
    private final Random random = new Random();

    public BotTaskFollowTarget(Bot bot, LivingEntity target) {
        super(bot, "üéØ");
        this.target = target;
        targetLocation = target.getLocation();
    }

    @Override
    public void executeTask() {
        if (target == null || target.isDead()) {
            BotLogger.debug("üíÄ –¶–µ–ª—å –∏—Å—á–µ–∑–ª–∞. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.");
            isDone = true;
            return;
        }

        setObjective("Chasing the target: " + target.getType());

        double distance = bot.getNPCCurrentLocation().distance(target.getLocation());

        if (target instanceof Player) {

            followPlayer((Player) target, distance);

        } else {

            followAndAttack(distance);
        }

        if (getElapsedTime()>60000) {
            BotLogger.debug("üíÄ –ù–µ –º–æ–≥—É –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Ü–µ–ª–∏. –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.");
            isDone = true;
            return;
        }
    }

    public LivingEntity getFollowingObject() {
        return this.target;
    }
    /**
     * –õ–æ–≥–∏–∫–∞ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∑–∞ –∏–≥—Ä–æ–∫–æ–º –±–µ–∑ –∞—Ç–∞–∫–∏.
     */
    private void followPlayer(Player player, double distance) {

        if (distance > followDistance) {
            Bot.navigateTo(bot, player.getLocation());
            BotLogger.debug("üèÉ –ë–æ—Ç —Å–ª–µ–¥—É–µ—Ç –∑–∞ –∏–≥—Ä–æ–∫–æ–º " + player.getName());
        }

        // –ò–Ω–æ–≥–¥–∞ –±–æ—Ç –º–æ–∂–µ—Ç —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –∏–≥—Ä–æ–∫—É
        if (System.currentTimeMillis() - lastChatTime > 10000) { // –†–∞–∑ –≤ 10 —Å–µ–∫—É–Ω–¥
            bot.addTaskToQueue(new BotTaskTalk(bot, player, BotTaskTalk.TalkType.COMPLIMENT));
            lastChatTime = System.currentTimeMillis();
        }
    }

    /**
     * –õ–æ–≥–∏–∫–∞ –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ –∞—Ç–∞–∫–∏ –º–æ–±–æ–≤.
     */
    private void followAndAttack(double distance) {
        if (distance > attackRange) {
            Bot.navigateTo(bot, target.getLocation());
            BotLogger.debug("üèÉ –ü—Ä–µ—Å–ª–µ–¥—É–µ–º " + target.getType() + " (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: " + distance + ")");
        } else {
            attackTarget();
        }
    }

    /**
     * –õ–æ–≥–∏–∫–∞ –∞—Ç–∞–∫–∏.
     */
    private void attackTarget() {
        if (target == null || target.isDead()) return;

        double distance = bot.getNPCCurrentLocation().distance(target.getLocation());

        if (distance <= attackRange) {
            target.damage(5);
            animateHand();
            BotLogger.debug("‚öîÔ∏è –ë–æ—Ç –∞—Ç–∞–∫—É–µ—Ç " + target.getType() + "!");

            // 30% —à–∞–Ω—Å –ø–æ—Ä—É–≥–∞—Ç—å—Å—è –Ω–∞ –º–æ–±–∞
            if (random.nextDouble() < 0.3) {
                bot.addTaskToQueue(new BotTaskTalk(bot, null, BotTaskTalk.TalkType.INSULT_MOB));
            }
        }
    }

    /**
     * –ê–Ω–∏–º–∞—Ü–∏—è –∞—Ç–∞–∫–∏.
     */
    private void animateHand() {
        if (bot.getNPCEntity() instanceof org.bukkit.entity.Player) {
            ((org.bukkit.entity.Player) bot.getNPCEntity()).swingMainHand();
        }
    }
}
