package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.AIBotPlugin;
import com.devone.aibot.utils.*;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import com.devone.aibot.core.Bot;

public class BotTaskMove implements BotTask {
    private final Bot bot;
    private Location targetLocation;
    private boolean isDone = false;
    private boolean isPaused = false;
    private final String name = "MOVE";

    private long startTime;
    private static final long TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥s

    private Location lastTargetLocation;

    public BotTaskMove(Bot bot) {
        this.bot = bot;
    }

    @Override
    public void configure(Object... params) {
        if (params.length == 1 && params[0] instanceof Location) {
            this.targetLocation = (Location) params[0];
            lastTargetLocation = null;
            startTime = System.currentTimeMillis(); // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            isDone = false;
            BotLogger.info(" ‚öôÔ∏è MoveTask is configured: " + BotStringUtils.formatLocation(targetLocation));
        } else {
            BotLogger.info("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MoveTask: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
        }
    }

    @Override
    public void update() {

        BotLogger.info("update(): "+bot.getId() + " Running task: " + name);

        if (Bukkit.getServer().isStopping()) {
            BotLogger.info("‚ö†Ô∏è " + bot.getId() + " –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è, –æ—Ç–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ BotMoveTask.");
            return;
        }

        if (isDone ||
                isPaused ||
                targetLocation == null

        )
            return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –±–æ—Ç —Ü–µ–ª–∏
        if (BotNavigationUtils.hasReachedTarget(bot, targetLocation, 2.0)) {

            BotLogger.info("üéâ" + bot.getId() + " Has reached the target: " + targetLocation);

            bot.resetTargetLocation();

            isDone = true;
            return;
        }

        Location currentLocation = bot.getNPCCurrentLocation();
        //
        // 3d scan
        BotScanEnv.scan3D(currentLocation, 5);
        //
        // pickup all items
        bot.pickupNearbyItems(true);
        //
        //
        BotLogger.info("üìç " + bot.getId() + " Current position is: " + BotStringUtils.formatLocation(currentLocation));
        BotLogger.info("üéØ " + bot.getId() + " Selected new target location: " + BotStringUtils.formatLocation(targetLocation));

        if (bot.getNPCNavigator().canNavigateTo(targetLocation)) {
            BotLogger.info("üìå " + bot.getId() + " Navigation point has accepted: " + BotStringUtils.formatLocation(targetLocation));
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            Bukkit.getScheduler().runTask(AIBotPlugin.getInstance(), () -> {
                bot.getNPCNavigator().setTarget(targetLocation);
            });

        } else {
            BotLogger.info("‚ö≤ " + bot.getId() + " Can't navigate from " +
                    BotStringUtils.formatLocation(currentLocation) + " to "
                    + BotStringUtils.formatLocation(targetLocation));

            isDone = handleStuck();

        }

    }

    @Override
    public boolean isDone() {
        return isDone;
    }

    @Override
    public void setPaused(boolean paused) {
        this.isPaused = paused;
        if (isPaused) {
            BotLogger.info("Í©ú " + bot.getId() + " Í©ú Pausing...");
        } else {
            BotLogger.info("‚ñ∂Ô∏è " + bot.getId() + " Í©ú Resuming...");
        }
    }

    @Override
    public String getName() {
        return name;
    }

    public Location getTargetLocation() {
        return targetLocation;
    }

    @Override
    public long getElapsedTime() {
        return System.currentTimeMillis() - startTime;
    }

    public boolean handleStuck() {
        boolean return_state = false;

        BotLogger.info("üîÑ " + bot.getId() + " –ó–∞—Å—Ç—Ä—è–ª! –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç...");

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–æ—á–∫—É
        Location newTarget = BotNavigationUtils.findNearestNavigableLocation(bot.getNPCCurrentLocation(), targetLocation, 30);
        try {
            if (newTarget != null) {
                targetLocation = newTarget;
                BotLogger.info("üéØ " + bot.getId() + " üõ† –ù–æ–≤–∞—è —Ü–µ–ª—å: " + BotStringUtils.formatLocation(targetLocation));

                if(bot.getNPCNavigator().canNavigateTo(targetLocation)) {
                    bot.getNPCNavigator().setTarget(targetLocation);
                } else {
                    BotLogger.info("‚ùå " + bot.getId() + " –ü—Ä–æ–±—É–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ "+ BotStringUtils.formatLocation(targetLocation));
                    bot.getNPCEntity().teleport(targetLocation);
                    BotLogger.info("‚ö° " + bot.getId() + " –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω?");
                }

                // return_state = true; // // stop doing the active task

            } else {
                //--- hack
                BotLogger.info("‚ùå " + bot.getId() + " –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç. –ü—Ä–æ–±—É–µ–º —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ "+ BotStringUtils.formatLocation(targetLocation));

                bot.getNPCEntity().teleport(targetLocation);

                BotLogger.info("‚ö° " + bot.getId() + " –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω?");
                //
                //return_state = false; // continue doing the active task
                //-------------
            }

        } catch (Exception ex) {
            BotLogger.error("‚ö† " + bot.getId() + ex.getMessage());
            return_state = true; // stop doing the active task
        }
        return return_state;
    }

}
