package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.utils.*;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.scheduler.BukkitTask;
import com.devone.aibot.AIBotPlugin;
import com.devone.aibot.core.Bot;
import com.devone.aibot.core.logic.tasks.configs.BotTaskMoveConfig;

public class BotTaskMove extends BotTask {

    private BukkitTask taskHandle;
    private static final BotTaskMoveConfig config = new BotTaskMoveConfig();
    private final float speedMultiplier = config.getSpeedMultiplier();

    private Location lastPosition; // üÜï –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ—à–ª—É—é –ø–æ–∑–∏—Ü–∏—é
    private long lastMoveTime; // üÜï –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è

    public BotTaskMove(Bot bot) {
        super(bot, "üèÉüèΩ‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è");
        this.lastPosition = bot.getNPCCurrentLocation();
        this.lastMoveTime = System.currentTimeMillis();
    }

    @Override
    public BotTask configure(Object... params) {
        super.configure(params);

        if (params.length == 1 && params[0] instanceof Location) {
            this.targetLocation = (Location) params[0];
        } else {
            BotLogger.error(bot.getId() + " ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è `BotTaskMove`!");
            isDone = true;
        }

        return this;
    }

    @Override
    public void executeTask() {
        if (taskHandle != null && !taskHandle.isCancelled()) {
            BotLogger.debug(bot.getId() + " ‚è≥ –¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∂–¥—É... [ID: " + uuid + "]");
        } else {
            if (isDone || isPaused) return;
        }

        if (targetLocation == null) {
            isDone = true;
            return;
        }

        if (bot.getNPCNavigator().isNavigating()) {
            return;
        }

        if (!bot.getNPCNavigator().canNavigateTo(getTargetLocation())) {
            BotLogger.trace(bot.getId() + " üõë Target Location is not reachable. Stopping here...[ID: " + uuid + "]");
            isDone = true;
            return;
        }

        String block_name = BotUtils.getBlockName(getTargetLocation().getBlock());
        setObjective("I can navigate, so I'm reaching the target... " + block_name);

        taskHandle = Bukkit.getScheduler().runTaskTimer(AIBotPlugin.getInstance(), () -> {
            if (isDone) {
                if (taskHandle != null) {
                    taskHandle.cancel();
                    BotLogger.debug(bot.getId() + " üõë Move task –∑–∞–≤–µ—Ä—à—ë–Ω, —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. [ID: " + uuid + "]");
                }
                return;
            }

            // üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–≤–∏–≥–∞–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∏–ª–∏ –∑–∞—Å—Ç—Ä—è–ª
            if (bot.getNPCCurrentLocation().distanceSquared(lastPosition) < 0.5) {
                // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ > 10 —Å–µ–∫ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Üí –±–æ—Ç –∑–∞—Å—Ç—Ä—è–ª
                if (System.currentTimeMillis() - lastMoveTime > 10_000) {
                    BotLogger.warn(bot.getId() + " ‚ö†Ô∏è –ë–æ—Ç –∑–∞—Å—Ç—Ä—è–ª! –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É—Ç—å...");
                    taskHandle.cancel();
                    isDone = true;
                    return;
                }
            } else {
                // –ï—Å–ª–∏ –±–æ—Ç —Å–¥–≤–∏–Ω—É–ª—Å—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                lastPosition = bot.getNPCCurrentLocation();
                lastMoveTime = System.currentTimeMillis();
            }

            if (BotNavigationUtils.hasReachedTargetFlex(bot.getNPCCurrentLocation(), targetLocation, 1.5, 1.5)) {
                bot.resetTargetLocation();
                isDone = true;
                BotLogger.debug(bot.getId() + " üéØ –î–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏! –†–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: " + bot.getNPCEntity().getLocation() + " [ID: " + uuid + "]");
                return;
            } else {
                if (!bot.getNPCNavigator().canNavigateTo(targetLocation)) {
                    BotLogger.trace(bot.getId() + " ‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—É—Ç—å, Stopping here..." + " [ID: " + uuid + "]");
                    taskHandle.cancel();
                    isDone = true;
                    return;
                } else {
                    if (bot.getNPCEntity() == null) {
                        BotLogger.trace(bot.getId() + " üëª –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å—É—â–Ω–æ—Å—Ç—å—é! –í –∑–∞–¥–∞—á–µ ID: " + uuid + "]");
                        taskHandle.cancel();
                        isDone = true;
                    } else {
                        BotLogger.trace(bot.getId() + " üö∂ –î–≤–∏–≥–∞—é—Å—å –≤ " + BotStringUtils.formatLocation(targetLocation) + " [ID: " + uuid + "]");

                        bot.getNPCNavigator().getDefaultParameters().speedModifier(speedMultiplier);

                        bot.getNPCCurrentLocation().setDirection(targetLocation.toVector().subtract(bot.getNPCCurrentLocation().toVector()));
                        bot.getNPCNavigator().setTarget(targetLocation);
                    }
                }
            }
        }, 0L, 40L);
    }
}
