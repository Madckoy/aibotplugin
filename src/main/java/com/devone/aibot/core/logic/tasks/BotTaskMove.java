package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.utils.*;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.scheduler.BukkitTask;
import com.devone.aibot.AIBotPlugin;
import com.devone.aibot.core.Bot;
import org.bukkit.Material;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class BotTaskMove extends BotTask {

    private Location targetLocation;
    private BukkitTask taskHandle; // üü¢ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–∞–π–º–µ—Ä, —á—Ç–æ–±—ã –µ–≥–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å

    public BotTaskMove(Bot bot) {
        super(bot, "MOVE");
    }

    @Override
    public void configure(Object... params) {
        super.configure(params);
        if (params.length == 1 && params[0] instanceof Location) {
            this.targetLocation = (Location) params[0];
        } else {
            BotLogger.error(bot.getId() + " ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è `BotTaskMove`!");
            isDone = true;
        }
    }

    @Override
    public void executeTask() {

        BotLogger.debug(bot.getId() + " üö¶ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–º–∞—Ñ–æ—Ä–æ–≤: "+ isDone + isPaused + BotStringUtils.formatLocation(targetLocation) + " [Task ID: " + taskId + "]");

        if (isDone || isPaused || targetLocation == null) { // ‚úÖ –§–∏–∫—Å —É—Å–ª–æ–≤–∏—è
            return;
        }
        if (taskHandle != null && !taskHandle.isCancelled()) {
            BotLogger.debug(bot.getId() + " ‚è≥ –¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∂–¥—É... [Task ID: " + taskId + "]");
            return;
        }

        // üü¢ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –≤ `taskHandle`
        taskHandle = Bukkit.getScheduler().runTaskTimer(AIBotPlugin.getInstance(), () -> {
            if (isDone) {
                if (taskHandle != null) {
                    taskHandle.cancel(); // ‚úÖ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                    BotLogger.debug(bot.getId() + " üõë Move task –∑–∞–≤–µ—Ä—à—ë–Ω, —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. [Task ID: " + taskId + "]");
                }
                return;
            }

            // 1. –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –¥–≤–∏–∂–µ—Ç—Å—è, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            if (bot.getNPCNavigator().isNavigating()) {
                return;
            }

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –±–æ—Ç —Ü–µ–ª–∏
            if (BotNavigation.hasReachedTarget(bot, targetLocation, 1.5)) {
                bot.resetTargetLocation();
                isDone = true; // ‚úÖ –¢–µ–ø–µ—Ä—å —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∑–∞–¥–∞—á—É!
                BotLogger.debug(bot.getId() + " üéØ –î–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏! –†–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: " + bot.getNPCEntity().getLocation() + " [Task ID: " + taskId + "]");
                return;
            }

            // 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤–æ–∫—Ä—É–≥
            Map<Location, Material> scannedBlocks = BotScanEnv.scan3D(bot.getNPCEntity().getLocation(), 10);
            List<Location> validPoints = scannedBlocks.entrySet().stream()
                .filter(entry -> BotNavigation.isSuitableForNavigation(entry.getKey(), entry.getValue()))
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());

            if (validPoints.isEmpty()) {
                BotLogger.debug(bot.getId() + " ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è! –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞..." + " [Task ID: " + taskId + "]");
                return;
            }

            // 4. –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É
            Location nextNavLoc = validPoints.stream()
                .min((loc1, loc2) -> Double.compare(loc1.distanceSquared(targetLocation), loc2.distanceSquared(targetLocation)))
                .orElse(targetLocation);

            // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç —Ç—É–¥–∞ –ø—Ä–æ–π—Ç–∏
            if (!bot.getNPCNavigator().canNavigateTo(nextNavLoc)) {
                BotLogger.debug(bot.getId() + " ‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—É—Ç—å, –ø—Ä–æ–±—É—é –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å..." + " [Task ID: " + taskId + "]");
                return;
            }

            // 6. –î–≤–∏–≥–∞–µ–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ
            bot.getNPCNavigator().setTarget(nextNavLoc);
            BotLogger.debug(bot.getId() + " üö∂ –î–≤–∏–≥–∞—é—Å—å –≤ " + BotStringUtils.formatLocation(nextNavLoc) + " [Task ID: " + taskId + "]");

        }, 0L, 20L); // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 20 —Ç–∏–∫–æ–≤ (1 —Å–µ–∫—É–Ω–¥–∞)
    }
}
