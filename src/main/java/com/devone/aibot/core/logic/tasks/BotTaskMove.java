package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.utils.*;
import org.bukkit.Bukkit;
import org.bukkit.Location;

import com.devone.aibot.AIBotPlugin;
import com.devone.aibot.core.Bot;
import org.bukkit.Material;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

public class BotTaskMove extends BotTask {

    private Location targetLocation;

    public BotTaskMove(Bot bot) {
        super(bot, "MOVE");
    }

    @Override
    public void configure(Object... params) {
        super.configure(params);
        if (params.length == 1 && params[0] instanceof Location) {
            this.targetLocation = (Location) params[0];
        } else {
            BotLogger.error(bot.getId() + " ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è `BotTaskMove`!");
            isDone = true; // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        }
    }

    @Override
    public void executeTask() {
        if (isDone || isPaused || targetLocation == null) {
            return;
        }

        Bukkit.getScheduler().runTaskTimer(AIBotPlugin.getInstance(), () -> {
            // 1. –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –¥–≤–∏–∂–µ—Ç—Å—è, –∂–¥—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–∏–∫–ª–∞
            if (bot.getNPCNavigator().isNavigating()) {
                return;
            }

            // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –±–æ—Ç —Ü–µ–ª–∏
            if (BotNavigation.hasReachedTarget(bot, targetLocation, 1.5)) {
                bot.resetTargetLocation();
                isDone = true;
                BotLogger.info(bot.getId() + " üéØ –î–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏!");
                return;
            }

            // 3. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ –≤–æ–∫—Ä—É–≥
            Map<Location, Material> scannedBlocks = BotScanEnv.scan3D(bot.getNPCEntity().getLocation(), 10);
            List<Location> validPoints = scannedBlocks.entrySet().stream()
                .filter(entry -> BotNavigation.isSuitableForNavigation(entry.getKey(), entry.getValue()))
                .map(Map.Entry::getKey)
                .collect(Collectors.toList());

            if (validPoints.isEmpty()) {
                BotLogger.warn(bot.getId() + " ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è! –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞...");
                return; // –û—Å—Ç–∞—ë–º—Å—è –≤ —Ü–∏–∫–ª–µ, –ø–æ–∫–∞ –º–∞—Ä—à—Ä—É—Ç –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è
            }

            // 4. –í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ—á–∫—É
            Location nextNavLoc = validPoints.stream()
                .min((loc1, loc2) -> Double.compare(loc1.distanceSquared(targetLocation), loc2.distanceSquared(targetLocation)))
                .orElse(targetLocation);

            // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ –±–æ—Ç —Ç—É–¥–∞ –ø—Ä–æ–π—Ç–∏
            if (!bot.getNPCNavigator().canNavigateTo(nextNavLoc)) {
                BotLogger.warn(bot.getId() + " ‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—É—Ç—å, –ø—Ä–æ–±—É—é –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å...");
                return;
            }

            // 6. –î–≤–∏–≥–∞–µ–º—Å—è –∫ —Å–ª–µ–¥—É—é—â–µ–π —Ç–æ—á–∫–µ
            bot.getNPCNavigator().setTarget(nextNavLoc);
            BotLogger.debug(bot.getId() + " üö∂ –î–≤–∏–≥–∞—é—Å—å –≤ " + BotStringUtils.formatLocation(nextNavLoc));

        }, 0L, 20L); // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞–∂–¥—ã–µ 20 —Ç–∏–∫–æ–≤ (1 —Å–µ–∫—É–Ω–¥–∞)
    }
}
