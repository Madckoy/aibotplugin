package com.devone.aibot.core.logic.tasks.destruction;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.BotInventory;
import com.devone.aibot.core.BotZoneManager;
import com.devone.aibot.core.logic.patterns.destruction.BotBreakInterpretedYamlPattern;
import com.devone.aibot.core.logic.patterns.destruction.IBotDestructionPattern;
import com.devone.aibot.core.logic.patterns.legacy.IBotBreakPattern;
import com.devone.aibot.core.logic.tasks.BotTask;
import com.devone.aibot.core.logic.tasks.BotTaskSonar3D;
import com.devone.aibot.core.logic.tasks.BotTaskUseHand;
import com.devone.aibot.core.logic.tasks.configs.BotTaskBreakBlockConfig;
import com.devone.aibot.utils.BotConstants;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.utils.BotStringUtils;
import com.devone.aibot.utils.BotUtils;
import org.bukkit.Location;
import org.bukkit.Material;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

public class BotTaskBreakBlock extends BotTask {

    private int maxBlocks;
    private int searchRadius = 10;
    private boolean shouldPickup = true;
    private boolean destroyAllIfNoTarget = false;
    private Set<Material> targetMaterials = null;
    private IBotDestructionPattern  breakPattern = null;

    public BotTaskBreakBlock(Bot bot) {
        super(bot, "‚õèÔ∏è");
        config = new BotTaskBreakBlockConfig();
    }

    @SuppressWarnings("unchecked")
    @Override
    public BotTask configure(Object... params) {
        super.configure(params);
        if (params.length >= 1 && params[0] instanceof Set) {
            targetMaterials = (Set<Material>) params[0];
            if (targetMaterials.isEmpty())
                targetMaterials = null;
        }
        if (params.length >= 2 && params[1] instanceof Integer) {
            this.maxBlocks = (Integer) params[1];
        }
        if (params.length >= 3 && params[2] instanceof Integer) {
            this.searchRadius = (Integer) params[2];
        }
        if (params.length >= 4 && params[3] instanceof Boolean) {
            this.shouldPickup = (Boolean) params[3];
        }
        if (params.length >= 5 && params[4] instanceof Boolean) {
            this.destroyAllIfNoTarget = (Boolean) params[4];
        }

        // YAML-–ø–∞—Ç—Ç–µ—Ä–Ω —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if (params.length >= 7 && params[6] instanceof String patternFile && patternFile.endsWith(".yml")) {
            Path path = Paths.get(BotConstants.PLUGIN_PATH_PATTERNS_BREAK, patternFile);
            this.breakPattern = new BotBreakInterpretedYamlPattern(path).configure(searchRadius);
            BotLogger.info("‚ÑπÔ∏è üìê –ó–∞–≥—Ä—É–∂–µ–Ω YAML-–ø–∞—Ç—Ç–µ—Ä–Ω: " + patternFile);
        }

        // –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω–æ ‚Äî fallback –Ω–∞ safe_cube.yml
        if (this.breakPattern == null) {
            Path fallbackPath = Paths.get(BotConstants.PLUGIN_PATH_PATTERNS_BREAK, "safe_cube.yml");
            this.breakPattern = new BotBreakInterpretedYamlPattern(fallbackPath).configure(searchRadius);
            BotLogger.info("‚ÑπÔ∏è üìê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π YAML-–ø–∞—Ç—Ç–µ—Ä–Ω: safe_cube.yml");
        }

        BotLogger.info("üìê –í—ã–±—Ä–∞–Ω –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è: " + breakPattern.getName());

        bot.setAutoPickupEnabled(shouldPickup);

        BotLogger.debug("‚öôÔ∏è BotTaskBreakBlock –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: " + (targetMaterials == null ? "–í–°–ï –ë–õ–û–ö–ò" : targetMaterials));
        return this;
    }

    public int getSearchRadius() {
        return searchRadius;
    }

    public void setTargetMaterials(Set<Material> materials) {
        this.targetMaterials = materials;
        BotLogger.trace("üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + materials);
    }

    public void setBreakPattern(IBotDestructionPattern  ptrn) {
        breakPattern = ptrn;
    }

    public Set<Material> getTargetMaterials() {
        BotLogger.trace("üìú –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + targetMaterials);
        return this.targetMaterials;
    }

    @Override
    public void executeTask() {

        BotLogger.trace("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ " + bot.getId() +
                " (–¶–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + (targetMaterials == null ? "–í–°–ï" : targetMaterials) + ")");

        if (breakPattern == null) {
            Path fallbackPath = Paths.get(BotConstants.PLUGIN_PATH_PATTERNS_BREAK, "safe_cube.yml");
            this.breakPattern = new BotBreakInterpretedYamlPattern(fallbackPath).configure(searchRadius);
            BotLogger.info("‚ÑπÔ∏è üìê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π YAML-–ø–∞—Ç—Ç–µ—Ä–Ω: safe_cube.yml");
        }

        if (isInventoryFull() || isEnoughBlocksCollected()) {
            BotLogger.trace("‚õî –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ");
            isDone = true;
            bot.getRuntimeStatus().setTargetLocation(null);
            return;
        }

        bot.pickupNearbyItems(shouldPickup);

        if (getGeoMap() == null) {
            BotLogger.trace("üîç –ó–∞–ø—É—Å–∫–∞–µ–º 3D-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.");
            BotTaskSonar3D scanTask = new BotTaskSonar3D(bot, this, searchRadius, searchRadius);
            scanTask.configure(scanMode);
            bot.addTaskToQueue(scanTask);
            isDone = false;
            return;
        }

        if (breakPattern.isFinished()) {
            BotLogger.trace("üèÅ –í—Å–µ –±–ª–æ–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É.");
            isDone = true;
            return;
        }

        Location targetLocation = breakPattern.findNextBlock(bot);

        bot.getRuntimeStatus().setTargetLocation(targetLocation);

        if (bot.getRuntimeStatus().getTargetLocation() != null) {

            setObjective("Probing the block: " + BotUtils.getBlockName(bot.getRuntimeStatus().getTargetLocation().getBlock()));

            if (isInProtectedZone(targetLocation)) {
                BotLogger.debug("‚õî " + bot.getId() + " –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï –±—É–¥–µ—Ç —Ä–∞–∑—Ä—É—à–∞—Ç—å –±–ª–æ–∫: " +
                        BotStringUtils.formatLocation(targetLocation));
                isDone = true;
                bot.getRuntimeStatus().setTargetLocation(null);
                return;
            }

            if (!BotUtils.isBreakableBlock(targetLocation)) {
                BotLogger.trace("‚õî –ù–µ—Ä–∞–∑—Ä—É—à–∞–µ–º—ã–π –±–ª–æ–∫: " + BotStringUtils.formatLocation(targetLocation));
                bot.getRuntimeStatus().setTargetLocation(null);
                return;
            }

            Material mat = targetLocation.getBlock().getType();

            if (BotUtils.requiresTool(mat)) {
                if (!BotInventory.equipRequiredTool(bot, mat)) {
                    BotLogger.trace("üôà –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Ä—É–∫—É. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                    bot.getRuntimeStatus().setTargetLocation(null);
                    return;
                }
            }

            setObjective("Breaking the block: " + BotUtils.getBlockName(targetLocation.getBlock()));

            // BotLogger.trace("üöß " + bot.getId() + " –†–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞: " + targetLocation.getBlock().toString());

            BotTaskUseHand handTask = new BotTaskUseHand(bot);
            handTask.configure(targetLocation);
            bot.addTaskToQueue(handTask);

        } else {

            setObjective("The block is not found. ");

            handleNoTargetFound();
        }
    }

    private void handleNoTargetFound() {
        bot.getRuntimeStatus().setTargetLocation(null);

        if (destroyAllIfNoTarget) {
            BotLogger.trace("üîÑ " + bot.getId() + " –¶–µ–ª–µ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –Ω–µ—Ç! –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ.");
            bot.addTaskToQueue(new BotTaskBreakBlockAny(bot));
            isDone = false;
        } else {
            setObjective("");
            BotLogger.trace("‚ùå " + bot.getId() + " –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–∫–æ–≤. –ó–∞–≤–µ—Ä—à–∞–µ–º.");
            isDone = true;
        }
    }

    private boolean isInventoryFull() {
        boolean full = !BotInventory.hasFreeInventorySpace(bot, targetMaterials);
        BotLogger.trace("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: " + (full ? "–ø–æ–ª–æ–Ω" : "–µ—Å—Ç—å –º–µ—Å—Ç–æ"));
        return full;
    }

    private boolean isEnoughBlocksCollected() {
        boolean enough = BotInventory.hasEnoughBlocks(bot, targetMaterials, maxBlocks);
        BotLogger.trace("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤: " + (enough ? "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" : "–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ"));
        return enough;
    }

    private boolean isInProtectedZone(Location location) {
        boolean protectedZone = BotZoneManager.getInstance().isInProtectedZone(location);
        if (protectedZone) {
            BotLogger.trace("üõë –ë–ª–æ–∫ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.");
        }
        return protectedZone;
    }
}
