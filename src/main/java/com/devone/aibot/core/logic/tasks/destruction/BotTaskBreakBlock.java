package com.devone.aibot.core.logic.tasks.destruction;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.BotInventory;
import com.devone.aibot.core.BotZoneManager;
import com.devone.aibot.core.logic.patterns.destruction.BotAnunakSolidPyramidPattern;
import com.devone.aibot.core.logic.patterns.destruction.BotBreakDefaultPattern;
import com.devone.aibot.core.logic.patterns.destruction.BotBreakInversePyramidPattern;
import com.devone.aibot.core.logic.patterns.destruction.BotBreakRegularHollowPyramidPattern;
import com.devone.aibot.core.logic.patterns.destruction.BotBreakSpiral3DPatternDown;
import com.devone.aibot.core.logic.patterns.destruction.IBotBreakPattern;
import com.devone.aibot.core.logic.tasks.BotTask;
import com.devone.aibot.core.logic.tasks.BotTaskSonar3D;
import com.devone.aibot.core.logic.tasks.BotTaskUseHand;
import com.devone.aibot.core.logic.tasks.configs.BotTaskBreakBlockConfig;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.utils.BotStringUtils;
import com.devone.aibot.utils.BotUtils;
import com.devone.aibot.utils.BotGeo3DScan.ScanMode;

import org.bukkit.Location;
import org.bukkit.Material;

import java.util.*;

public class BotTaskBreakBlock extends BotTask {

    private int maxBlocks;
    private int searchRadius;
    private boolean shouldPickup = true;
    private boolean destroyAllIfNoTarget = false;
    private Set<Material> targetMaterials = null;
    private IBotBreakPattern breakPattern = null;

    public BotTaskBreakBlock(Bot bot) {
        super(bot, "‚õèÔ∏è");
        config = new BotTaskBreakBlockConfig();
    }

    @SuppressWarnings("unchecked")
    @Override
    public BotTask configure(Object... params) {
        super.configure(params);
        if (params.length >= 1 && params[0] instanceof Set) {
            targetMaterials = (Set<Material>) params[0];
            if (targetMaterials.isEmpty()) targetMaterials = null;
        }
        if (params.length >= 2 && params[1] instanceof Integer) {
            this.maxBlocks = (Integer) params[1];
        }
        if (params.length >= 3 && params[2] instanceof Integer) {
            this.searchRadius = (Integer) params[2];
        }
        if (params.length >= 4 && params[3] instanceof Boolean) {
            this.shouldPickup = (Boolean) params[3];
        }
        if (params.length >= 5 && params[4] instanceof Boolean) {
            this.destroyAllIfNoTarget = (Boolean) params[4];
        }

        if (params.length >= 6 && params[5] instanceof IBotBreakPattern) {
            this.breakPattern = (IBotBreakPattern) params[5];
        }
        // this.breakPattern = new BotBreakSpiral3DPatternDown(patternRadius);
        // this.breakPattern = new BotBreakLayeredCubePattern(patternRadius);        
        // this.breakPattern = new BotBreakInversePyramidPattern(this.searchRadius); // TESTED OK
        // this.breakPattern = new BotBreakRegularHollowPyramidPattern(this.searchRadius); // TESTED OK
        // this.breakPattern = new BotAnunakSolidPyramidPattern(this.searchRadius); //TESTD OK

        bot.setAutoPickupEnabled(shouldPickup);

        BotLogger.debug("‚öôÔ∏è BotTaskBreakBlock –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞: " + (targetMaterials == null ? "–í–°–ï –ë–õ–û–ö–ò" : targetMaterials));
        return this;
    }

    public void setTargetMaterials(Set<Material> materials) {
        this.targetMaterials = materials;
        BotLogger.trace("üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + materials);
    }

    public void setBreakPattern(IBotBreakPattern ptrn) {
        breakPattern = ptrn;
    }

    public Set<Material> getTargetMaterials() {
        BotLogger.trace("üìú –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + targetMaterials);
        return this.targetMaterials;
    }

    @Override
    public void executeTask() {
        BotLogger.trace("üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ " + bot.getId() + " (–¶–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + (targetMaterials == null ? "–í–°–ï" : targetMaterials) + ")");

        if (this.breakPattern == null) {
            this.breakPattern = new BotBreakDefaultPattern();
            this.breakPattern.configure(searchRadius);
        }
        this.breakPattern.configure(searchRadius);

        if (isInventoryFull() || isEnoughBlocksCollected()) {
            BotLogger.trace("‚õî –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ");
            isDone = true;
            bot.getRuntimeStatus().setTargetLocation(null);
            return;
        }

        bot.pickupNearbyItems(shouldPickup);

        if (getGeoMap() == null) {
            BotLogger.trace("üîç –ó–∞–ø—É—Å–∫–∞–µ–º 3D-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.");
            BotTaskSonar3D scan_task = new BotTaskSonar3D(bot, this, searchRadius, searchRadius);
            scan_task.configure(scanMode);
            bot.addTaskToQueue(scan_task);
            isDone = false;
            return;
        }

        if(breakPattern.isFinished()) {
            BotLogger.trace("üèÅ –í—Å–µ –±–ª–æ–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É.");
            isDone = true;
            return;
        }

        Location targetLocation = breakPattern.findNextBlock(bot, getGeoMap());

        bot.getRuntimeStatus().setTargetLocation(targetLocation);

        if (targetLocation != null) {

            if (isInProtectedZone(targetLocation)) {
                BotLogger.debug("‚õî " + bot.getId() + " –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï –±—É–¥–µ—Ç —Ä–∞–∑—Ä—É—à–∞—Ç—å –±–ª–æ–∫: " + BotStringUtils.formatLocation(targetLocation));
                isDone = true;
                bot.getRuntimeStatus().setTargetLocation(null);
                return;
            }

            BotLogger.trace("üõ†Ô∏è –¶–µ–ª–µ–≤–æ–π –±–ª–æ–∫ –Ω–∞–π–¥–µ–Ω: " + BotStringUtils.formatLocation(targetLocation));

            // –ü—Ä–æ–≤–µ—Ä–∏–º, –º–æ–∂–Ω–æ –ª–∏ —Ä–∞–∑—Ä—É—à–∏—Ç—å –≤ –ø—Ä–∏–Ω—Ü–∏–ø–µ

            if (!BotUtils.isBreakableBlock(targetLocation)) {
                BotLogger.trace("‚õî –ù–µ—Ä–∞–∑—Ä—É—à–∞–µ–º—ã–π –±–ª–æ–∫: " + BotStringUtils.formatLocation(targetLocation));
                bot.getRuntimeStatus().setTargetLocation(null);
                return;
            }
            
            Material mat = bot.getRuntimeStatus().getTargetLocation().getBlock().getType();

            if(BotUtils.requiresTool(mat)) {

                // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –æ–Ω —É —É –±–æ—Ç–∞ –≤ —Ä—É–∫–µ, –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –±–ª–æ–∫
                if (!BotInventory.equipRequiredTool(bot, mat)) {
                    BotLogger.trace("üôà –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Ä—É–∫—É. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                    bot.getRuntimeStatus().setTargetLocation(null);
                    return;
                }

            }

            setObjective("–†–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞: " + BotUtils.getBlockName(targetLocation.getBlock()));
            BotLogger.trace("üöß " + bot.getId() + " –†–∞–∑—Ä—É—à–µ–Ω–∏–µ –±–ª–æ–∫–∞: " + targetLocation.getBlock().toString());

            BotTaskUseHand hand_task = new BotTaskUseHand(bot);
            hand_task.configure(targetLocation);
            bot.addTaskToQueue(hand_task);

        } else {
            handleNoTargetFound();
        }
    }

    private void handleNoTargetFound() {
        bot.getRuntimeStatus().setTargetLocation(null);

        if (destroyAllIfNoTarget) {
            BotLogger.trace("üîÑ " + bot.getId() + " –¶–µ–ª–µ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –Ω–µ—Ç! –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ.");
            bot.addTaskToQueue(new BotTaskBreakBlockAny(bot));
            isDone = false;
        } else {
            setObjective("");
            BotLogger.trace("‚ùå " + bot.getId() + " –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–∫–æ–≤. –ó–∞–≤–µ—Ä—à–∞–µ–º.");
            isDone = true;
        }
    }

    private boolean isInventoryFull() {
        boolean full = !BotInventory.hasFreeInventorySpace(bot, targetMaterials);
        BotLogger.trace("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: " + (full ? "–ø–æ–ª–æ–Ω" : "–µ—Å—Ç—å –º–µ—Å—Ç–æ"));
        return full;
    }

    private boolean isEnoughBlocksCollected() {
        boolean enough = BotInventory.hasEnoughBlocks(bot, targetMaterials, maxBlocks);
        BotLogger.trace("üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤: " + (enough ? "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" : "–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ"));
        return enough;
    }

    private boolean isInProtectedZone(Location location) {
        boolean protectedZone = BotZoneManager.getInstance().isInProtectedZone(location);
        if (protectedZone) {
            BotLogger.trace("üõë –ë–ª–æ–∫ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.");
        }
        return protectedZone;
    }
}
