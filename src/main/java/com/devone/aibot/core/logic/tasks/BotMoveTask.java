package com.devone.aibot.core.logic.tasks;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import com.devone.aibot.core.Bot;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.utils.BotUtils;
import com.devone.aibot.utils.BlockScanner3D;

public class BotMoveTask implements BotTask {
    private final Bot bot;
    private Location targetLocation;
    private boolean isDone = false;
    private boolean isPaused = false;
    private String name = "MOVE";

    private long startTime;
    private static final long TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥s

    private Location lastTargetLocation;

    public BotMoveTask(Bot bot) {
        this.bot = bot;
    }

    @Override
    public void configure(Object... params) {
        if (params.length == 1 && params[0] instanceof Location) {
            this.targetLocation = (Location) params[0];
            lastTargetLocation = null;
            startTime = System.currentTimeMillis(); // ‚úÖ –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
            isDone = false;
            BotLogger.debug(" ‚öôÔ∏è MoveTask is configured: " + BotUtils.formatLocation(targetLocation));
        } else {
            BotLogger.debug("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MoveTask: –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã");
        }
    }

    @Override
    public void update() {

        if (Bukkit.getServer().isStopping()) {
            BotLogger.info(bot.getId() + " ‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è, –æ—Ç–º–µ–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ BotMoveTask.");
            return;
        }
        

        BotLogger.info("BotMoveTask:update()");

        if (isDone || 
            isPaused || 
            targetLocation == null

            ) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥ –ª–∏ –±–æ—Ç —Ü–µ–ª–∏
        if (BotUtils.hasReachedTarget(bot.getNPCCurrentLocation(), targetLocation, 2.0)) {

            BotLogger.info(bot.getId() + " üéâ Has reached the target: "+targetLocation);

            bot.resetTargetLocation();

            isDone = true;
            return;
        }

        Location currentLocation = bot.getNPCCurrentLocation();
        //
        // 3d scan
        BlockScanner3D.scanSurroundings(currentLocation, 4);
        //
        // pickup all items
        bot.pickupNearbyItems();
        //
        //
        BotLogger.debug(bot.getId() + " üìç Current position is: " + BotUtils.formatLocation(currentLocation));
        BotLogger.debug(bot.getId() + " üéØ Target location is: " + BotUtils.formatLocation(targetLocation));

        if(bot.getNPCNavigator().canNavigateTo(targetLocation)) {
            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            Bukkit.getScheduler().runTask(Bukkit.getPluginManager().getPlugin("AIBotPlugin"), () -> {
                // –õ–æ–≥–∏–∫–∞ –¥–≤–∏–∂–µ–Ω–∏—è
                BotLogger.info(bot.getId() + " Moving to " + BotUtils.formatLocation(targetLocation));

                bot.getNPCNavigator().setTarget(targetLocation);

                BotLogger.info(bot.getId()+" üìå Navigation point has accepted: " + BotUtils.formatLocation(targetLocation));
            });
        } else {
            BotLogger.info(bot.getId() + " ‚ö≤ Can't navigate from "+BotUtils.formatLocation(currentLocation)+" to " + BotUtils.formatLocation(targetLocation));

            bot.resetTargetLocation();
            isDone = true;
        }

    }

    @Override
    public boolean isDone() {
        return isDone;
    }

    @Override
    public void setPaused(boolean paused) {
        this.isPaused = paused;
        BotLogger.debug(bot.getId() + (paused ? " Í©ú Waiting" : " ‚ñ∂Ô∏è Resuming"));
    }

    @Override
    public String getName() {
        return name;
    }

    public Location getTargetLocation() {
        return targetLocation;
    }

    @Override
    public long getElapsedTime() {
        return System.currentTimeMillis() - startTime;
    }

    public void handleStuck() {
        BotLogger.info(bot.getId() + " üîÑ –ë–æ—Ç –∑–∞—Å—Ç—Ä—è–ª! –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç...");
    
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–æ—á–∫—É
        Location newTarget = BotUtils.findNearestNavigableLocation(bot.getNPCCurrentLocation(), targetLocation, 5);
        
        if (newTarget != null) {
            targetLocation = newTarget;
            BotLogger.info(bot.getId() + " üõ† –ù–æ–≤–∞—è —Ü–µ–ª—å: " + BotUtils.formatLocation(targetLocation));
            bot.getNPCNavigator().setTarget(targetLocation);
        } else {
            BotLogger.error(bot.getId() + " ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–∞—Ä—à—Ä—É—Ç. –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º...");
            bot.getNPCEntity().teleport(targetLocation);


        }
    }

}
