package com.devone.aibot.core.logic.tasks;

import com.devone.aibot.core.logic.tasks.configs.BotTaskHuntConfig;
import com.devone.aibot.core.logic.tasks.configs.BotTaskIdleConfig;
import com.devone.aibot.core.logic.tasks.destruction.BotTaskBreakBlockAnyDownward;

import java.util.Set;

import com.devone.aibot.utils.BotStringUtils;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.entity.EntityType;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.BotInventory;
import com.devone.aibot.utils.BotLogger;

public class BotTaskIdle extends BotTask {

    public BotTaskIdle(Bot bot) {
        super(bot, "üîÄ");
        this.bot = bot;
        config = new BotTaskIdleConfig();
        setObjective("Having the rest");
    }

    @Override
    public void executeTask() {
  
        double rand = Math.random();

        Set<Material> dirtTypes = Set.of(
                Material.DIRT,
                Material.GRASS_BLOCK,
                Material.PODZOL,
                Material.MYCELIUM,
                Material.COARSE_DIRT,
                Material.ROOTED_DIRT
        );

        int maxToCollect = 128;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if (!BotInventory.hasFreeInventorySpace(bot, dirtTypes) || BotInventory.hasEnoughBlocks(bot, dirtTypes, maxToCollect)) {
            bot.setAutoPickupEnabled(false);

            BotTaskDropAll drop_task = new BotTaskDropAll(bot, null);
            drop_task.setPaused(true);
            bot.addTaskToQueue(drop_task);
            
            Location drop_off_loc = bot.getRuntimeStatus().getTargetLocation();
            
            // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ —Ç–æ—á–∫–µ —Å–±—Ä–æ—Å–∞
            BotTaskMove moveTask = new BotTaskMove(bot);
            moveTask.configure(drop_off_loc);
            bot.addTaskToQueue(moveTask);

            BotLogger.debug("üì¶ " + bot.getId() + " –ò–¥—ë—Ç –∫ —Ç–æ—á–∫–µ —Å–±—Ä–æ—Å–∞: " + BotStringUtils.formatLocation(drop_off_loc));
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–µ–Ω—å –∏–ª–∏ –Ω–æ—á—å
        World world = bot.getNPCEntity().getWorld();
        long time = world.getTime();
        boolean isNight = (time >= 13000 && time <= 23000); // –ü—Ä–∏–º–µ—Ä–Ω–æ 13000 - –∑–∞–∫–∞—Ç, 23000 - —Ä–∞—Å—Å–≤–µ—Ç

        double huntChance = isNight ? 0.9 : 0.2; // 90% –Ω–æ—á—å—é, 20% –¥–Ω–µ–º

        if (rand < 0.1) { // 10% —à–∞–Ω—Å —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–æ –æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä
            BotLogger.debug("ü§ñ " + bot.getId() + " –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É.");
            bot.addTaskToQueue(new BotTaskTalk(bot, null, BotTaskTalk.TalkType.ENVIRONMENT_COMMENT));
            return;
        }


        if (rand < huntChance) {
            // ‚öîÔ∏è –û—Ö–æ—Ç–∞
            BotLogger.debug("‚öîÔ∏è " + bot.getId() + " –°–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –æ—Ö–æ—Ç—É! (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: " + huntChance * 100 + "%)");
           
            BotTaskHuntMobs hunt_task = new BotTaskHuntMobs(bot);
            //BotTaskHuntMobs config  = hunt_task.getConfig();
            Set<EntityType> a_targets = ((BotTaskHuntConfig) hunt_task.getConfig()).getTargetAggressiveMobs();
            Set<EntityType> p_targets = ((BotTaskHuntConfig) hunt_task.getConfig()).getTargetPassiveMobs();
            Set<EntityType> targets = isNight ? a_targets : p_targets;
            
            hunt_task.configure(targets, 20, true);
            bot.addTaskToQueue(hunt_task);
            BotLogger.debug("‚öîÔ∏è " + bot.getId() + " –ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ö–æ—Ç—É –Ω–∞ " + (isNight ? "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –º–æ–±–æ–≤" : "–∂–∏–≤–æ—Ç–Ω—ã—Ö") + "!");

            return;
        }

        if (rand >= 0.8) {
            // üìå –ù–∞—á–∞—Ç—å –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (20% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            BotLogger.debug("üåê " + bot.getId() + " –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.");
            BotTaskExplore patrolTask = new BotTaskExplore(bot);
            bot.addTaskToQueue(patrolTask);
            return;
        }

        /* 
        if (rand < 0.8 && rand >= 0.5) {
            // ‚õè 30% —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É –∑–µ–º–ª–∏
            BotTaskBreakBlock breakTask = new BotTaskBreakBlock(bot);
        
            if (breakTask.isEnabled) {
                breakTask.configure(dirtTypes, maxToCollect, 10, true);
                bot.addTaskToQueue(breakTask);
            }
        
            return;
        }
            */

        if (rand < 0.8 && rand >= 0.2) {  
            // ‚õè 30% —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É –≤—Å–µ–≥–æ –ø–æ–¥—Ä—è–¥ –≤–Ω–∏–∑
            BotTaskBreakBlockAnyDownward breakAnyTask = new BotTaskBreakBlockAnyDownward(bot);
        
            if (breakAnyTask.isEnabled) {
                breakAnyTask.configure(null, maxToCollect, 10, true);
                bot.addTaskToQueue(breakAnyTask);
            }    
        
            return;
        }

        if (rand < 0.2) {
            // üí§ 20% —à–∞–Ω—Å –æ—Å—Ç–∞—Ç—å—Å—è –≤ IDLE
            BotLogger.debug("üîÄ" + bot.getId() + " –æ—Å—Ç–∞—ë—Ç—Å—è –≤ IDLE.");
            return;
        }
    }
}
