package com.devone.aibot.core;

import net.citizensnpcs.api.CitizensAPI;
import net.citizensnpcs.api.npc.NPC;
import org.bukkit.Bukkit;
import com.devone.aibot.AIBotPlugin;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.utils.bluemap.BlueMapMarkers;

import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.configuration.file.YamlConfiguration;
import org.bukkit.entity.Entity;
import org.bukkit.Location;
import java.io.File;
import java.io.IOException;
import java.util.*;

public class BotManager {

    private final AIBotPlugin plugin;
    private final Map<String, Bot> botsMap = new HashMap<>();
    private final Map<UUID, Bot> selectedBots = new HashMap<>();

    private BlueMapMarkers bm_markers;
    
    public BotManager(AIBotPlugin plugin) {
        this.plugin = plugin;

        // ‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã–∑—ã–≤–∞–µ–º `loadExistingBots()` –Ω–∞–ø—Ä—è–º—É—é –≤ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–º `runTaskLater`
        Bukkit.getScheduler().runTaskLater(plugin, () -> {
            BotLogger.debug("–ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–æ–≤...");

            loadExistingBots(); // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –±–æ—Ç–æ–≤ –∏–∑ CitizensAPI –∏ `bots.yml`

            BotLogger.debug("‚úÖ –í—Å–µ –±–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã.");
            
        }, 600L);
    }

    public Bot getBot(String name) {
        return botsMap.get(name);
    }

    public void addBot(String name, Bot bot) {
        botsMap.put(name, bot);
        saveBots(); // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    }

    public void removeBot(String name) {
        Bot bot = getBot(name);
        if (bot != null) {

            bot.despawnNPC();  // –î–µ—Å–ø–∞–≤–Ω –∏ –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–µ–∫–∞ –∑–∞–¥–∞—á –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ —Å–∞–º–æ–≥–æ –±–æ—Ç–∞

            BotLogger.info("‚ûñ" + name + " –±—ã–ª —É–¥–∞–ª—ë–Ω.");

            saveBots(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –±–æ—Ç–∞

            // update Map Markers
            botsMap.remove(name); // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –º–∞—Ä–∫–µ—Ä–æ–∞
            // refresh map markers
            bm_markers.updateAllMarkers();
        }
    }

    public boolean botExists(String name) {
        return botsMap.containsKey(name);
    }

    public Collection<Bot> getAllBots() {
        return botsMap.values();
    }

    private void loadExistingBots() {
        BotLogger.info("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö NPC –±–æ—Ç–æ–≤...");

        File file = new File(plugin.getDataFolder(), "bots.yml");
        FileConfiguration config = YamlConfiguration.loadConfiguration(file);

        for (NPC npc : CitizensAPI.getNPCRegistry()) {
            if (npc == null || !npc.getName().startsWith("AI_"))
                continue;

            String botName = npc.getName();
            // UUID npcUUID = npc.getUniqueId();

            if (botExists(botName))
                continue;

            // Set defaults
            Location storedLocation = Bot.getFallbackLocation();

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            if (config.contains("bots." + botName)) {
                String path = "bots." + botName;

                int x = config.getInt(path + ".x", storedLocation.getBlockX());
                int y = config.getInt(path + ".y", storedLocation.getBlockY());
                int z = config.getInt(path + ".z", storedLocation.getBlockZ());

                storedLocation = new Location(Bukkit.getWorlds().get(0), x, y, z);
            }
            BotLogger.info("‚ôªÔ∏è " + botName + " Has been loaded.");

            if (!npc.isSpawned()) {
                npc.spawn(storedLocation);
                BotLogger.info("‚úÖ " + botName + " NPC has been spawned.");

                Bot bot = new Bot(botName, npc, this);
                botsMap.put(botName, bot);
            }
        }

        BotLogger.debug("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ NPC –±–æ—Ç–æ–≤: " + botsMap.size());

        // ‚úÖ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã
        BotLogger.debug("‚úÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É: " );

         bm_markers= new BlueMapMarkers(this);
         bm_markers.scheduleMarkerUpdate();

    }

    public void saveBots() {

        File file = new File(plugin.getDataFolder(), "bots.yml");
        FileConfiguration config = new YamlConfiguration();

        for (Bot bot : botsMap.values()) {
            String path = "bots." + bot.getId();
            config.set(path + ".uuid", bot.getUuid().toString());

            Location loc = bot.getNPCCurrentLocation();

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤ bots.yml
            config.set("bots." + bot.getId() + ".x", loc.getBlockX());
            config.set("bots." + bot.getId() + ".y", loc.getBlockY());
            config.set("bots." + bot.getId() + ".z", loc.getBlockZ());

        }

        try {
            config.save(file);

            BotLogger.info("‚úÖ –ë–æ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ bots.yml.");

        } catch (IOException e) {
            BotLogger.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è bots.yml: " + e.getMessage());
        }
    }

    public void removeAllBots() {
        for (String botId : new ArrayList<>(botsMap.keySet())) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º keySet(), —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã

            removeBot(botId); // –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥ —É–¥–∞–ª–µ–Ω–∏—è
        }
        BotLogger.info("‚úÖ –í—Å–µ –±–æ—Ç—ã —É–¥–∞–ª–µ–Ω—ã.");
    }

    public void selectBot(UUID playerUUID, Bot bot) {
        selectedBots.put(playerUUID, bot);
    }

    public boolean unselectBot(UUID playerUUID) {
        if (!selectedBots.containsKey(playerUUID)) {
            return false; // –ë–æ—Ç –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω
        }
    
        selectedBots.remove(playerUUID);
        return true; // –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω
    }

    public Bot getOrSelectBot(UUID playerId) {
        Bot bot = getSelectedBot(playerId);

        // ‚úÖ –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, –Ω–æ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω, –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ
        if (bot == null && botsMap.size() == 1) {
            bot = botsMap.values().iterator().next();
            selectBot(playerId, bot);
        }

        return bot;
    }

    public Bot getSelectedBot(UUID playerUUID) {
        return selectedBots.get(playerUUID);
    }

    public AIBotPlugin getPlugin(){
        return plugin;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ Entity –±–æ—Ç–æ–º (–ø–µ—Ä–µ–±–æ—Ä–æ–º –±–æ—Ç–æ–≤)
     */
    public boolean isBot(Entity entity) {
        return botsMap.values().stream()
            .filter(bot -> bot.getNPCEntity() != null) // ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º null-–∑–Ω–∞—á–µ–Ω–∏—è
            .anyMatch(bot -> bot.getNPCEntity().getUniqueId().equals(entity.getUniqueId()));
    }
}
