package com.devone.aibot.core;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Item;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;

import com.devone.aibot.utils.BotLogger;

public class BotInventory {

    private final Bot bot;
    public BotInventory(Bot bot) {
        this.bot = bot;
        getNPCInventory();
    }

    public Inventory getNPCInventory() {
        if (this.bot.getNPCEntity() instanceof InventoryHolder) {
            return ((InventoryHolder) this.bot.getNPCEntity()).getInventory();
        }
        return null; // NPC –Ω–µ –∏–º–µ–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    }
    
    public int getAmount(Material material) {
        Inventory inv = getNPCInventory();
        if (inv == null) return 0; // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0

        int total = 0;
        for (ItemStack item : inv.getContents()) {
            if (item != null && item.getType() == material) {
                total += item.getAmount();
            }
        }
        return total;
    }    

    public void addItem(Material material, int amount) {
        Inventory inv = getNPCInventory();
        if (inv == null) return; // –ù–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è - –≤—ã—Ö–æ–¥–∏–º
    
        inv.addItem(new ItemStack(material, amount));
    }
    
    public boolean removeItem(Material material, int amount) {
        Inventory inv = getNPCInventory();
        if (inv == null) return false; // –ù–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è - –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å
    
        for (ItemStack item : inv.getContents()) {
            if (item != null && item.getType() == material) {
                int itemAmount = item.getAmount();
                if (itemAmount > amount) {
                    item.setAmount(itemAmount - amount);
                    return true;
                } else {
                    inv.remove(item);
                    amount -= itemAmount;
                    if (amount <= 0) return true;
                }
            }
        }
        return false;
    }

           
    public void pickupAll(Boolean shouldPickup, Boolean autoPickupEnabled) {

        logInventory();

        if (!shouldPickup || !autoPickupEnabled || !bot.isNPCSpawned() || bot.getNPC() == null) {
            BotLogger.debug("üõí " + bot.getId()+" –ù–µ –±—É–¥–µ—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª! –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞: " + shouldPickup + " | " + autoPickupEnabled );
            return;
        }

        BotLogger.debug("üõí " + bot.getId()+" –ë—É–¥–µ—Ç –ø–æ–¥–æ–±–∏—Ä–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª! –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞: " + shouldPickup + " | " + autoPickupEnabled );

        //BotScanEnv.logScanNatural(bot, 20.0);

        if(autoPickupEnabled) {
            pullAllItemsinRadius(2.0);
        }

        Location botLocation = bot.getNPCCurrentLocation();
        List<Entity> nearbyEntities = botLocation.getWorld().getEntities();
        for (Entity entity : nearbyEntities) {
            if (entity instanceof Item) {
                Item item = (Item) entity;
                if (botLocation.distance(item.getLocation()) < 2.0) {
                    Material material = item.getItemStack().getType();
                    int amount = item.getItemStack().getAmount();
                    
                    addItem(material, amount); // –ü–µ—Ä–µ–¥–∞—ë–º –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                    
                    item.remove(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –∑–µ–º–ª–∏
                    BotLogger.debug("üõí " + bot.getId() +  " –ü–æ–¥–æ–±—Ä–∞–ª " + amount + " x " + material);
                }
            }
        }
    }
    
    public static boolean hasEnoughBlocks(Bot bot, Set<Material> targetMaterials, int maxBlocksPerMaterial) {

        if(bot.getInventory().getNPCInventory() == null) {
            BotLogger.debug("üõí " + bot.getId()+" Has no inventory yet!");
            return true;
        } //not yet created

        Map<Material, Integer> collectedCounts = new HashMap<>();

        // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        for (ItemStack item : bot.getInventory().getNPCInventory().getContents()) {
            if (item != null && targetMaterials.contains(item.getType())) {
                collectedCounts.put(item.getType(), collectedCounts.getOrDefault(item.getType(), 0) + item.getAmount());
            }
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ª—é–±–æ–≥–æ –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
        for (Material material : targetMaterials) {
            int count = collectedCounts.getOrDefault(material, 0);
            BotLogger.debug("üì¶ " + bot.getId() + " | " + material + ": ( " + count + "/" + maxBlocksPerMaterial+")");

            if (count >= maxBlocksPerMaterial) {
                return true; // –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
            }
        }

        return false; // –ï—â—ë –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    }

    public static boolean hasFreeInventorySpace(Bot bot, Set<Material> targetMaterials) {

        if(bot.getInventory().getNPCInventory() == null) {
            BotLogger.debug("üõí " + bot.getId()+" Has no inventory yet!");
            return true;
        } //not yet created

        for (ItemStack item : bot.getInventory().getNPCInventory().getContents()) {
            if (item == null || item.getType() == Material.AIR) {
                return true; // –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
            }
    
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å—Ç–∞–∫–µ –¥–ª—è –ª—é–±–æ–≥–æ –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            if (targetMaterials.contains(item.getType()) && item.getAmount() < item.getMaxStackSize()) {
                return true; // –í —ç—Ç–æ–º —Å–ª–æ—Ç–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë
            }
        }
        return false; // –ù–µ—Ç –º–µ—Å—Ç–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ
    }
    
    public static void dropAllItems(Bot bot) {
        Inventory inventory = bot.getInventory().getNPCInventory();
        if( inventory == null) {
            BotLogger.debug("üõí " + bot.getId()+" Has no inventory yet!");
            return;
        } //not yet created
        
        for (ItemStack item : inventory.getContents()) {
            if (item != null && item.getType() != Material.AIR) {
                bot.getNPCEntity().getWorld().dropItemNaturally(bot.getNPCEntity().getLocation(), item);
            }
        }
        
        inventory.clear(); // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ—Å–ª–µ –≤—ã–±—Ä–æ—Å–∞
        BotLogger.debug("üöÆ " + bot.getId() + " –í—ã–±—Ä–æ—Å–∏–ª –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!");
    }

    public void pullAllItemsinRadius(double radius) {
        List<Entity> nearbyItems = bot.getNPCEntity().getNearbyEntities(radius, radius, radius);
        
        for (Entity entity : nearbyItems) {
            if (entity instanceof Item) {
                    entity.teleport(bot.getNPCEntity().getLocation()); // –ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                    BotLogger.debug("üõí " + bot.getId()+" Pulled up a near item!");
            }
        }
    }

    public void logInventory() {
        Inventory inventory = getNPCInventory();
        
        if (inventory == null) {
            return;
        }

        List<String> rows = new ArrayList<>();
        int columns = 9; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ (–∫–∞–∫ –≤ GUI)

        StringBuilder row = new StringBuilder("| ");
        int count = 0;

        for (int i = 0; i < inventory.getSize(); i++) {
            ItemStack item = inventory.getItem(i);
            if (item != null && item.getType() != Material.AIR) {
                String material = item.getType().toString();
                int amount = item.getAmount();
                row.append(String.format("%2d x %-15s ", amount, material)); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ -> –ú–∞—Ç–µ—Ä–∏–∞–ª
            } else {
                row.append(String.format("-- x %-15s ", "------")); // –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç
            }

            count++;
            if (count == columns) {
                rows.add(row.toString() + "|");
                row = new StringBuilder("| ");
                count = 0;
            }
        }

        // –í—ã–≤–æ–¥ –≤ –ª–æ–≥–∏
        BotLogger.trace("üéÅ " + bot.getId() + "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:");
        for (String r : rows) {
            BotLogger.trace(r);
        }
    }


}



