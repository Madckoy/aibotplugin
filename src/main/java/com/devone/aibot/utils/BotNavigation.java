package com.devone.aibot.utils;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;

import com.devone.aibot.AIBotPlugin;
import com.devone.aibot.core.Bot;
import com.devone.aibot.core.logic.tasks.BotTaskMove;

import java.util.*;
import java.util.stream.Collectors;

public class BotNavigation {
    
    private static final Random random = new Random();

    public static void navigateTo(Bot bot, Location target, int scanRadius) {
        BotTaskMove moveTask = new BotTaskMove(bot);
        moveTask.configure(target);
        bot.getLifeCycle().getTaskStackManager().pushTask(moveTask);
    }

    public static Location getRandomPatrolPoint(Bot bot, int scanRadius) {
        Location currentLocation = bot.getNPCEntity().getLocation();
        Map<Location, Material> scannedBlocks = BotScanEnv.scan3D(currentLocation, scanRadius);
    
        List<Location> validPoints = scannedBlocks.entrySet().stream()
            .filter(entry -> isSuitableForNavigation(entry.getKey(), entry.getValue()))
            .map(Map.Entry::getKey)
            .filter(loc -> loc.distanceSquared(currentLocation) > 4.0) // ‚úÖ –û—Ç—Å–µ–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏–µ —Ç–æ—á–∫–∏ (–¥–∞–ª—å—à–µ 2 –±–ª–æ–∫–æ–≤)
            .collect(Collectors.toList());
    
        if (validPoints.isEmpty()) {
            BotLogger.debug(bot.getId() + " ‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ç–æ—á–µ–∫ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è, —É–≤–µ–ª–∏—á–∏–≤–∞—é —Ä–∞–¥–∏—É—Å...");
            return getRandomPatrolPoint(bot, Math.min(scanRadius + 5, 30)); // ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–∞–¥–∏—É—Å –¥–æ 30 (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        }
    
        return validPoints.get(new Random().nextInt(validPoints.size())); // ‚úÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É
    }
    
    public static boolean hasReachedTarget(Bot bot, Location target, double tolerance) {
        if (bot.getNPCEntity() == null) return false;
    
        Location current = bot.getNPCEntity().getLocation();
        if (current == null || target == null) return false;
        
        if (!current.getWorld().equals(target.getWorld())) return false;
    
        int cx = current.getBlockX(), cy = current.getBlockY(), cz = current.getBlockZ();
        int tx = target.getBlockX(), ty = target.getBlockY(), tz = target.getBlockZ();
    
        double distanceXZ = Math.sqrt(Math.pow(cx - tx, 2) + Math.pow(cz - tz, 2)); // üî• –¢–æ–ª—å–∫–æ XZ
        double yDifference = Math.abs(cy - ty);
    
        // ‚úÖ –ï—Å–ª–∏ –±–æ—Ç —Ä—è–¥–æ–º –ø–æ XZ –∏ –≤—ã—Å–æ—Ç–∞ ¬±2 –±–ª–æ–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω –¥–æ—à—ë–ª
        if (distanceXZ <= tolerance && yDifference <= 2) {
            BotLogger.debug("‚úÖ " + bot.getId() + " –ë–æ—Ç –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏! " + BotStringUtils.formatLocation(current));
            return true;
        }
    
        // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ `distanceSquared()` –¥–∞—ë—Ç –º–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        double distanceSquared = current.distanceSquared(target);
        if (distanceSquared < 4.0 && yDifference <= 2) {
            BotLogger.debug("üéØ " + bot.getId() + " –ë–æ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ (–ø–æ `distanceSquared()`), –∑–∞–≤–µ—Ä—à–∞–µ–º.");
            return true;
        }
    
        return false;
    }
    

    public static boolean isSuitableForNavigation(Location location, Material material) {
        return material.isSolid() && location.clone().add(0, 1, 0).getBlock().getType() == Material.AIR
            && material != Material.LAVA;
    }
}
