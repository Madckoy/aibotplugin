package com.devone.aibot.utils;
import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;

import com.devone.aibot.AIBotPlugin;
import com.devone.aibot.core.Bot;
import com.devone.aibot.core.logic.tasks.BotTaskMove;

import java.util.*;
import java.util.stream.Collectors;

public class BotNavigation {
    
    private static final Random random = new Random();
    private static final int MAX_STUCK_TIME = 5000; // 5 —Å–µ–∫—É–Ω–¥ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
    private static final double MIN_MOVEMENT_THRESHOLD = 0.1; // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–≤–∏–∂–µ–Ω–∏—è
    private static final double POSITION_TOLERANCE = 1.5; // –î–æ–ø—É—Å—Ç–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ

    public static void navigateTo(Bot bot, Location target, int scanRadius) {
        final Location[] currentLocation = {bot.getNPCEntity().getLocation()};
        final long[] stuckStartTime = {System.currentTimeMillis()};
        Queue<Location> pathQueue = new LinkedList<>();
        pathQueue.add(currentLocation[0]);

        Bukkit.getScheduler().runTaskTimer(AIBotPlugin.getInstance(), () -> {
            if (pathQueue.isEmpty()) return;

            Location current = pathQueue.poll();
            Map<Location, Material> scannedBlocks = BotScanEnv.scan3D(current, scanRadius);

            List<Location> validPoints = scannedBlocks.entrySet().stream()
                .filter(entry -> isSuitableForNavigation(entry.getKey(), entry.getValue()))
                .map(Map.Entry::getKey)
                .filter(loc -> loc.distanceSquared(currentLocation[0]) > POSITION_TOLERANCE * POSITION_TOLERANCE) // ‚úÖ –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∏–µ —Ç–æ—á–∫–∏
                .collect(Collectors.toList());

            if (validPoints.isEmpty()) {
                BotLogger.warn(bot.getId() + " ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫ –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è! –ü—Ä–æ–±—É—é –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç...");
                pathQueue.clear(); // ‚úÖ –û—á–∏—â–∞–µ–º –º–∞—Ä—à—Ä—É—Ç –∏ –ø—Ä–æ–±—É–µ–º –∑–∞–Ω–æ–≤–æ

                navigateTo(bot, target, scanRadius); // ‚úÖ –ü—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞/ !!!! –¢–£–¢ –†–ï–ö–£–†–°–ò–Ø! –û–ü–ê–°–ù–û!
                
                return;
            }

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞—Ä—à—Ä—É—Ç
            Location nextStep = validPoints.stream()
                .min(Comparator.comparingDouble(loc -> loc.distanceSquared(target)))
                .orElse(target);

            // ‚úÖ –ï—Å–ª–∏ –±–æ—Ç —É–∂–µ –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏, –æ—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á
            if (hasReachedTarget(bot, nextStep, 0.5)) {
                pathQueue.clear();
                BotLogger.info(bot.getId() + " üéØ –î–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Å—å.");
                return;
            }

            pathQueue.add(nextStep);

            // ‚úÖ –¢–µ–ø–µ—Ä—å –±–æ—Ç –Ω–µ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è, –∞ —Ä–µ–∞–ª—å–Ω–æ –∏–¥—ë—Ç!
            BotTaskMove nextMove = new BotTaskMove(bot); 
            nextMove.configure(nextStep);
            bot.getLifeCycle().getTaskStackManager().pushTask(nextMove);
          
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Å—Ç—Ä—è–ª –ª–∏ –±–æ—Ç
            if (bot.getNPCEntity().getLocation().distanceSquared(currentLocation[0]) < MIN_MOVEMENT_THRESHOLD) {
                if (System.currentTimeMillis() - stuckStartTime[0] > MAX_STUCK_TIME) {
                    BotLogger.error(bot.getId() + " ‚õî –ë–æ—Ç –∑–∞—Å—Ç—Ä—è–ª! –ü—Ä–æ–±—É—é –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç.");
                    pathQueue.clear();
                    navigateTo(bot, target, scanRadius); // ‚úÖ –í–º–µ—Å—Ç–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–∞—Ü–∏–∏ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–æ–π –ø—É—Ç—å
                    return;
                }
            } else {
                stuckStartTime[0] = System.currentTimeMillis();
                currentLocation[0] = bot.getNPCEntity().getLocation();
            }
        }, 0L, 40L); // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∂–µ (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
    }

    public static Location getRandomPatrolPoint(Bot bot, int scanRadius) {
        Location currentLocation = bot.getNPCEntity().getLocation();
        Map<Location, Material> scannedBlocks = BotScanEnv.scan3D(currentLocation, scanRadius);

        List<Location> validPoints = scannedBlocks.entrySet().stream()
            .filter(entry -> isSuitableForNavigation(entry.getKey(), entry.getValue()))
            .map(Map.Entry::getKey)
            .collect(Collectors.toList());

        if (validPoints.isEmpty()) {
            return currentLocation; // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫, –æ—Å—Ç–∞—ë–º—Å—è –Ω–∞ –º–µ—Å—Ç–µ
        }

        return validPoints.stream()
            .min(Comparator.comparingDouble(loc -> loc.distanceSquared(currentLocation)))
            .orElse(currentLocation);
    }

    public static boolean hasReachedTarget(Bot bot, Location target, double tolerance) {
        Location current = bot.getNPCCurrentLocation();

        if (current == null || target == null) {
            BotLogger.error("‚ùå –û—à–∏–±–∫–∞: hasReachedTarget() –≤—ã–∑–≤–∞–Ω —Å null-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏!");
            return false;
        }

        if (!current.getWorld().equals(target.getWorld())) {
            BotLogger.error("‚ùå " + bot.getId()+ " –û—à–∏–±–∫–∞: hasReachedTarget() –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∏—Ä–æ–≤!");
            return false;
        }

        double distanceSquared = current.distanceSquared(target);
        double yDifference = Math.abs(current.getY() - target.getY());

        if (distanceSquared <= tolerance * tolerance && yDifference < 2.0) {
            BotLogger.debug("‚úÖ " + bot.getId()+ " –ë–æ—Ç –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏! " + BotStringUtils.formatLocation(current));
            return true;
        }

        return false;
    }

    private static boolean isSuitableForNavigation(Location location, Material material) {
        return material.isSolid() && location.clone().add(0, 1, 0).getBlock().getType() == Material.AIR
            && material != Material.LAVA;
    }
}
