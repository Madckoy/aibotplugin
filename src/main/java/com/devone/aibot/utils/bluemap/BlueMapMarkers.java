package com.devone.aibot.utils.bluemap;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.BotManager;
import com.devone.aibot.utils.BotLogger;
import com.devone.aibot.utils.BotMovementLogger;

import de.bluecolored.bluemap.api.markers.POIMarker;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.configuration.file.YamlConfiguration;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BlueMapMarkers {
    private final BotManager botManager;
    private final File markersFile;

    private final Map<String, Location> lastKnownLocations = new HashMap<>();

    public BlueMapMarkers(BotManager botManager) {
        this.botManager = botManager;
        this.markersFile = new File("plugins/dynmap/markers.yml");

        if (!markersFile.exists()) {
            try {
                markersFile.createNewFile();
                BotLogger.debug("[DynmapBotMarkers] markers.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª.");
            } catch (IOException e) {
                BotLogger.error("[DynmapBotMarkers] –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è markers.yml: " + e.getMessage());
            }
        }
    }

    public void updateAllMarkers() {
        if (!markersFile.exists()) {
            BotLogger.error("[DynmapBotMarkers] ‚ùå markers.yml –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –≤—Ä—É—á–Ω—É—é.");
            return;
        }
    
        YamlConfiguration config = YamlConfiguration.loadConfiguration(markersFile);
    
        if (!config.contains("sets.bots")) {
            config.set("sets.bots.hide", false);
            config.set("sets.bots.layerprio", 10);
            config.set("sets.bots.minzoom", 0);
            config.set("sets.bots.showlabels", true);
            config.set("sets.bots.label", "Bots");
            config.createSection("sets.bots.markers");
        }
    
        boolean hasChanges = false;
        List<Bot> bots = List.copyOf(botManager.getAllBots());
    
        if (bots.isEmpty()) {
            BotLogger.debug("[DynmapBotMarkers] ‚ö† –ù–µ—Ç –±–æ—Ç–æ–≤, markers.yml –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è.");
            return;
        }
    
        for (Bot bot : bots) {

            Location loc = bot.getNPCCurrentLocation(); 

            if (loc != null) {
                String botId = bot.getId();
                Location lastLocation = lastKnownLocations.get(botId);

                if( lastLocation!=null ) {
                    BotLogger.debug("[DynmapBotMarkers]" + bot.getId() +" üìçLast known location on map: " +
                            " X:" + lastLocation.getBlockX() + " Y:" + lastLocation.getBlockY() + " Z:" + lastLocation.getBlockZ());
                    

                    // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    if (lastLocation.equals(loc)) {
                        BotLogger.debug("[DynmapBotMarkers]" + bot.getId() +" üìç Locations are the same! ");
                        continue; 
                    }
                }
    
                // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä
                String path = "sets.bots.markers." + botId;
                config.set(path + ".world", loc.getWorld().getName());
                config.set(path + ".x", loc.getBlockX());
                config.set(path + ".y", loc.getBlockY()); 
                config.set(path + ".z", loc.getBlockZ());
                config.set(path + ".label", botId + " ("+loc.getBlockX()+","+loc.getBlockY()+","+loc.getBlockZ()+")");
                config.set(path + ".icon","default/robot");
    
                lastKnownLocations.put(botId, loc.clone()); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

                hasChanges = true; 
                
                BotMovementLogger.logBotMovement(bot);
    
                BotLogger.debug("[DynmapBotMarkers]" + bot.getId() +" üìç –û–±–Ω–æ–≤–ª—ë–Ω –º–∞—Ä–∫–µ—Ä –±–æ—Ç–∞ : " +
                        " X:" + loc.getBlockX() + " Y:" + loc.getBlockY() + " Z:" + loc.getBlockZ());

            } else {
                BotLogger.debug("[DynmapBotMarkers]" + bot.getId() + " üìç ALL Bot Locations are unknown. Skip update.");
            }
           
        }
    
        if (hasChanges) { 
            try {
                config.save(markersFile);
                BotLogger.debug("[BlueMapMarkers] ‚úÖ markers.yml –æ–±–Ω–æ–≤–ª—ë–Ω!");


                // üî• –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –û–î–ò–ù —Ä–∞–∑, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
                Bukkit.getScheduler().runTaskLater(botManager.getPlugin(), () -> {
                    BotLogger.info("[DynmapBotMarkers] üîÑ –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã!");

                    BlueMapUtils.updateBlueMapMarkers(lastKnownLocations);
   
   
            }, 20L); // 1-—Å–µ–∫—É–Ω–¥–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä


            } catch (IOException e) {
                BotLogger.error("[DynmapBotMarkers] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ marker: " + e.getMessage());
            }
        }
    }

    public void scheduleMarkerUpdate() {

        Bukkit.getScheduler().runTaskTimer(botManager.getPlugin(), () -> {
            BotLogger.debug("[DynmapBotMarkers] ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ.");
            
            updateAllMarkers();

        }, 0L, 100L); // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã 

    }
}
