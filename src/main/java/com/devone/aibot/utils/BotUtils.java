package com.devone.aibot.utils;

import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.format.NamedTextColor;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;

import java.nio.file.Files;
import java.nio.file.StandardCopyOption;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.URL;
import java.util.Random;
import java.util.UUID;
import java.util.concurrent.TimeUnit;

import javax.imageio.ImageIO;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.io.File;
import java.io.IOException;

import org.bukkit.entity.Player;

public class BotUtils {
    private static final Random random = new Random();

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    public static Location getRandomNearbyLocation(Location base, int radiusXZ, int radiusY) {
        if (base == null) {
            throw new IllegalArgumentException("–ë–∞–∑–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }

        int xOffset = random.nextInt(radiusXZ * 2 + 1) - radiusXZ;
        int yOffset = random.nextInt(radiusY * 2 + 1) - radiusY;
        int zOffset = random.nextInt(radiusXZ * 2 + 1) - radiusXZ;

        return base.clone().add(xOffset, yOffset, zOffset);
    }

    public static String formatLocation(Location loc) {
        if( loc!=null ) {
        return "(" + loc.getBlockX() + ", " + loc.getBlockY() + ", " + loc.getBlockZ() + ")";
        } else {
            return "";
        }
    }

    public static boolean hasReachedTarget(Location current, Location target, double tolerance) {
        if (current == null || target == null) {
            BotLogger.debug("‚ö† –û—à–∏–±–∫–∞: hasReachedTarget() –≤—ã–∑–≤–∞–Ω —Å null-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏!");
            return false;
        }
    
        if (!current.getWorld().equals(target.getWorld())) {
            BotLogger.debug("‚ö† –û—à–∏–±–∫–∞: hasReachedTarget() –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∏—Ä–æ–≤!");
            return false;
        }
    
        // –õ–æ–≥–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º
        BotLogger.debug("üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: " + BotUtils.formatLocation(current));
        BotLogger.debug("üéØ –¶–µ–ª—å: " + BotUtils.formatLocation(target));
    
        double distanceSquared = current.distanceSquared(target);
    
        BotLogger.debug("üìè –ö–≤–∞–¥—Ä–∞—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: " + distanceSquared);
    
        if (distanceSquared <= tolerance * tolerance) {
            BotLogger.debug("‚úÖ –ë–æ—Ç –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏! " + BotUtils.formatLocation(current));
            return true;
        }
    
        return false;
    }
    
    public static String getSkinFile(UUID botUUID) {
        File skinFolder = new File(Constants.PLUGIN_PATH + "/web/skins");
        if (!skinFolder.exists()) skinFolder.mkdirs();
    
        File skinFile = new File(skinFolder, botUUID + ".png");
    
        // ‚úÖ –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å
        if (skinFile.exists()) return "/skins/" + botUUID + ".png";
    
        try {
            // ‚úÖ –°–∫–∞—á–∏–≤–∞–µ–º —Å–∫–∏–Ω —Å Crafatar (—Ä–∞–∑–º–µ—Ä 32x32)
            BufferedImage originalImage = ImageIO.read(new URL("https://crafatar.com/avatars/" + botUUID + "?size=32"));
    
            // ‚úÖ –£–º–µ–Ω—å—à–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ 16x16
            BufferedImage resizedImage = resizeImage(originalImage, 16, 16);
    
            // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            ImageIO.write(resizedImage, "png", skinFile);
    
            BotLogger.debug("‚úÖ –°–∫–∞—á–∞–Ω –∏ —É–º–µ–Ω—å—à–µ–Ω —Å–∫–∏–Ω –¥–ª—è " + botUUID);
        } catch (IOException e) {
            BotLogger.debug("‚ö† –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Å–∫–∏–Ω–∞: " + e.getMessage());
            return "/skins/default-bot.png"; // ‚úÖ –ó–∞–ø–∞—Å–Ω–æ–π —Å–∫–∏–Ω
        }
    
        return "/skins/" + botUUID + ".png";
    }
    
    /**
     * –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
     */
    private static BufferedImage resizeImage(BufferedImage originalImage, int targetWidth, int targetHeight) {
        Image resultingImage = originalImage.getScaledInstance(targetWidth, targetHeight, Image.SCALE_SMOOTH);
        BufferedImage outputImage = new BufferedImage(targetWidth, targetHeight, BufferedImage.TYPE_INT_ARGB);
    
        Graphics2D g2d = outputImage.createGraphics();
        g2d.drawImage(resultingImage, 0, 0, null);
        g2d.dispose();
    
        return outputImage;
    }
    
    
    public static String formatTime(long milliseconds) {
        long hours   = TimeUnit.MILLISECONDS.toHours(milliseconds);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(milliseconds) % 60;
        long seconds = TimeUnit.MILLISECONDS.toSeconds(milliseconds) % 60;
        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }
    

    public static void sendMessageToPlayer(Player to, String from, String message) {
        Component chatMessage;

        if (from == null) {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã
            chatMessage = Component.text("[System] ", NamedTextColor.YELLOW)
                    .append(Component.text(message, NamedTextColor.WHITE));
        } else if (from.contains("Bot")) { 
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞ (–µ—Å–ª–∏ –≤ –∏–º–µ–Ω–∏ –µ—Å—Ç—å "Bot")
            chatMessage = Component.text("[", NamedTextColor.GRAY)
                    .append(Component.text(from, NamedTextColor.AQUA)) // –ò–º—è –±–æ—Ç–∞ ‚Äì –≥–æ–ª—É–±—ã–º
                    .append(Component.text("] ", NamedTextColor.GRAY))
                    .append(Component.text(message, NamedTextColor.WHITE));
        } else {
            // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            chatMessage = Component.text(from + ": ", NamedTextColor.GREEN)
                    .append(Component.text(message, NamedTextColor.WHITE));
        }

        to.sendMessage(chatMessage);
    }

    public static Location findNearestNavigableLocation(Location current, Location target, int radius) {
        World world = target.getWorld();

        // –ï—Å–ª–∏ —Ü–µ–ª—å —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–º–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        if (isNavigable(target)) {
            return target;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏ –≤–æ–∫—Ä—É–≥ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ
        for (int dx = -radius; dx <= radius; dx++) {
            for (int dz = -radius; dz <= radius; dz++) {
                Location newTarget = target.clone().add(dx, 0, dz);
                if (isNavigable(newTarget)) {
                    return newTarget;
                }
            }
        }

        return null; // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–ª–æ–∫
    private static boolean isNavigable(Location location) {
        Block block = location.getBlock();
        return block.getType().isAir() || block.getType() == Material.WATER; // –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å
    }

}
