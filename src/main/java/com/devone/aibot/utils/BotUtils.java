package com.devone.aibot.utils;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.util.Vector;

import com.devone.aibot.core.Bot;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BotUtils {

    public static String getBlockName(Block bl) {

        String text = bl.toString();

        String result = "";
        // Regular expression to capture the value of type
        String pattern = "type=([A-Za-z0-9_]+)";

        // Create a Pattern object
        Pattern r = Pattern.compile(pattern);

        // Create a matcher object
        Matcher m = r.matcher(text);

        // Check if the pattern is found
        if (m.find()) {
            result = m.group(1);
        }

        return result; 
    }

    public static void playBlockBreakEffect(Location location) {
        if (location == null || location.getWorld() == null) return;
    
        Material blockType = location.getBlock().getType();
    
        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–∫ –Ω–µ AIR (–∏–Ω–∞—á–µ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
        if (blockType == Material.AIR) {
            BotLogger.info(true, "‚ö†Ô∏è –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω: –±–ª–æ–∫ —É–∂–µ AIR " + BotStringUtils.formatLocation(location));
            return;
        }
    
        location.getWorld().spawnParticle(
            org.bukkit.Particle.BLOCK_CRACK,
            location.clone().add(0.5, 0.5, 0.5), // –¶–µ–Ω—Ç—Ä –±–ª–æ–∫–∞
            20, // –ö–æ–ª-–≤–æ —á–∞—Å—Ç–∏—Ü
            0.25, 0.25, 0.25, // –†–∞–∑–±—Ä–æ—Å
            location.getBlock().getBlockData() // –¢–∏–ø –±–ª–æ–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        );
    
        BotLogger.info(true, "üéá –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –Ω–∞ " + BotStringUtils.formatLocation(location));
    }

    public static boolean requiresTool(Material blockType) {
        return switch (blockType) {
            case IRON_ORE, GOLD_ORE, DIAMOND_ORE, DEEPSLATE, OBSIDIAN -> true; // ‚ùó –¢–æ–ª—å–∫–æ —ç—Ç–∏ –±–ª–æ–∫–∏ —Ç—Ä–µ–±—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            default -> false; // –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–æ–∂–Ω–æ –ª–æ–º–∞—Ç—å —Ä—É–∫–∞–º–∏
        };
    }
    
    public static Location getFallbackLocation() {
        World world = Bukkit.getWorlds().get(0);
        return world.getSpawnLocation();
    }

    public static boolean isBreakableBlock(Location location) {
        if (location == null || location.getWorld() == null) return false;
    
        Material type = location.getBlock().getType();
    
        return switch (type) {
            case AIR, CAVE_AIR, VOID_AIR,
                 BEDROCK, BARRIER,
                 END_PORTAL, END_PORTAL_FRAME,
                 STRUCTURE_BLOCK, STRUCTURE_VOID,
                 COMMAND_BLOCK, CHAIN_COMMAND_BLOCK, REPEATING_COMMAND_BLOCK -> false;
            default -> true;
        };
    }
    
/**
     * –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –ª–∏—Ü–æ–º –∫ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è teleport —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
     * –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ setRotation().
     *
     * @param bot     –ë–æ—Ç (CraftPlayer –∏–ª–∏ NPC, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π teleport)
     * @param target  –¶–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –ª–∏—Ü–æ
     */
    public static void lookAt(Bot bot, Location target) {
        Location from = bot.getNPCEntity().getLocation();
        Location to = target.clone().add(0.5, 0.5, 0.5); // —Ü–µ–Ω—Ç—Ä –±–ª–æ–∫–∞

        Vector direction = to.toVector().subtract(from.toVector());

        float yaw = (float) Math.toDegrees(Math.atan2(-direction.getX(), direction.getZ()));
        float pitch = (float) Math.toDegrees(-Math.atan2(direction.getY(),
                Math.sqrt(direction.getX() * direction.getX() + direction.getZ() * direction.getZ())));

        Location newLook = from.clone();
        newLook.setYaw(yaw);
        newLook.setPitch(pitch);

        bot.getNPCEntity().teleport(newLook);
    }

}