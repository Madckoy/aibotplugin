package com.devone.aibot.utils;

import com.devone.aibot.core.Bot;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;

import java.util.Random;

public class BotNavigationUtils {
    private static final Random random = new Random();

    public static Location getRandomWalkLocation(Location currentLocation, int minRange, int maxRange) {
        int offsetX = random.nextInt(maxRange - minRange + 1) + minRange;
        int offsetZ = random.nextInt(maxRange - minRange + 1) + minRange;
        int offsetY = 0;//random.nextInt(maxRange - minRange + 1) + minRange;

        return currentLocation.clone().add(offsetX * 1,offsetY*1, offsetZ * 1);
    }

    public static Location findNearestNavigableLocation(Location current, Location target, int radius) {
        World world = target.getWorld();

        // –ï—Å–ª–∏ —Ü–µ–ª—å —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–º–∞—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ—ë
        if (isNavigable(target)) {
            return target;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏ –≤–æ–∫—Ä—É–≥ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ
        for (int dx = -radius; dx <= radius; dx++) {
            for (int dz = -radius; dz <= radius; dz++) {
                Location newTarget = target.clone().add(dx, 0, dz);
                if (isNavigable(newTarget)) {
                    return newTarget;
                }
            }
        }

        return null; // –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø—Ä–æ–π—Ç–∏ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç –±–ª–æ–∫
    private static boolean isNavigable(Location location) {
        Block block = location.getBlock();
        return block.getType().isAir() || block.getType() == Material.WATER; // –ú–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å
    }

    public static boolean hasReachedTarget(Bot bot, Location target, double tolerance) {

        Location current = bot.getNPCCurrentLocation();

        if (current == null || target == null) {
            BotLogger.error("‚ùå –û—à–∏–±–∫–∞: hasReachedTarget() –≤—ã–∑–≤–∞–Ω —Å null-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏!");
            return false;
        }

        if (!current.getWorld().equals(target.getWorld())) {
            BotLogger.error("‚ùå " + bot.getId()+ " –û—à–∏–±–∫–∞: hasReachedTarget() –≤—ã–∑–≤–∞–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∏—Ä–æ–≤!");
            return false;
        }

        // –õ–æ–≥–≥–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ä–∞—Å—á–µ—Ç–æ–º
        BotLogger.info("üìç"  + bot.getId() +  " –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: " + BotStringUtils.formatLocation(current));
        BotLogger.info("üéØ " + bot.getId() +  " –¶–µ–ª—å: " + BotStringUtils.formatLocation(target));

        double distanceSquared = current.distanceSquared(target);

        BotLogger.debug("üìè –ö–≤–∞–¥—Ä–∞—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: " + distanceSquared);

        if (distanceSquared <= tolerance * tolerance) {
            BotLogger.info("‚úÖ " + bot.getId()+ " –ë–æ—Ç –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏! " + BotStringUtils.formatLocation(current));
            return true;
        }

        return false;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Ä–∞–¥–∏—É—Å–µ –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
     */
    public static Location getRandomNearbyLocation(Location base, int radiusXZ, int radiusY) {
        if (base == null) {
            throw new IllegalArgumentException("–ë–∞–∑–æ–≤–∞—è –ª–æ–∫–∞—Ü–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }

        int xOffset = random.nextInt(radiusXZ * 2 + 1) - radiusXZ;
        int yOffset = random.nextInt(radiusY * 2 + 1) - radiusY;
        int zOffset = random.nextInt(radiusXZ * 2 + 1) - radiusXZ;

        return base.clone().add(xOffset, yOffset, zOffset);
    }

}
