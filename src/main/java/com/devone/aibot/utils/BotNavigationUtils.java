package com.devone.aibot.utils;

import org.bukkit.Location;
import org.bukkit.Material;

import com.devone.aibot.core.Bot;
import com.devone.aibot.core.logic.tasks.BotTaskMove;


public class BotNavigationUtils {
    
    public static boolean _hasReachedTarget_(Bot bot, Location target, double tolerance) {
        if (bot.getNPCEntity() == null) return false;
    
        Location current = bot.getNPCEntity().getLocation();
        if (current == null || target == null) return false;
        
        if (!current.getWorld().equals(target.getWorld())) return false;
    
        int cx = current.getBlockX(), cy = current.getBlockY(), cz = current.getBlockZ();
        int tx = target.getBlockX(), ty = target.getBlockY(), tz = target.getBlockZ();
    
        double distanceXZ = Math.sqrt(Math.pow(cx - tx, 2) + Math.pow(cz - tz, 2)); // üî• –¢–æ–ª—å–∫–æ XZ
        double yDifference = Math.abs(cy - ty); 
 
        BotLogger.trace("‚úÖ " + bot.getId() + " ZX  " + distanceXZ+ "  Y " + yDifference);

        // ‚úÖ –ï—Å–ª–∏ –±–æ—Ç —Ä—è–¥–æ–º –ø–æ XZ –∏ –≤—ã—Å–æ—Ç–∞ ¬±2 –±–ª–æ–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –æ–Ω –¥–æ—à—ë–ª
        if (distanceXZ <= tolerance && yDifference <= (tolerance*2)) { // —Ü–µ–ª—å –ª–∏–±–æ –≥–ª—É–±–æ–∫–æ –ª–∏–±–æ –≤—ã—Å–æ–∫–æ, –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ø—Ä–∏—à–ª–∏
            BotLogger.trace("‚úÖ " + bot.getId() + " –ë–æ—Ç –¥–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏! " + BotStringUtils.formatLocation(current));
            return true;
        }
    
        // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ `distanceSquared()` –¥–∞—ë—Ç –º–∞–ª–µ–Ω—å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        double distanceSquared = current.distanceSquared(target);
        if (distanceSquared < tolerance && yDifference <= tolerance) {
            BotLogger.trace("üéØ " + bot.getId() + " –ë–æ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–ª–∏–∑–∫–æ (–ø–æ `distanceSquared()`), –∑–∞–≤–µ—Ä—à–∞–µ–º.");
            return true;
        }
    
        return false;
    }
    
    public static boolean hasReachedTargetFlex(Location botLoc, Location targetLoc, double horizontalTolerance, double verticalTolerance) {
        double dx = Math.abs(botLoc.getX() - targetLoc.getX());
        double dz = Math.abs(botLoc.getZ() - targetLoc.getZ());
        double dy = Math.abs(botLoc.getY() - targetLoc.getY());
    
        return dx <= horizontalTolerance && dz <= horizontalTolerance && dy <= verticalTolerance;
    }

    public static boolean isSuitableForNavigation(Location location, Material material) {
        return material.isSolid() && location.clone().add(0, 1, 0).getBlock().getType() == Material.AIR
            && material != Material.LAVA && material != Material.WATER;
    }

        public static void navigateTo(Bot bot, Location target) {
        BotTaskMove moveTask = new BotTaskMove(bot);
        moveTask.configure(target);
        bot.addTaskToQueue(moveTask);
    }

    public static void navigateTo(Bot bot, Location target, double multiplier) {
        BotTaskMove moveTask = new BotTaskMove(bot);
        moveTask.configure(target, multiplier);
        bot.addTaskToQueue(moveTask);
    }
}
