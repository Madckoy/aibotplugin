package com.devone.bot.core.bot.task.reactive.reaction;

import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.bot.task.passive.BotTask;
import com.devone.bot.core.bot.task.reactive.BotReactiveUtils;
import com.devone.bot.core.bot.task.reactive.IBotReactionStrategy;
import com.devone.bot.core.bot.task.reactive.sequence.BotReactiveSequenceTask;
import com.devone.bot.core.utils.BotUtils;
import com.devone.bot.core.utils.logger.BotLogger;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * üß© –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è ‚Äî –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å —É—Å–ª–æ–≤–∏–µ —Å–Ω–∞—Ä—É–∂–∏
 */
public class BotReactiveCustomReaction implements IBotReactionStrategy {

    private final String reactionName;
    private final double minHealth;
    private final double detectionRadius;

    public BotReactiveCustomReaction(String reactionName, double minHealth, double detectionRadius) {
        this.reactionName = reactionName;
        this.minHealth = minHealth;
        this.detectionRadius = detectionRadius;
    }

    @Override
    public Optional<Runnable> check(Bot bot) {

        BotLogger.debug("ü§ñ", true, bot.getId() + " üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ä–µ–∞–∫—Ü–∏–∏: " + getName());

        // üîí –£—Å–ª–æ–≤–∏–µ: –∑–¥–æ—Ä–æ–≤—å–µ + –≤–æ–∑–º–æ–∂–Ω–æ, –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤—Ä–∞–≥–∏ –≤ —Ä–∞–¥–∏—É—Å–µ
        boolean lowHealth = bot.getState().getHealth() < minHealth;

        if (!lowHealth) return Optional.empty();

        if (BotReactiveUtils.isAlreadyReacting(bot)) {
            BotLogger.debug("ü§ñ", true, bot.getId() + " üîÅ [Custom] –£–∂–µ —Ä–µ–∞–≥–∏—Ä—É–µ—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º");
            return BotReactiveUtils.avoidOverReaction(bot);
        }

        BotReactiveUtils.activateReaction(bot);

        return Optional.of(() -> {
            BotLogger.debug("ü§ñ", true, bot.getId() + " üî• [Custom] –†–µ–∞–∫—Ü–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: " + getName());

            List<BotTask<?>> tasks = new ArrayList<>();

            // –î–æ–±–∞–≤—å –∑–∞–¥–∞—á–∏ –ø–æ —Å–≤–æ–µ–º—É —Å—Ü–µ–Ω–∞—Ä–∏—é
            // tasks.add(...);

            BotReactiveSequenceTask sequence = new BotReactiveSequenceTask(bot, tasks);
            BotUtils.pushTask(bot, sequence);
        });
    }

    @Override
    public String getName() {
        return "‚öôÔ∏è " + reactionName + " (hp < " + minHealth + ", radius = " + detectionRadius + ")";
    }
}
