package com.devone.bot.core.bot.brain.memory;

import com.devone.bot.core.bot.brain.BotBrain;
import com.devone.bot.core.bot.brain.memory.scene.BotSceneData;
import com.devone.bot.core.utils.blocks.BotBlockData;
import com.devone.bot.core.utils.blocks.BotLocation;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.EnumMap;
import com.google.gson.JsonObject;

public class BotMemory {
    
    protected transient BotSceneData sceneData;
    private final Map<String, Integer> blockBreakSummary = new HashMap<>();
    private final Map<String, Integer> EntitiesKilledSummary = new HashMap<>();

    private long teleportUsed;
    @SuppressWarnings("unused")
    private transient BotBrain brain;

    // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø–∞–º—è—Ç–∏, –∫–∞–∂–¥—ã–π —Ç–∏–ø –∏–º–µ–µ—Ç —Å–≤–æ–π –Ω–∞–±–æ—Ä –ø–æ—Å–µ—â—ë–Ω–Ω—ã—Ö –º–µ—Å—Ç
    private final Map<MemoryType, Map<BotLocation, BotMemoryItem>> memoryMap;

    public BotMemory(BotBrain brain) {
        this.brain = brain;
        this.sceneData = null;
        this.teleportUsed = 0;

        memoryMap = new EnumMap<>(MemoryType.class); // –ò—Å–ø–æ–ª—å–∑—É–µ–º EnumMap –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏—è–º–∏

        for (MemoryType type : MemoryType.values()) {
            memoryMap.put(type, new HashMap<>());
        }
    }

    public void killedMobsIncrease(String mobName) {
        EntitiesKilledSummary.merge(mobName, 1, Integer::sum);
    }

    public void brokenBlocksIncrease(String blockName) {

        blockBreakSummary.merge(blockName, 1, Integer::sum);

    }

    public JsonObject getBlockBreakSummaryJson() {
        JsonObject json = new JsonObject();
        int total = 0;
    
        for (Map.Entry<String, Integer> entry : blockBreakSummary.entrySet()) {
            json.addProperty(entry.getKey(), entry.getValue());
            total += entry.getValue();
        }
    
        json.addProperty("total", total); // –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö –±–ª–æ–∫–æ–≤
        return json;
    }

    public JsonObject getMobsKilledSummaryJson() {
        JsonObject json = new JsonObject();
        int total = 0;
    
        for (Map.Entry<String, Integer> entry : EntitiesKilledSummary.entrySet()) {
            json.addProperty(entry.getKey(), entry.getValue());
            total += entry.getValue();
        }
    
        json.addProperty("total", total); // –û–±—â–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —É–±–∏—Ç—ã—Ö
        return json;
    }
    
    public long getMobsKilled() {
        return EntitiesKilledSummary.values().stream().mapToInt(Integer::intValue).sum();
    }

    public long getBlocksBroken() {
         return blockBreakSummary.values().stream().mapToInt(Integer::intValue).sum();
    }

    public void teleportUsedIncrease() {
        this.teleportUsed = teleportUsed + 1;
    }

    public long getTeleportUsed() {
        return teleportUsed;
    }

    public void setSceneData(BotSceneData sceneData) {
        this.sceneData = sceneData;
    }

    public BotSceneData getSceneData() {
        return this.sceneData;
    }

    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –±–ª–æ–∫ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∞–º—è—Ç–∏
    public void memorize(BotBlockData block, MemoryType memoryType) {
        if(block==null) return;
        BotMemoryItem item = new BotMemoryItem(block);
        memoryMap.get(memoryType).put(block.getLocation(), item);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª –ª–∏ –±–ª–æ–∫ –∑–∞–ø–æ–º–Ω–µ–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∞–º—è—Ç–∏
    public boolean isMemorized(BotBlockData block, MemoryType memoryType) {
        boolean res = false;

        if(block!=null) {

            Map<BotLocation, BotMemoryItem> map = memoryMap.get(memoryType);

            if(map!=null) {
                BotMemoryItem m_item = map.get(block.getLocation());
                if(m_item != null) {
                    return true;
                }  
            }
        }
        return res;
    }

    // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ –≤—Å–µ–º —Ç–∏–ø–∞–º –ø–∞–º—è—Ç–∏
    public long cleanup(long expirationMillis) {
        long removed = 0;
        long currentTime = System.currentTimeMillis();

        // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã –ø–∞–º—è—Ç–∏
        for (Map<BotLocation, BotMemoryItem> memory : memoryMap.values()) {
            Iterator<Map.Entry<BotLocation, BotMemoryItem>> it = memory.entrySet().iterator();
            while (it.hasNext()) {
                Map.Entry<BotLocation, BotMemoryItem> entry = it.next();
                BotMemoryItem item = entry.getValue();
                
                // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª, —É–¥–∞–ª—è–µ–º –µ–≥–æ
                if (item.isExpired(expirationMillis, currentTime)) {
                    it.remove();
                    removed++;
                }
            }
        }

        return removed;
    }

    public void cleanup(MemoryType type) {
 
        cleanupMemoryType(type);

    }

    public void cleanupMemoryType(MemoryType type) {
        Map<BotLocation, BotMemoryItem> target = memoryMap.get(type);
        if (target != null) {
            target.clear();
        }
    }
    
    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–∞–º—è—Ç–∏
    public Map<BotLocation, BotMemoryItem> getMemoryForType(MemoryType memoryType) {
        return memoryMap.get(memoryType);
    }

    public JsonObject toJson() {
        JsonObject memoryJson = new JsonObject();
    
        // üîπ –£–±–∏—Ç—ã–µ –º–æ–±—ã: summary { "ZOMBIE": 7, "CREEPER": 2, ... }
        JsonObject mobsSummary = new JsonObject();
        for (Map.Entry<String, Integer> entry : EntitiesKilledSummary.entrySet()) {
            mobsSummary.addProperty(entry.getKey(), entry.getValue());
        }
        memoryJson.add("killedMobsSummary", mobsSummary);
    
        // üî∏ –†–∞–∑—Ä—É—à–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏: summary { "DIRT": 123, "STONE": 45, ... }
        JsonObject blocksSummary = new JsonObject();
        for (Map.Entry<String, Integer> entry : blockBreakSummary.entrySet()) {
            blocksSummary.addProperty(entry.getKey(), entry.getValue());
        }
        memoryJson.add("brokenBlocksSummary", blocksSummary);
    
        // üîÅ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–ª–µ–ø–æ—Ä—Ç–æ–≤
        memoryJson.addProperty("teleportUsed", teleportUsed);
    
        // üß† –†–∞–∑–º–µ—Ä—ã –ø–∞–º—è—Ç–∏ –ø–æ —Ç–∏–ø–∞–º (–∫–∞–∫ –∏ –±—ã–ª–æ)
        JsonObject types = new JsonObject();
        for (MemoryType type : memoryMap.keySet()) {
            types.addProperty(type.name(), memoryMap.get(type).size());
        }
        memoryJson.add("memoryTypes", types);
    
        return memoryJson;
    }

}
