package com.devone.bot.core.bot.task.active.excavate;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.Set;

import org.bukkit.Material;
import org.bukkit.block.Block;
import org.eclipse.jetty.util.StringUtil;

import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.bot.inventory.BotInventory;
import com.devone.bot.core.bot.task.active.excavate.BotExcavateTask;
import com.devone.bot.core.bot.task.active.excavate.params.BotExcavateTaskParams;
import com.devone.bot.core.bot.task.active.excavate.patterns.IBotExcavatePatternRunner;
import com.devone.bot.core.bot.task.active.excavate.patterns.generator.BotExcavateTemplateRunner;
import com.devone.bot.core.bot.task.active.excavate.patterns.generator.params.BotExcavateTemplateRunnerParams;
import com.devone.bot.core.bot.task.active.hand.excavate.BotHandExcavateTask;
import com.devone.bot.core.bot.task.active.hand.excavate.params.BotHandExcavateTaskParams;
import com.devone.bot.core.bot.task.passive.BotTaskAutoParams;
import com.devone.bot.core.bot.task.passive.BotTaskManager;
import com.devone.bot.core.bot.task.passive.IBotTaskParameterized;
import com.devone.bot.core.utils.BotConstants;
import com.devone.bot.core.utils.BotUtils;
import com.devone.bot.core.utils.blocks.BotBlockData;
import com.devone.bot.core.utils.blocks.BotLocation;
import com.devone.bot.core.utils.logger.BotLogger;
import com.devone.bot.core.utils.world.BotWorldHelper;
import com.devone.bot.core.utils.zone.BotZoneManager;

public class BotExcavateTask extends BotTaskAutoParams<BotExcavateTaskParams> {

    private int maxBlocks;
    private int outerRadius = BotConstants.DEFAULT_SCAN_RANGE;
    private int innerRadius = BotConstants.DEFAULT_SCAN_RANGE;
    private Set<Material> targetMaterials = null;
    private String patternName = BotConstants.DEFAULT_PATTERN_BREAK;
    private IBotExcavatePatternRunner patternRunner = null;
    private BotExcavateTemplateRunnerParams excavateParams = new BotExcavateTemplateRunnerParams();

    public BotExcavateTask(Bot bot) {
        super(bot, BotExcavateTaskParams.class);
    }

    public IBotTaskParameterized<BotExcavateTaskParams> setParams(BotExcavateTaskParams params) {

        this.params = params;

        setIcon(params.getIcon());
        setObjective(params.getObjective());

        if (params.getPatternName() != null) {
            this.patternName = params.getPatternName();
            BotLogger.debug(icon, isLogging(), bot.getId()+ " üìê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è: " + patternName);
        }

        BotLogger.debug(icon, isLogging(), bot.getId() + " üìê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ setParams(): " + patternName);

        return this;
    }

    /**
     * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.
     * 
     * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ):
     * 
     * 0 - Set<Material> targetMaterials (nullable) ‚Äî –±–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ
     * —Ä–∞–∑—Ä—É—à–∞—Ç—å.
     * 1 - Integer maxBlocks (nullable) ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ
     * –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å.
     * 2 - Integer outerRadius (nullable) ‚Äî —Ä–∞–¥–∏—É—Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.
     * 3 - Integer innerRadius (nullable) ‚Äî —Ä–∞–¥–∏—É—Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.
     * 4 - Boolean shouldPickup (nullable) ‚Äî —Å–æ–±–∏—Ä–∞—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ—Å–ª–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.
     * 5 - Boolean destroyAllIfNoTarget (nullable) ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–∫–æ–≤,
     * —Ä–∞–∑—Ä—É—à–∞—Ç—å –≤—Å—ë –ø–æ–¥—Ä—è–¥.
     * 7 - int offsetX
     * 8 - int offsetY
     * 9 - int offsetZ
     * 10 - IBotDestructionPattern –∏–ª–∏ String (nullable) ‚Äî —à–∞–±–ª–æ–Ω —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:
     * - IBotDestructionPattern ‚Äî –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç.
     * - String ‚Äî –ø—É—Ç—å –∫ YAML-—Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤).
     *
     * –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     */

    public String getPatternName() {
        return this.patternName;
    }


    public int getOuterRadius() {
        return outerRadius;
    }

    public void setOuterRadius(int r) {
        this.outerRadius = r;
    }

    public int getInnerRadius() {
        return innerRadius;
    }

    public void setInnerRadius(int r) {
        this.innerRadius = r;
    }


    public void setTargetMaterials(Set<Material> materials) {
        this.targetMaterials = materials;
        BotLogger.debug(icon, isLogging(), bot.getId() + " üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + materials);
    }

    public Set<Material> getTargetMaterials() {
        BotLogger.debug(icon, isLogging(), bot.getId() + " üìú –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + targetMaterials);
        return this.targetMaterials;
    }

    @Override
    public void execute() {

        BotLogger.debug(icon, isLogging(), bot.getId() + " üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ " + bot.getId() +
                " (–¶–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + (targetMaterials == null ? "–í–°–ï" : targetMaterials) + ")");

        // üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—É—é –∂–∏–¥–∫–æ—Å—Ç—å
        if (BotWorldHelper.isInDangerousLiquid(bot)) {
            BotLogger.debug(icon, isLogging(), bot.getId() + " üíß –û–∫–∞–∑–∞–ª—Å—è –≤ –æ–ø–∞—Å–Ω–æ–π –∂–∏–¥–∫–æ—Å—Ç–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–ø–∫—É.");
            this.stop();
            return;
        }

        if (patternRunner == null) {
            if (!StringUtil.isEmpty(patternName)) {

                Path ptrnPath = Paths.get(BotConstants.PLUGIN_PATH_PATTERNS_BREAK, patternName);

                this.patternRunner = new BotExcavateTemplateRunner(ptrnPath).init(bot.getNavigation().getLocation().getX(),
                                                                                  bot.getNavigation().getLocation().getY(),
                                                                                  bot.getNavigation().getLocation().getZ());

                //setParams(null ); //null because we read from the template file

                BotLogger.debug(icon, isLogging(), bot.getId() +
                        " üìê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è YAML-–ø–∞—Ç—Ç–µ—Ä–Ω: " + this.patternRunner.getName());

            } else {
                
                Path fallbackPath = Paths.get(BotConstants.PLUGIN_PATH_PATTERNS_BREAK,
                        BotConstants.DEFAULT_PATTERN_BREAK);

                this.patternRunner = new BotExcavateTemplateRunner(fallbackPath).setParams( excavateParams );

                BotLogger.debug(icon, isLogging(), bot.getId() +
                        " üìê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π YAML-–ø–∞—Ç—Ç–µ—Ä–Ω: " + BotConstants.DEFAULT_PATTERN_BREAK);
            }
        }

        if (patternRunner.isFinished()) {
            BotLogger.debug(icon, isLogging(), " üèÅ –í—Å–µ –±–ª–æ–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É.");
            this.stop();
            return;
        }

        if (params.isPickup()) {
            if (isInventoryFull() || isEnoughBlocksCollected()) {
                BotLogger.debug(icon, isLogging(),
                        bot.getId() + " ‚õî –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ");
                this.stop();
                return;
            }
        }

        if (params.isPickup()) {
            bot.pickupNearbyItems();
        }
        // -----------------
        BotLocation location = patternRunner.getNextBlock(bot);
        // -----------------
        if (location == null) {
            this.stop();
            BotLogger.debug(icon, isLogging(),
                    bot.getId() + " üôà –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–ª–æ–∫–∞ –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è. –í—ã—Ö–æ–¥–∏–º.");
            return;
        }

        BotLocation targetLocation = new BotLocation(location);

        Block targetBlock = BotWorldHelper.getBlockAt(targetLocation);

        bot.getNavigation().setTarget(targetLocation);

        turnToTarget(this, targetLocation);

        if (bot.getNavigation().getTarget() != null) {

            setObjective(params.getObjective() + " " + BotUtils.getBlockName(targetBlock)
                    + " at " + targetLocation);

            if (isInProtectedZone(bot.getNavigation().getTarget())) {
                BotLogger.debug(icon, isLogging(), bot.getId() + " ‚õî –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï –±—É–¥–µ—Ç —Ä–∞–∑—Ä—É—à–∞—Ç—å –±–ª–æ–∫: " +
                        bot.getNavigation().getTarget());
                        
                this.stop();
                return;
            }

            if (!BotWorldHelper.isBreakableBlock(targetBlock)) {
                
                BotLogger.debug(icon, isLogging(), bot.getId() + " ‚õî –ù–µ—Ä–∞–∑—Ä—É—à–∞–µ–º—ã–π –±–ª–æ–∫: "
                        + bot.getNavigation().getTarget());

                bot.getNavigation().setTarget(null);
                
                return;
            }

            Material mat = targetBlock.getType();

            if (BotUtils.requiresTool(mat)) {
                if (!BotInventory.equipRequiredTool(bot, mat)) {
                    BotLogger.debug(icon, isLogging(),
                            bot.getId() + " üôà –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Ä—É–∫—É. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                    bot.getNavigation().setTarget(null);
                    return;
                }
            }

            BotBlockData block = BotWorldHelper.worldBlockToBotBlock(targetBlock);
            BotHandExcavateTask handTask = new BotHandExcavateTask(bot);
            BotHandExcavateTaskParams params = new BotHandExcavateTaskParams();
            params.setTarget(block);
            handTask.setParams(params);
            BotTaskManager.push(bot, handTask);

        } else {

            setObjective("The block is not found. ");

            handleNoTargetFound();
        }
    }

    private void handleNoTargetFound() {
        bot.getNavigation().setTarget(null);

        setObjective("");
        BotLogger.debug(icon, isLogging(), bot.getId() + bot.getId() + " ‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–∫–æ–≤. –ó–∞–≤–µ—Ä—à–∞–µ–º.");
        this.stop();

    }

    private boolean isInventoryFull() {
        boolean full = !BotInventory.hasFreeInventorySpace(bot, targetMaterials);
        BotLogger.debug(icon, isLogging(), bot.getId() + " üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: " + (full ? "–ø–æ–ª–æ–Ω" : "–µ—Å—Ç—å –º–µ—Å—Ç–æ"));
        return full;
    }

    private boolean isEnoughBlocksCollected() {
        boolean enough = BotInventory.hasEnoughBlocks(bot, targetMaterials, maxBlocks);
        BotLogger.debug(icon, isLogging(),
                bot.getId() + " üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤: " + (enough ? "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" : "–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ"));
        return enough;
    }

    private boolean isInProtectedZone(BotLocation location) {
        boolean protectedZone = BotZoneManager.getInstance().isInProtectedZone(location);
        if (protectedZone) {
            BotLogger.debug(icon, isLogging(), bot.getId() + " üõë –ë–ª–æ–∫ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.");
        }
        return protectedZone;
    }

    @Override
    public void stop() {
        this.patternRunner = null;
        bot.getNavigation().setTarget(null);
        BotLogger.debug(icon, isLogging(), bot.getId() + " üõë –ó–∞–¥–∞—á–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
        super.stop();
    }

}