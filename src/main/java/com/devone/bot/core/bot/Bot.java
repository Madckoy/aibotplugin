package com.devone.bot.core.bot;

import java.util.List;

import java.util.UUID;

import org.bukkit.Location;

import org.bukkit.entity.Entity;

import org.bukkit.entity.Player;

import com.devone.bot.core.bot.bootstrap.BotBootstrap;
import com.devone.bot.core.bot.brain.BotBrain;
import com.devone.bot.core.bot.brain.logic.navigation.BotNavigation;
import com.devone.bot.core.bot.inventory.BotInventory;
import com.devone.bot.core.bot.speaker.BotSpeaker;
import com.devone.bot.core.bot.state.BotState;
import com.devone.bot.core.bot.task.active.move.BotMoveTask;
import com.devone.bot.core.bot.task.active.move.params.BotMoveTaskParams;
import com.devone.bot.core.bot.task.passive.BotTask;
import com.devone.bot.core.utils.BotUtils;
import com.devone.bot.core.utils.blocks.BotLocation;
import com.devone.bot.core.utils.logger.BotLogger;
import com.devone.bot.core.utils.world.BotWorldHelper;

import net.citizensnpcs.api.ai.Navigator;
import net.citizensnpcs.api.npc.NPC;

public class Bot {
    private boolean isEnabled = true;
    private boolean isLogging = true;
    private boolean allowPickupItems = true;

    public boolean isLogging() {
        return isLogging;
    }

    private final String id; // –£–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –±–æ—Ç–∞
    private NPC npc; // –°–≤—è–∑–∞–Ω–Ω—ã–π NPC
    private transient final BotBootstrap bootstrap; // –¶–∏–∫–ª –∂–∏–∑–Ω–∏ –±–æ—Ç–∞
    private final BotInventory inventory; // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –±–æ—Ç–∞
    private transient final BotManager botManager; // –ú–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç–æ–≤

    private transient BotBrain brain; // –ü–∞–º—è—Ç—å/–†–∞–Ω—Ç–∞–π–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    private transient BotSpeaker speaker; // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
    private transient BotState state;

    private BotNavigation navigation;

    public void setBrain(BotBrain brain) {
        this.brain = brain;
    }


    public void setState(BotState state) {
        this.state = state;
    }
    public BotSpeaker getSpeaker() {
        return speaker;
    }


    public void setSpeaker(BotSpeaker speaker) {
        this.speaker = speaker;
    }

    public BotNavigation getNavigation() {
        return navigation;
    }


    public void setNavigation(BotNavigation nav) {
        this.navigation = nav;
    }


    public BotState getState() {
        return state;
    }


    public Bot(String id, NPC an_npc, BotManager botManager) {
        this.id = id;
        this.npc = an_npc;
        this.botManager = botManager;
        this.inventory = new BotInventory(this);
        this.bootstrap = new BotBootstrap(this);
        this.brain = new BotBrain(this); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–Ω—Ç–∞–π–º —Å—Ç–∞—Ç—É—Å–∞
        this.speaker = new BotSpeaker(this); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BotCommunicator
        this.state = new BotState(this);
        this.navigation = new BotNavigation(this);

        BotLogger.debug("‚ûï", true, "Has been CREATED AND SPAWNED: " + id);
    }

    public static BotTask<?> getActiveTask(Bot bot) {
        return bot.getBootstrap().getTaskStackManager().getActiveTask();
    }

    public void setEnabled(boolean isEnabled) {
        this.isEnabled = isEnabled;
    }

    public boolean isEnabled() {
        return isEnabled;
    }

    public boolean isAllowPickupItems() {
        return allowPickupItems;
    }

    public void setAllowPickupItems(boolean pickupItems) {
        this.allowPickupItems = pickupItems;
    }

    public void setLogging(boolean isLogging) {
        this.isLogging = isLogging;
    }

    public NPC getNpc() {
        return npc;
    }

    public NPC getNPC() {
        return npc;
    }
    
    public Player getPlayer() {
        if (this.npc != null && this.npc.isSpawned()) {
            Entity entity = this.npc.getEntity();
            if (entity instanceof Player player) {
                return player;
            }
        }
        return null;
    }

    public UUID getUuid() {
        if (npc != null) {
            return npc.getUniqueId();
        } else {
            return new UUID(0, 0);
        }
    }

    public BotBrain getBrain() {
        return brain;
    }

    public void despawnNPC() {
        if (npc != null) {
            //stop all tasks!
            BotLogger.debug("ü§ñ", true, id + " ‚ûñ Stopping ALL Tasks");
            
            BotUtils.clearTasks(this);

            BotLogger.debug("ü§ñ", true, id + " ‚ûñ Despawning and Destroying NPC");
            npc.despawn();
            npc.destroy();
            npc = null;
        }
        BotLogger.debug("ü§ñ", true, id + " ‚ûñ Has been Despawned and Destroyed");
    }  

    public BotInventory getInventory() {
        return inventory;
    }

    public BotManager getBotManager() {
        return botManager;
    }

    public String getId() {
        return id;
    }

    public BotBootstrap getBootstrap() {
        return bootstrap;
    }

    public Entity getNPCEntity() {
        return npc.getEntity();
    }

    public Navigator getNPCNavigator() {
        return npc.getNavigator();
    }
    
    public boolean isNPCSpawned() {
        return npc.isSpawned();
    }

    public void pickupNearbyItems() {
        getInventory().pickupAll(this.allowPickupItems);
    }    

    public BotTask<?> getActiveTask() {
        BotTask<?> task = Bot.getActiveTask(this);
        return task;

    }
    // –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ BotUtils –∏–ª–∏ –≤ BotInventory
    public void checkAndSelfMove(Location target) {
        double pickupRadius = 2.0; // –†–∞–¥–∏—É—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        List<Entity> nearbyItems = getNPCEntity().getNearbyEntities(pickupRadius, pickupRadius, pickupRadius);
    
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä–æ–ø –≤ —Ä–∞–¥–∏—É—Å–µ 2 –±–ª–æ–∫–æ–≤ ‚Äî –±–æ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ
        if (!nearbyItems.isEmpty()) {
            BotLogger.debug("ü§ñ",true, getId()+" üîç –í —Ä–∞–¥–∏—É—Å–µ " + pickupRadius + " –±–ª–æ–∫–æ–≤ –æ—Ç –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, –æ—Å—Ç–∞—é—Å—å –Ω–∞ –º–µ—Å—Ç–µ.");
            return;
        }
    
        // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ä—è–¥–æ–º –Ω–µ—Ç, –¥–≤–∏–≥–∞–µ–º –±–æ—Ç–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ä–∞–∑—Ä—É—à–µ–Ω–Ω–æ–º—É –±–ª–æ–∫—É
        BotLocation loc = BotWorldHelper.worldLocationToBotLocation(target);
        BotLogger.debug("ü§ñ", true, getId() + " üì¶ –î—Ä–æ–ø –ø–æ–¥–æ–±—Ä–∞–Ω. –î–≤–∏–≥–∞–µ—Ç—Å—è –∫ —Ü–µ–ª–∏:" + loc);
        
        BotMoveTask mv_task = new BotMoveTask(this);
        BotMoveTaskParams mv_taskParams = new BotMoveTaskParams(loc);
        mv_task.setParams(mv_taskParams);

        BotUtils.pushTask(this, mv_task);
    }
}
