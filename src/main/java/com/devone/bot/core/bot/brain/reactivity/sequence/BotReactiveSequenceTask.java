package com.devone.bot.core.bot.brain.reactivity.sequence;

import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.bot.behaviour.task.BotTask;
import com.devone.bot.core.bot.behaviour.task.BotTaskAutoParams;
import com.devone.bot.core.bot.behaviour.task.params.BotTaskParams;
import com.devone.bot.core.bot.brain.logic.utils.logger.BotLogger;

import java.util.LinkedList;
import java.util.List;

public class BotReactiveSequenceTask extends BotTaskAutoParams<BotTaskParams> {

    private final LinkedList<BotTask<?>> sequence = new LinkedList<>();
    private BotTask<?> currentTask;

    public BotReactiveSequenceTask(Bot bot, List<BotTask<?>> tasks) {
        super(bot, null, BotTaskParams.class); // –ø–µ—Ä–µ–¥–∞—ë–º –ø—É—Å—Ç–æ–π –ø–∞—Ä–∞–º–µ—Ç—Ä + –∫–ª–∞—Å—Å
        this.sequence.addAll(tasks);
        setIcon("üì¶");
        setObjective("–†–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –∑–∞–¥–∞—á");
    }

    @Override
    public void execute() {
        if (currentTask == null || currentTask.isDone()) {
            if (sequence.isEmpty()) {
                BotLogger.debug("üì¶", isLogging(), bot.getId() + " ‚úÖ –í—Å–µ –∑–∞–¥–∞—á–∏ —Ü–µ–ø–æ—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã.");
                this.stop(); // –≤—Å—ë –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
                return;
            }

            // –ó–∞–±–∏—Ä–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
            currentTask = sequence.poll();
            BotLogger.debug("üì¶", isLogging(), bot.getId() + " ‚ñ∂ –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É: " + currentTask.getClass().getSimpleName());
            bot.getLifeCycle().getTaskStackManager().pushTask(currentTask);
        }
    }

    @Override
    public void stop() {
        currentTask = null;
        sequence.clear();
        BotLogger.debug("üì¶", isLogging(), bot.getId() + " ‚õî –¶–µ–ø–æ—á–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
        super.stop();
    }
}
