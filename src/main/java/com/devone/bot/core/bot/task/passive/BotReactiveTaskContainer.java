package com.devone.bot.core.bot.task.passive;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.bot.task.passive.params.BotTaskParams;
import com.devone.bot.core.bot.task.reactive.BotReactiveUtils;
import com.devone.bot.core.utils.logger.BotLogger;

public abstract class BotReactiveTaskContainer<T extends BotTaskParams> extends BotTaskAutoParams<T> {

    protected final List<BotTask<?>> subtasks = new ArrayList<>();
    protected boolean started = false;

    public BotReactiveTaskContainer(Bot bot, Class<T> paramClass) {
        super(bot, null, paramClass);
        setReactive(true); // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        setIcon("üì¶");
        setObjective("Reactive container for tasks");
    }

    @Override
    public void execute() {
        if (!started) {
            BotLogger.debug(getIcon(), true,
                    bot.getId() + " ‚ö° –ó–∞–ø—É—â–µ–Ω —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: " + this.getClass().getSimpleName());

            enqueue(bot); // üì¶ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏

            List<BotTask<?>> reversed = new ArrayList<>(subtasks);
            Collections.reverse(reversed);

            for (BotTask<?> task : reversed) {
                BotLogger.debug(getIcon(), true,
                        bot.getId() + " ‚ûï –ó–∞–ø—É—Å–∫ –ø–æ–¥–∑–∞–¥–∞—á–∏: " + task.getClass().getSimpleName());
                task.setReactive(true);
                bot.getTaskManager().pushTask(task);
            }

            started = true;

            return; // ‚è≥ –∂–¥–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥–∑–∞–¥–∞—á
        }

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º: –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏
        boolean allDone = subtasks.stream().allMatch(BotTask::isDone);

        if (allDone) {
            BotLogger.debug(getIcon(), true,
                    bot.getId() + " üßπ –í—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è: "
                            + this.getClass().getSimpleName());
            stop();
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é –¥–æ –∑–∞–ø—É—Å–∫–∞
     */
    public BotReactiveTaskContainer<T> add(BotTask<?> task) {
        if (started) {
            BotLogger.debug(getIcon(), true, bot.getId() + " ‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞: "
                    + task.getClass().getSimpleName());
            return this;
        }
        subtasks.add(task);
        return this;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–∑–∞–¥–∞—á
     */
    protected void enqueue(Bot bot) {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    }

    @Override
    public void stop() {
        done = true;

        super.stop();
        BotLogger.debug(getIcon(), true, bot.getId() + " üîö –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–Ω—è—Ç: " + this.getClass().getSimpleName());
    }
}
