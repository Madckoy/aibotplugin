package com.devone.bot.core.logic.task.decision;

import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.logic.task.BotTask;
import com.devone.bot.core.logic.task.decision.params.BotDecisionMakeTaskParams;
import com.devone.bot.core.logic.task.explore.BotExploreTask;
import com.devone.bot.utils.logger.BotLogger;

public class BotDecisionMakeTask extends BotTask {

    BotDecisionMakeTaskParams params = new BotDecisionMakeTaskParams();

    public BotDecisionMakeTask(Bot bot) {
        super(bot);
        setIcon(params.getIcon());
        setObjective(params.getObjective());
    }

    @Override

    public void execute() {
        // üìå –ù–∞—á–∞—Ç—å –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ
        BotLogger.info("üåê", this.isLogging(), bot.getId() + " –Ω–∞—á–∏–Ω–∞–µ—Ç –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ");
        BotExploreTask explore = new BotExploreTask(bot);
        bot.addTaskToQueue(explore);
        return;

    }

        /* 
    public void execute_old() {
        
        setObjective("Rolling a dice" );
  
        double rand = Math.random();

        int maxToCollect = 128;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
        if (!BotInventory.hasFreeInventorySpace(bot, BotMaterialUtils.dirtTypes) || BotInventory.hasEnoughBlocks(bot, BotMaterialUtils.dirtTypes, maxToCollect)) {
            bot.setAutoPickupEnabled(false);

            BotDropAllTask drop_task = new BotDropAllTask(bot, null);
            drop_task.setPaused(true);
            bot.addTaskToQueue(drop_task);
            
            BotCoordinate3D drop_off_loc = bot.getRuntimeStatus().getTargetLocation();
            
            // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –∫ —Ç–æ—á–∫–µ —Å–±—Ä–æ—Å–∞
            BotMoveTask moveTask = new BotMoveTask(bot);
            moveTask.configure(drop_off_loc);
            bot.addTaskToQueue(moveTask);

            BotLogger.info(this.isLogged(),"üì¶ " + bot.getId() + " –ò–¥—ë—Ç –∫ —Ç–æ—á–∫–µ —Å–±—Ä–æ—Å–∞: " + BotStringUtils.formatLocation(drop_off_loc));
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–µ–Ω—å –∏–ª–∏ –Ω–æ—á—å
        World world = bot.getNPCEntity().getWorld();
        long time = world.getTime();
        boolean isNight = (time >= 13000 && time <= 23000); // –ü—Ä–∏–º–µ—Ä–Ω–æ 13000 - –∑–∞–∫–∞—Ç, 23000 - —Ä–∞—Å—Å–≤–µ—Ç

        double huntChance = isNight ? 0.5 : 0.1; // 90% –Ω–æ—á—å—é, 10% –¥–Ω–µ–º

        if (rand < 0.1) { // 10% —à–∞–Ω—Å —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ-—Ç–æ –ø—Ä–æ –æ–∫—Ä—É–∂–∞—é—â–∏–π –º–∏—Ä
            BotLogger.info(this.isLogged(),"ü§ñ " + bot.getId() + " –ö–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –æ–±—Å—Ç–∞–Ω–æ–≤–∫—É.");
            bot.addTaskToQueue(new BotTalkTask(bot, null, BotTalkTask.TalkType.ENVIRONMENT_COMMENT));
            return;
        }


        if (rand < huntChance) {
            // ‚öîÔ∏è –û—Ö–æ—Ç–∞
            BotLogger.info(this.isLogged(),"‚öîÔ∏è " + bot.getId() + " –°–æ–±–∏—Ä–∞–µ—Ç—Å—è –Ω–∞ –æ—Ö–æ—Ç—É! (–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: " + huntChance * 100 + "%)");
           
            BotHuntMobsTask hunt_task = new BotHuntMobsTask(bot);
            //BotTaskHuntMobs config  = hunt_task.getConfig();
            Set<EntityType> a_targets = ((BotHuntTaskConfig) hunt_task.getConfig()).getTargetAggressiveMobs();
            Set<EntityType> p_targets = ((BotHuntTaskConfig) hunt_task.getConfig()).getTargetPassiveMobs();
            Set<EntityType> targets = isNight ? a_targets : p_targets;
            
            hunt_task.configure(targets, 20, true);
            bot.addTaskToQueue(hunt_task);
            BotLogger.info(this.isLogged(), "‚öîÔ∏è " + bot.getId() + " –ù–∞—á–∏–Ω–∞–µ—Ç –æ—Ö–æ—Ç—É –Ω–∞ " + (isNight ? "–∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –º–æ–±–æ–≤" : "–∂–∏–≤–æ—Ç–Ω—ã—Ö") + "!");

            return;
        }

        if (rand >= 0.6) {
            // üìå –ù–∞—á–∞—Ç—å –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ (40% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
            BotLogger.info(this.isLogged(), "üåê " + bot.getId() + " –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ.");
            BotExploreTask patrolTask = new BotExploreTask(bot);
            bot.addTaskToQueue(patrolTask);
            return;
        }


        if (rand < 0.8 && rand >= 0.5) {
            // ‚õè 30% —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É –∑–µ–º–ª–∏
            BotTaskBreakBlock breakTask = new BotTaskBreakBlock(bot);
        
            if (breakTask.isEnabled) {
                breakTask.configure(dirtTypes, maxToCollect, BotConstants.DEFAULT_SCAN_RANGE, true);
                bot.addTaskToQueue(breakTask);
            }
        
            return;
        }


        if (rand < 0.6 && rand >= 0.2) {  
            // ‚õè 30% —à–∞–Ω—Å –Ω–∞—á–∞—Ç—å –¥–æ–±—ã—á—É –≤—Å–µ–≥–æ –ø–æ–¥—Ä—è–¥ –≤–Ω–∏–∑
            BotBreakAnyDownwardTask breakTask = new BotBreakAnyDownwardTask(bot);
        
            if (breakTask.isEnabled) {


                breakTask.configure(null, 
                                    maxToCollect, 
                                    breakTask.getOuterRadius(),
                                    breakTask.getInnerRadius(),  
                                    true, 
                                    true,
                                    AxisDirection.DOWN, 
                                    breakTask.getOffsetX(),
                                    breakTask.getOffsetY(),
                                    breakTask.getOffsetZ(), 
                                    breakTask.getPatternName());

                bot.addTaskToQueue(breakTask);
            }    
        
            return;
        }

        if (rand < 0.2) {
            // üçπ 20% —à–∞–Ω—Å –æ—Å—Ç–∞—Ç—å—Å—è –≤ IDLE
            
            BotIdleTask idle = new BotIdleTask(bot, null);
            bot.addTaskToQueue(idle);

            BotLogger.info(this.isLogged(),"üçπ" + bot.getId() + " –æ—Å—Ç–∞—ë—Ç—Å—è –≤ IDLE.");
            return;
        }
    }
    *****/
}
