package com.devone.bot.core.logic.task.playerlinked.chase;

import org.bukkit.Bukkit;

import com.devone.bot.AIBotPlugin;
import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.logic.task.BotTask;
import com.devone.bot.core.logic.task.params.IBotTaskParams;
import com.devone.bot.core.logic.task.playerlinked.chase.params.BotChaseTaskParams;
import com.devone.bot.utils.BotUtils;
import com.devone.bot.utils.blocks.BotBlockData;
import com.devone.bot.utils.logger.BotLogger;

public class BotChaseTargetTask extends BotTask {

    private BotBlockData target;

    private final BotChaseTaskParams params = new BotChaseTaskParams();
    @SuppressWarnings("unused")
    private final double chaseDistance = params.getChaseDistance();
    @SuppressWarnings("unused")
    private final double attackRange = params.getAttackRange();

    private final int updateIntervalTicks = 10; // –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫

    public BotChaseTargetTask(Bot bot, BotBlockData target) {
        super(bot);
        this.target = target;
        setIcon(params.getIcon());
        setObjective(params.getObjective());
        bot.getRuntimeStatus().setTargetLocation(target.getCoordinate3D());   
    }

    public BotChaseTargetTask configure(IBotTaskParams params) {
        super.configure(params);
        this.params.copyFrom(params);
        icon = this.params.getIcon();
        objective = this.params.getObjective();
        return this;
    }

    @Override
    public void execute() {
        if (target == null) {
            BotLogger.info("üíÄ", this.isLogging(),"–¶–µ–ª—å –∏—Å—á–µ–∑–ª–∞. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.");
            this.stop();
            return;
        }

        setObjective(params.getObjective()  + ": " + target.type);
        
        updateFollowLogic();

        // –ü–æ–≤—Ç–æ—Ä–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        Bukkit.getScheduler().runTaskLater(AIBotPlugin.getInstance(), this::execute, updateIntervalTicks);

        // –ó–∞—â–∏—Ç–∞ –æ—Ç –≤–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        if (getElapsedTime() > 120000) {
            BotLogger.info("üíÄ", this.isLogging(),"–ù–µ –º–æ–≥—É –¥–æ–±—Ä–∞—Ç—å—Å—è –¥–æ —Ü–µ–ª–∏. –ó–∞–≤–µ—Ä—à–∞—é –ø—Ä–µ—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.");
            this.stop();
        }
    }

    private void updateFollowLogic() {

        BotUtils.lookAt(bot, target.getCoordinate3D());
        
        BotLogger.info("üèÉ", this.isLogging(),"Chasing: " + target.type );

        this.stop();

    }

    public BotBlockData getFollowingObject() {
        return this.target;
    }

}
