package com.devone.bot.core.logic.lifecycle;

import org.bukkit.Bukkit;

import com.devone.bot.AIBotPlugin;
import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.logic.tasks.BotTaskStackManager;
import com.devone.bot.core.logic.tasks.decision.BotDecisionMakeTask;
import com.devone.bot.utils.logger.BotLogger;
import com.devone.bot.utils.server.ServerUtils;

public class BotLifeCycle {
    private final Bot bot;
    private final BotTaskStackManager taskStackManager;
    private boolean idleAdded = false; // ‚úÖ –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å IdleActivity –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑

    public BotLifeCycle(Bot bot) {
        this.bot = bot;
        this.taskStackManager = new BotTaskStackManager(bot);

        startLifeCycle();
    }

    private void startLifeCycle() {
        BotLogger.info(true, "üé≤ –ó–∞–ø—É—Å–∫–∞–µ–º LifeCycle –¥–ª—è –±–æ—Ç–∞ " + bot.getId());

        Bukkit.getScheduler().runTaskTimer(AIBotPlugin.getInstance(), () -> {

            update();

        }, 0L, 2L); // 2 —Ç–∏–∫–∞ = 0.1 —Å–µ–∫—É–Ω–¥—ã (–≤ 10 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º –±—ã–ª–æ!)
    }

    public void update() {
        if (ServerUtils.isServerStopping()) return;

        if (!taskStackManager.isEmpty()) {
            idleAdded = false; // ‚úÖ –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
            taskStackManager.updateActiveTask();
        } else {
            if (!idleAdded) {
                BotLogger.info(true, "üò¥ –ë–æ—Ç " + bot.getId() + " –ë–µ–∑ –∑–∞–¥–∞—á. –î–æ–±–∞–≤–ª—è–µ–º IdleTask.");
                
                taskStackManager.pushTask(new BotDecisionMakeTask(bot));
                idleAdded = true; // ‚úÖ –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ IdleActivity —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞
            }
        }
    }

    public BotTaskStackManager getTaskStackManager() {
        return taskStackManager;
    }
}
