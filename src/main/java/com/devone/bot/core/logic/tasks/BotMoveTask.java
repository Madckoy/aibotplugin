package com.devone.bot.core.logic.tasks;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.block.Block;
import org.bukkit.scheduler.BukkitTask;

import com.devone.bot.AIBotPlugin;
import com.devone.bot.core.Bot;
import com.devone.bot.core.logic.tasks.configs.BotMoveTaskConfig;
import com.devone.bot.utils.*;

public class BotMoveTask extends BotTask {

    private BukkitTask taskHandle;
    private static final BotMoveTaskConfig config = new BotMoveTaskConfig();
    private final float speedMultiplier = config.getSpeedMultiplier();

    private BotCoordinate3D lastPosition; // üÜï –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –ø—Ä–æ—à–ª—É—é –ø–æ–∑–∏—Ü–∏—é
    private long lastMoveTime; // üÜï –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è

    public BotMoveTask(Bot bot) {
        super(bot, "üèÉüèª‚Äç‚ôÇÔ∏è‚Äç‚û°Ô∏è");
        this.lastPosition = bot.getRuntimeStatus().getCurrentLocation();
        this.lastMoveTime = System.currentTimeMillis();

        setObjective("Move" );
        isLogged = config.isLogged();
    }

    @Override
    public BotTask configure(Object... params) {
        super.configure(params);

        if (params.length == 1 && params[0] instanceof BotCoordinate3D) {
            BotCoordinate3D loc = (BotCoordinate3D) params[0];
            
            bot.getRuntimeStatus().setTargetLocation(loc);

        } else {
            BotLogger.info(isLogged(),bot.getId() + " ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è `BotTaskMove`!");
            this.stop();
        }

        return this;
    }

    @Override
    public void execute() {
        if (taskHandle != null && !taskHandle.isCancelled()) {
            //BotLogger.info(bot.getId() + " ‚è≥ –¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –∂–¥—É [ID: " + uuid + "]");
        } else {
            if (isDone || isPaused) return;
        }

        if (bot.getRuntimeStatus().getTargetLocation() == null) {
            this.stop();
            return;
        }

        if (bot.getNPCNavigator().isNavigating()) {
            BotLogger.info(this.isLogged(), " ‚ö†Ô∏è "+ bot.getId() + " –í –¥–≤–∏–∂–µ–Ω–∏–∏...");
        }

        Location targetLocation = BotWorldHelper.getWorldLocation(bot.getRuntimeStatus().getTargetLocation());

        if (!bot.getNPCNavigator().canNavigateTo(targetLocation)) {
            BotLogger.info(this.isLogged(), bot.getId() + " üõë Target Location is not reachable. Stopping where I am.[ID: " + uuid + "]");
            this.stop();
            return;
        }

        Block targetBlock = BotWorldHelper.getBlockAt(bot.getRuntimeStatus().getTargetLocation());

        String block_name = BotUtils.getBlockName(targetBlock);
        
        setObjective("Navigating to  " + block_name);

        taskHandle = Bukkit.getScheduler().runTaskTimer(AIBotPlugin.getInstance(), () -> {
            if (isDone) {
                if (taskHandle != null) {
                    taskHandle.cancel();
                    //BotLogger.info(bot.getId() + " üõë Move task –∑–∞–≤–µ—Ä—à—ë–Ω, —Ç–∞–π–º–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. [ID: " + uuid + "]");
                }
                return;
            }

            // üÜï –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–≤–∏–≥–∞–µ—Ç—Å—è –ª–∏ –±–æ—Ç –∏–ª–∏ –∑–∞—Å—Ç—Ä—è–ª
            if (bot.getRuntimeStatus().getCurrentLocation().equals(lastPosition)) {
                // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ > 10 —Å–µ–∫ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å ‚Üí –±–æ—Ç –∑–∞—Å—Ç—Ä—è–ª
                if (System.currentTimeMillis() - lastMoveTime > 10_000) {
                    BotLogger.warn(this.isLogged(),bot.getId() + " ‚ö†Ô∏è –ë–æ—Ç –∑–∞—Å—Ç—Ä—è–ª! –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—É—Ç—å...");
                    taskHandle.cancel();
                    this.stop();
                    return;
                }
            } else {
                // –ï—Å–ª–∏ –±–æ—Ç —Å–¥–≤–∏–Ω—É–ª—Å—è ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                lastPosition = bot.getRuntimeStatus().getCurrentLocation();
                lastMoveTime = System.currentTimeMillis();
            }

            if (BotNavigationUtils.hasReachedTarget(BotCoordinate3DHelper.convertFrom(targetLocation), bot.getRuntimeStatus().getTargetLocation())) {
                
                bot.getRuntimeStatus().setTargetLocation(null);

                this.stop();
                //BotLogger.info(bot.getId() + " üéØ –î–æ—Å—Ç–∏–≥ —Ü–µ–ª–∏! –†–µ–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è: " + bot.getNPCEntity().getLocation() + " [ID: " + uuid + "]");
                return;
            } else {
                if (!bot.getNPCNavigator().canNavigateTo(targetLocation)) {
                    //BotLogger.info(bot.getId() + " ‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ø—É—Ç—å, Stopping where I am" + " [ID: " + uuid + "]");
                    taskHandle.cancel();
                    this.stop();
                    return;
                } else {
                    if (bot.getNPCEntity() == null) {
                        //BotLogger.info(bot.getId() + " üëª –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å—É—â–Ω–æ—Å—Ç—å—é! –í –∑–∞–¥–∞—á–µ ID: " + uuid + "]");
                        taskHandle.cancel();
                        this.stop();

                    } else {
                        BotLogger.info(this.isLogged(), bot.getId() + " üö∂ –î–≤–∏–≥–∞—é—Å—å –≤ " + BotStringUtils.formatLocation(bot.getRuntimeStatus().getTargetLocation()) + " [ID: " + uuid + "]");

                        bot.getNPCNavigator().getDefaultParameters().speedModifier(speedMultiplier);
                        
                        //bot.getRuntimeStatus().getCurrentLocation().setDirection(bot.getRuntimeStatus().getTargetLocation().toVector().subtract(bot.getRuntimeStatus().getCurrentLocation().toVector()));
                        
                        bot.getNPCNavigator().setTarget(targetLocation);

                    }
                }
            }
        }, 0L, 40L);
    }

    @Override
    public void stop() {
        this.isDone = true;
        BotLogger.info(this.isLogged(), bot.getId() + " üõë Move task –∑–∞–≤–µ—Ä—à—ë–Ω [ID: " + uuid + "]");  

    }
}
