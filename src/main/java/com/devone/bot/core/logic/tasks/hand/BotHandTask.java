package com.devone.bot.core.logic.tasks.hand;

import org.bukkit.Bukkit;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.entity.Entity;
import org.bukkit.entity.LivingEntity;
import org.bukkit.entity.Player;
import org.bukkit.scheduler.BukkitRunnable;

import com.devone.bot.AIBotPlugin;
import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.logic.tasks.BotTask;
import com.devone.bot.core.logic.tasks.hand.params.BotHandTaskParams;
import com.devone.bot.core.logic.tasks.params.BotTaskParams;
import com.devone.bot.core.logic.tasks.params.IBotTaskParams;
import com.devone.bot.utils.BotUtils;
import com.devone.bot.utils.blocks.BotBlockData;
import com.devone.bot.utils.blocks.BotCoordinate3D;
import com.devone.bot.utils.logger.BotLogger;
import com.devone.bot.utils.world.BotWorldHelper;


public class BotHandTask extends BotTask {

    private BotBlockData target;
    private double damage = 5.0;
    private boolean isLogged = true;

    public BotHandTask(Bot bot) {
        super(bot, "‚úãüèª");
        setObjective("Hit the target");
        this.isLogged = true;
    }

    public BotHandTask(Bot bot, String name) {
        super(bot,name);
        setObjective("Hit the target");
        this.isLogged = true;
    }

    @Override
    public BotHandTask configure(IBotTaskParams params) {

        super.configure((BotTaskParams) params);

        if(params instanceof BotHandTaskParams) {
            BotHandTaskParams useHandParams = (BotHandTaskParams) params;
 
            this.damage = useHandParams.getDamage();
            this.target = useHandParams.getTarget();
            this.isLogged = useHandParams.isLogged();
            bot.getRuntimeStatus().setTargetLocation(target.getCoordinate3D());

        } else {
            BotLogger.info(this.isLogged(),bot.getId() + " ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è `BotUseHandTask`!");
            this.stop();
        }    
        return this;
    }


    @Override
    public void execute() {
        if (target == null) {
            BotLogger.info(this.isLogged(), bot.getId() + " ‚ùå –¶–µ–ª—å –¥–ª—è BotHandTask –Ω–µ –∑–∞–¥–∞–Ω–∞");
            this.stop();
            return;
        }

        BotCoordinate3D faceTarget = target;
        Block faceBlock = BotWorldHelper.getBlockAt(faceTarget);
        setObjective("Hitting: " + BotUtils.getBlockName(faceBlock)+" at "+faceTarget);

        new BukkitRunnable() {
            @Override
            public void run() {
                if (isDone || bot.getNPCEntity() == null) {
                    stop();
                    cancel();
                    return;
                }

                turnToTarget(target);
                animateHand(); 

                if (target.uuid != null) {
                    Entity entity = Bukkit.getEntity(target.uuid);
                    if (!(entity instanceof LivingEntity living) || living.isDead()) {
                        BotLogger.info(isLogged, bot.getId() + " ‚úÖ –¶–µ–ª—å –º–µ—Ä—Ç–≤–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–≤–µ—Ä—à–∞–µ–º.");
                        stop();
                        cancel();
                        return;
                    }

                    living.damage(damage, bot.getNPCEntity());

                    BotLogger.info(isLogged, bot.getId() + " ‚úãüèª –£–¥–∞—Ä–∏–ª –º–æ–±–∞: " + living.getType());

                } else {

                    Block block = BotWorldHelper.getBlockAt(target);
                    if (block == null || block.getType() == Material.AIR) {
                        BotLogger.info(isLogged, bot.getId() + " ‚úÖ –ë–ª–æ–∫ —Ä–∞–∑—Ä—É—à–µ–Ω. –ó–∞–≤–µ—Ä—à–∞–µ–º.");
                        stop();
                        cancel();
                        return;
                    }

                    BotUtils.playBlockBreakEffect(block.getLocation());
                    block.breakNaturally();

                    BotLogger.info(isLogged, bot.getId() + " ‚úãüèª –£–¥–∞—Ä–∏–ª –±–ª–æ–∫: " + block.getType());
                }
            }
        }.runTaskTimer(AIBotPlugin.getInstance(), 0L, 10L);
    }

    private void turnToTarget(BotCoordinate3D target) {
        
        // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–≤–æ—Ä–æ—Ç —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
        Bukkit.getScheduler().runTaskLater(AIBotPlugin.getInstance(), () -> {
            BotUtils.lookAt(bot, target);
        }, 1L); // ‚úÖ –ß–µ—Ä–µ–∑ —Ç–∏–∫, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ

        BotLogger.info(this.isLogged(), "üîÑ TURNING: " + bot.getId() + " to look at the target: " + target);
    }

    private void animateHand() {
        if (bot.getNPCEntity() instanceof Player playerBot) {
            playerBot.swingMainHand();
            BotLogger.info(this.isLogged(), "‚úãüèª –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
        } else {
            BotLogger.info(this.isLogged(), "‚úãüèª –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –±–æ—Ç ‚Äî –Ω–µ –∏–≥—Ä–æ–∫");
        }
    }

    public void stop() {
        isDone = true;
    }


}
