package com.devone.bot.core.logic.task.brain;

import java.util.List;
import java.util.Optional;
import java.util.function.Supplier;

import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.bot.blocks.BotBlockData;
import com.devone.bot.core.bot.blocks.BotLocation;
import com.devone.bot.core.bot.brain.behaviour.BotBehaviorSelector;
import com.devone.bot.core.bot.brain.behaviour.BotTaskCandidate;
import com.devone.bot.core.bot.brain.behaviour.BotTaskCandidatesFactory;
import com.devone.bot.core.bot.scene.BotSceneData;
import com.devone.bot.core.logic.navigation.BotNavigationPlannerWrapper;
import com.devone.bot.core.logic.navigation.scene.BotSceneContext;
import com.devone.bot.core.logic.navigation.selectors.BotBlockSelector;
import com.devone.bot.core.logic.task.BotTask;
import com.devone.bot.core.logic.task.BotTaskAutoParams;
import com.devone.bot.core.logic.task.IBotTaskParameterized;
import com.devone.bot.core.logic.task.brain.params.BotBrainTaskParams;
import com.devone.bot.core.logic.task.excavate.BotExcavateTask;
import com.devone.bot.core.logic.task.excavate.params.BotExcavateTaskParams;
import com.devone.bot.core.logic.task.idle.BotIdleTask;
import com.devone.bot.core.logic.task.sonar.BotSonar3DTask;
import com.devone.bot.core.logic.task.teleport.BotTeleportTask;
import com.devone.bot.core.logic.task.teleport.params.BotTeleportTaskParams;
import com.devone.bot.utils.logger.BotLogger;
import com.devone.bot.utils.world.BotWorldHelper;

public class BotBrainTask extends BotTaskAutoParams<BotBrainTaskParams> {

    public BotBrainTask(Bot bot) {
        super(bot, null, BotBrainTaskParams.class);
    }

    @Override
    public IBotTaskParameterized<BotBrainTaskParams> setParams(BotBrainTaskParams params) {
        if (params == null) {
            throw new IllegalArgumentException("BotBrainTask: setParams(...) –ø–æ–ª—É—á–∏–ª null");
        }
    
        super.setParams(params); // üîë –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É–ø–µ—Ä–∫–ª–∞—Å—Å
    
        // üéØ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        setIcon(params.getIcon() != null ? params.getIcon() : "üß†");
        setObjective(params.getObjective() != null ? params.getObjective() : "Think");
    
        // üéØ –í–∏–∑—É–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Ñ–ª–∞–≥–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        BotLogger.debug("üß† BotBrainTask", isLogging(), bot.getId() + " –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã: " +
            "explore=" + params.isAllowExploration() + ", " +
            "excavate=" + params.isAllowExcavation() + ", " +
            "violence=" + params.isAllowViolence() + ", " +
            "teleport=" + params.isAllowTeleport()
        );
    
        return this;
    }

    @Override
    public void execute() {
        BotLogger.info(icon, this.isLogging(), "The bot "+ bot.getId() + " is making a decision...");
        //
        int thinkingTicks = bot.getBrain().getThinkingTicks();

        if (thinkingTicks > 50) {
            BotLogger.warn(icon, this.isLogging(), bot.getId() + 
                " üß† –ë–æ—Ç –¥—É–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ (" + thinkingTicks + " —Ç–∏–∫–æ–≤). –°–±—Ä–æ—Å –≤ Idle.");
            
            push(bot, new BotIdleTask(bot));
            bot.getBrain().resetThinkingCycle(); // —Å–±—Ä–æ—Å–∏–º —Å—á—ë—Ç—á–∏–∫
            return; // –≤—ã—Ö–æ–¥–∏–º –∏–∑ execute()
        }
        //
        bot.getBrain().markThinkingCycle();
        //
        //long currentTime = System.currentTimeMillis();
        //
        long removed = bot.getBrain().getMemory().cleanup(params.getMemoryExpirationMillis());
        
        BotLogger.info(icon, this.isLogging(), bot.getId() + " Removed outdated navigation points: " + removed);
        
        //
        // –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º—Å—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –º–∏—Ä–∞
        //
        //
        //if(currentTime-lastScanTime > 1000) {
            BotSonar3DTask sonar = new BotSonar3DTask(bot);
            sonar.execute();
            System.currentTimeMillis();
            //return;
        //}
        // üí° –ë–ª–æ–∫–∏—Ä—É–µ–º –º—ã—à–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ü–µ–Ω–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞
        if (bot.getBrain().getMemory().getSceneData() == null) {
            BotLogger.info(icon, isLogging(), bot.getId() + " ‚õî –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...");
            return;
        }
        //
        // üìå  Start Thinking
        //
        Runnable decision = determineBehaviorScenario(bot);
        
        if (decision != null) {
            decision.run();
        }
        //
        //
        //
        return;
    }
    
    private void push(Bot bot, BotTask<?> task) {
        bot.getLifeCycle().getTaskStackManager().pushTask(task);
        bot.getBrain().resetThinkingCycle();
        BotLogger.info(icon, this.isLogging(), "The task is pushed to stack ");
    }

    private Runnable determineBehaviorScenario(Bot bot) {
        boolean stuck = bot.getState().isStuck();
    
        if (stuck) {
            Optional<Runnable> unstuck = tryUnstuckStrategy(bot);
            if (unstuck.isPresent()) return unstuck.get();
    
            return () -> {
                BotLogger.info(icon, isLogging(), bot.getId() + " üí§ –ë–æ—Ç –∑–∞—Å—Ç—Ä—è–ª. –£—Ö–æ–¥–∏–º –≤ Idle.");
                push(bot, new BotIdleTask(bot));
            };
        }
    
        Runnable weighted = pickWeightedTask(bot);
        if (weighted != null) return weighted;
    
        return () -> {
            BotLogger.info(icon, isLogging(), bot.getId() + " üí§ –ù–µ—Ç –∑–∞–¥–∞—á. –£—Ö–æ–¥–∏–º –≤ Idle.");
            push(bot, new BotIdleTask(bot));
        };
    }
    

    private Runnable pickWeightedTask(Bot bot) {
        List<BotTaskCandidate> candidates = BotTaskCandidatesFactory.createCandidates(bot, params);

        Optional<Runnable> selected = BotBehaviorSelector.selectWeightedRandom(candidates);

        return selected.orElse(null);
    }
    
    

    private Optional<Runnable> tryUnstuckStrategy(Bot bot) {
        int strategy = params.getUnstuckStrategy();
    
        switch (strategy) {
            case 1: // Excavation
                if (params.isAllowExcavation()) {
                    return Optional.of(() -> {
                        BotLogger.info(icon, this.isLogging(), bot.getId() + " The bot is stuck. Starting Excavation to unstuck");
                        BotExcavateTask task = new BotExcavateTask(bot);
                        BotExcavateTaskParams params = new BotExcavateTaskParams();
                        params.setOffsetY(params.getOuterRadius()-1);



                        params.setPatternName("cone.yml");
                        task.setParams(params);
                        push(bot, task);
                    });
                } else {
                    return Optional.empty();
                }
    
            case 2: // Teleport with fallback
                if (params.isAllowTeleport()) {
                    BotLocation botPos = bot.getNavigation().getLocation();
                    BotSceneData sceneData = bot.getBrain().getMemory().getSceneData();
                    BotSceneContext context = BotNavigationPlannerWrapper.getSceneContext(sceneData.blocks, sceneData.entities, botPos);
                    
                    // tryTeleportFallback —Å–∞–º –≤–µ—Ä–Ω—ë—Ç Optional<Runnable>
                    return tryTeleportFallback(bot, context);
                } else {
                    return Optional.empty();
                }
    
            default:
                return Optional.of(() -> {
                    BotLogger.info(icon, isLogging(), bot.getId() + " Falling back to idle behavior.");
                    push(bot, new BotIdleTask(bot));
                });
        }
    }

    private Optional<Runnable> tryTeleportFallback(Bot bot, BotSceneContext context) {
        List<Supplier<Optional<Runnable>>> attempts = List.of(
            () -> tryTeleportToReachable(bot, context.reachable),
            () -> tryTeleportToNavigable(bot, context.navigable),
            () -> tryTeleportToEntity(bot, context.entities),
            () -> tryTeleportToWalkable(bot, context.walkable),
            () -> tryTeleportToSpawn(bot)
        );

        for (Supplier<Optional<Runnable>> attempt : attempts) {
            Optional<Runnable> result = attempt.get();
            if (result.isPresent()) return result;
        }

        BotLogger.info("üö´", this.isLogging(), bot.getId() + " All teleport attempts were failed.");
        return Optional.empty();
    }

    private Optional<Runnable> tryTeleportToReachable(Bot bot, List<BotBlockData> data){
        if(data!=null && data.size()>0){
            return Optional.empty();
        }

        BotBlockData block = BotBlockSelector.pickRandomTarget(data);

        // –í–æ–∑–≤—Ä–∞—Ç –∑–∞–¥–∞—á–∏ –≤ –≤–∏–¥–µ Runnable
        return Optional.of(() -> {
                    BotLogger.info("‚ö°", this.isLogging(), "–¢–µ–ª–µ–ø–æ—Ä—Ç: –ª—é–±–∞—è –¥–æ—Å—Ç–∏–∂–∏–º–∞—è —Ç–æ—á–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:" + bot.getId() + block);
                    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    BotTeleportTaskParams tpParams = new BotTeleportTaskParams(block);
                    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    BotTeleportTask tpTask = new BotTeleportTask(bot, null);
                    tpTask.setParams(tpParams); // –¢–µ–ø–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è
                    push(bot, tpTask);
            });
    }

    private Optional<Runnable> tryTeleportToNavigable(Bot bot, List<BotBlockData> data){
        if(data!=null && data.size()>0){
            return Optional.empty();
        }

        BotBlockData block = BotBlockSelector.pickRandomTarget(data);

        // –í–æ–∑–≤—Ä–∞—Ç –∑–∞–¥–∞—á–∏ –≤ –≤–∏–¥–µ Runnable
        return Optional.of(() -> {
                    BotLogger.info("‚ö°", this.isLogging(), "–¢–µ–ª–µ–ø–æ—Ä—Ç: –ª—é–±–∞—è —Ç–æ—á–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:" + bot.getId() + block);
                    // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    BotTeleportTaskParams tpParams = new BotTeleportTaskParams(block);
                    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
                    BotTeleportTask tpTask = new BotTeleportTask(bot, null);
                    tpTask.setParams(tpParams); // –¢–µ–ø–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è
                    push(bot, tpTask);
        });
    }

    
    private Optional<Runnable> tryTeleportToWalkable(Bot bot, List<BotBlockData> data){
        if(data!=null && data.size()>0){
            return Optional.empty();
        }

        BotBlockData block = BotBlockSelector.pickRandomTarget(data);

        // –í–æ–∑–≤—Ä–∞—Ç –∑–∞–¥–∞—á–∏ –≤ –≤–∏–¥–µ Runnable
        return Optional.of(() -> {
            BotLogger.info("‚ö°", this.isLogging(), "–¢–µ–ª–µ–ø–æ—Ä—Ç: –ª—é–±–∞—è –ø—Ä–æ—Ö–æ–¥–∏–º–∞—è —Ç–æ—á–∫–∞ :" + bot.getId() + block);
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            BotTeleportTaskParams tpParams = new BotTeleportTaskParams(block);
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            BotTeleportTask tpTask = new BotTeleportTask(bot, null);
            tpTask.setParams(tpParams); // –¢–µ–ø–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è
            push(bot, tpTask);
        });
    }

    private Optional<Runnable> tryTeleportToEntity(Bot bot, List<BotBlockData> data){
        if(data!=null && data.size()>0){
            return Optional.empty();
        }

        BotBlockData block = BotBlockSelector.pickRandomTarget(data);

        // –í–æ–∑–≤—Ä–∞—Ç –∑–∞–¥–∞—á–∏ –≤ –≤–∏–¥–µ Runnable
        return Optional.of(() -> {
            BotLogger.info("‚ö°", this.isLogging(), "–¢–µ–ª–µ–ø–æ—Ä—Ç: —Å—É—â–µ—Å—Ç–≤–æ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:" + bot.getId() + block);
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            BotTeleportTaskParams tpParams = new BotTeleportTaskParams(block);
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            BotTeleportTask tpTask = new BotTeleportTask(bot, null);
            tpTask.setParams(tpParams); // –¢–µ–ø–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è
            push(bot, tpTask);
        });
    }

    private Optional<Runnable> tryTeleportToSpawn(Bot bot){
        BotLocation spawnLocation = BotWorldHelper.getWorldSpawnLocation();
        // –í–æ–∑–≤—Ä–∞—Ç –∑–∞–¥–∞—á–∏ –≤ –≤–∏–¥–µ Runnable
        return Optional.of(() -> {
            BotLogger.info("‚ö°", this.isLogging(), "–¢–µ–ª–µ–ø–æ—Ä—Ç: —Ç–æ—á–∫–∞ —Ä–µ—Å–ø–∞–≤–Ω–∞:" + bot.getId() + spawnLocation);
            // –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            BotTeleportTaskParams tpParams = new BotTeleportTaskParams(spawnLocation);
            // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            BotTeleportTask tpTask = new BotTeleportTask(bot, null);
            tpTask.setParams(tpParams); // –¢–µ–ø–µ—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è
            push(bot, tpTask);
        });
    }

}