package com.devone.bot.core.logic.task.excavate.patterns.generator;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.Collectors;

import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.logic.task.excavate.patterns.IBotExcavatePattern;
import com.devone.bot.core.logic.task.excavate.patterns.generator.params.BotExcavatePatternGenerationParams;
import com.devone.bot.utils.blocks.BotCoordinate3D;
import com.devone.bot.utils.blocks.BotCoordinateComparators;
import com.devone.bot.utils.blocks.BotAxisDirection.AxisDirection;
import com.devone.bot.utils.logger.BotLogger;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –∏–∑ YAML.
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é Java-–ª–æ–≥–∏–∫—É.
 */
public class BotExcavateInterpretedYamlPattern implements IBotExcavatePattern {

    private final Path yamlPath;

    private BotExcavateCoordinatesGenerator generator;

    private boolean initialized = false;

    private AxisDirection breakDirection = null;
    private int offsetX, offsetY, offsetZ, outerRadius, innerRadius;  

    private final Queue<BotCoordinate3D> blocksToBreak = new LinkedList<>();
    
        public BotExcavateInterpretedYamlPattern(Path path) {
            this.yamlPath = path;
        }
     
        @Override    
        public IBotExcavatePattern configure(int offsetX, int offsetY, int offsetZ, int outerRadius, int innerRadius, AxisDirection breakDirection) {

            this.offsetX = offsetX;
            this.offsetY = offsetY;
            this.offsetZ = offsetZ;
            
            this.outerRadius = outerRadius;
            this.innerRadius = innerRadius;

            this.breakDirection = breakDirection;

    
            BotLogger.info("üõ†Ô∏è", true, "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É YAML-–ø–∞—Ç—Ç–µ—Ä–Ω–∞: " + yamlPath);
    
            try (InputStream inputStream = Files.newInputStream(yamlPath)) {
                this.generator = BotExcavateCoordinatesGenerator.loadYmlFromStream(inputStream);
            if (this.generator != null) {
                BotLogger.info("‚úÖ", true, "–ü–∞—Ç—Ç–µ—Ä–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ YAML: " + yamlPath.getFileName());
            } else {
                BotLogger.info("‚ùå", true, "loadFromYaml() –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ñ–∞–π–ª–∞: " + yamlPath);
            }
        } catch (IOException e) {
            BotLogger.info("‚ùå", true, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ YAML-—Ñ–∞–π–ª–∞: " + yamlPath + " ‚Äî " + e.getMessage());
        }

        return this;
    }

    public BotCoordinate3D findNextBlock(Bot bot ) {
        if (this.generator == null) {
            BotLogger.info("üö® ", true, "–ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! YAML: " + yamlPath);
            return null;
        }

        if (!initialized) {
            BotLogger.info("üîÅ ", true, "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: " + yamlPath);
                                                                     
            BotExcavatePatternGenerationParams params = new BotExcavatePatternGenerationParams(bot.getRuntimeStatus().getCurrentLocation().x, 
                                                                               bot.getRuntimeStatus().getCurrentLocation().y, 
                                                                               bot.getRuntimeStatus().getCurrentLocation().z, 
                                                                               offsetX, offsetY, offsetZ, outerRadius, innerRadius);

            BotLogger.info("Params:", true, params.toString());                                                                  

            List<BotCoordinate3D> inner_points = generator.generateInnerPoints(params);
            
            String pointsLog = inner_points.stream()
            .map(p -> String.format("(%d, %d, %d)", p.x, p.y, p.z))
            .collect(Collectors.joining(", "));
        
            BotLogger.info("üî¢", true, String.format("Generated %d points: [%s]", inner_points.size(), pointsLog));        

            boolean isInverted = generator.getInverted();

            Set<BotCoordinate3D> result = new HashSet<>();

            if(isInverted) {
                List<BotCoordinate3D> all =  generator.generateOuterPoints(params);
                result.addAll(all);  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–µ—Å—å –∫—É–±
                result.removeAll(inner_points);  // –£–¥–∞–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω—é—é –æ–±–ª–∞—Å—Ç—å
            } else {
                // –ï—Å–ª–∏ –Ω–µ inverted, –ø—Ä–æ—Å—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —è–º—É
                result.addAll(inner_points);  // –¢–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ–±–ª–∞—Å—Ç—å
            }

            
            List<BotCoordinate3D> toBeRemoved = new ArrayList<>(result);

            // ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            Comparator<BotCoordinate3D> sortingComparator = BotCoordinateComparators.byAxisDirection(breakDirection);
            if (sortingComparator != null) {
                toBeRemoved.sort(sortingComparator);
            }
                                  
            //toBeRemoved.removeAll(kept);

            if (toBeRemoved != null && !toBeRemoved.isEmpty()) {

                blocksToBreak.addAll(toBeRemoved);
                
                BotLogger.info("‚úÖ", true, "Added " + blocksToBreak.size() + " coordinates");
            } else {
                
                BotLogger.info("‚ö†Ô∏è", true, "–ü–∞—Ç—Ç–µ—Ä–Ω YAML –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.");

            }

            BotLogger.info("Block:", true, blocksToBreak.toString());

            initialized = true;
        }

        BotCoordinate3D next = blocksToBreak.poll();

        if (next != null) {
            BotLogger.info("üéØ", true, "Next coordinate: " + next.x + ", " + next.y + ", " + next.z);
        }
        return next;
    }


    public boolean isFinished() {
        return initialized && blocksToBreak.isEmpty();
    }


    public String getName() {
        return "BotBreakInterpretedYamlPattern(" + yamlPath.getFileName().toString() + ")";
    }


    public List<BotCoordinate3D> getAllPlannedBlocks() {
        return new ArrayList<>(blocksToBreak);
    }

}
