package com.devone.bot.core.logic.tasks.excavate;

import org.bukkit.Material;
import org.bukkit.block.Block;
import org.eclipse.jetty.util.StringUtil;

import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.inventory.BotInventory;
import com.devone.bot.core.logic.tasks.BotTask;
import com.devone.bot.core.logic.tasks.excavate.config.BotExcavateTaskConfig;
import com.devone.bot.core.logic.tasks.excavate.params.BotExcavateTaskParams;
import com.devone.bot.core.logic.tasks.excavate.patterns.IBotExcavatePattern;
import com.devone.bot.core.logic.tasks.excavate.patterns.generator.BotExcavateInterpretedYamlPattern;
import com.devone.bot.core.logic.tasks.params.BotTaskParams;
import com.devone.bot.core.logic.tasks.hand.BotHandTask;
import com.devone.bot.core.logic.tasks.hand.params.BotHandTaskParams;
import com.devone.bot.core.logic.tasks.params.IBotTaskParams;
import com.devone.bot.core.logic.tasks.sonar.BotSonar3DTask;
import com.devone.bot.core.zone.BotZoneManager;
import com.devone.bot.utils.BotConstants;
import com.devone.bot.utils.BotUtils;
import com.devone.bot.utils.blocks.BotCoordinate3D;
import com.devone.bot.utils.blocks.BotAxisDirection.AxisDirection;
import com.devone.bot.utils.logger.BotLogger;
import com.devone.bot.utils.world.BotWorldHelper;

import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

public class BotExcavateTask extends BotTask {

    private int maxBlocks;
    private int outerRadius = BotConstants.DEFAULT_SCAN_RANGE;
    private int innerRadius = BotConstants.DEFAULT_SCAN_RANGE;

    private boolean shouldPickup = true;
    private boolean destroyAllIfNoTarget = false;
    private Set<Material> targetMaterials = null;
    private String patternName = BotConstants.DEFAULT_PATTERN_BREAK;
    private IBotExcavatePattern breakPatternImpl = null;
    private AxisDirection breakDirection = AxisDirection.DOWN;

    private int offsetX, offsetY, offsetZ = 0;

    public BotExcavateTask(Bot bot) {

        super(bot, "ü™®");

        this.config = new BotExcavateTaskConfig();
        this.isLogged = config.isLogged();

        this.outerRadius = ((BotExcavateTaskConfig)this.config).getOuterRadius();
        this.innerRadius = ((BotExcavateTaskConfig)this.config).getInnerRadius();
        
        this.offsetX     = ((BotExcavateTaskConfig)this.config).getOffsetX();
        this.offsetY     = ((BotExcavateTaskConfig)this.config).getOffsetY();
        this.offsetZ     = ((BotExcavateTaskConfig)this.config).getOffsetZ();

        this.patternName = ((BotExcavateTaskConfig) config).getPattern();
    }

    /**
     * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ—Ç –∑–∞–¥–∞—á—É —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.
     * 
     * –ü–∞—Ä–∞–º–µ—Ç—Ä—ã (–ø–æ–∑–∏—Ü–∏–æ–Ω–Ω—ã–µ):
     * 
     * 0 - Set<Material> targetMaterials (nullable) ‚Äî –±–ª–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–∞–∑—Ä—É—à–∞—Ç—å.
     * 1 - Integer maxBlocks (nullable) ‚Äî –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ–±—Ä–∞—Ç—å.
     * 2 - Integer outerRadius (nullable) ‚Äî —Ä–∞–¥–∏—É—Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.
     * 3 - Integer innerRadius (nullable) ‚Äî —Ä–∞–¥–∏—É—Å —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.
     * 4 - Boolean shouldPickup (nullable) ‚Äî —Å–æ–±–∏—Ä–∞—Ç—å –ª–∏ –ø—Ä–µ–¥–º–µ—Ç—ã –ø–æ—Å–ª–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.
     * 5 - Boolean destroyAllIfNoTarget (nullable) ‚Äî –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–∫–æ–≤, —Ä–∞–∑—Ä—É—à–∞—Ç—å –≤—Å—ë –ø–æ–¥—Ä—è–¥.
     * 6 - AxisDirection breakDirection - –≤ –∫–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É —Ä–∞–∑—Ä—É—à–∞–µ–º
     * 7 - int offsetX
     * 8 - int offsetY
     * 9 - int offsetZ
     * 10 - IBotDestructionPattern –∏–ª–∏ String (nullable) ‚Äî —à–∞–±–ª–æ–Ω —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è:
     *     - IBotDestructionPattern ‚Äî –≥–æ—Ç–æ–≤—ã–π –æ–±—ä–µ–∫—Ç.
     *     - String ‚Äî –ø—É—Ç—å –∫ YAML-—Ñ–∞–π–ª—É —à–∞–±–ª–æ–Ω–∞ (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤).
     *
     * –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ –∑–∞–¥–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
     */

    @Override
    public BotExcavateTask configure(IBotTaskParams params) {

        super.configure((BotTaskParams)params);
        if(params instanceof BotExcavateTaskParams) {

            BotExcavateTaskParams breakParams = (BotExcavateTaskParams) params;

            this.targetMaterials = breakParams.getTargetMaterials();
            this.maxBlocks = breakParams.getMaxBlocks();
            this.outerRadius = breakParams.getOuterRadius();
            this.innerRadius = breakParams.getInnerRadius();
            this.shouldPickup = breakParams.isShouldPickup();
            this.destroyAllIfNoTarget = breakParams.isDestroyAllIfNoTarget();
            this.breakDirection = breakParams.getBreakDirection();

            this.offsetX = breakParams.getOffsetX();
            this.offsetY = breakParams.getOffsetY();
            this.offsetZ = breakParams.getOffsetZ();

            if (breakParams.getPatternName() != null) {
                this.patternName = breakParams.getPatternName();
                BotLogger.info(this.isLogged(), "üìê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è: " + patternName);
            }

        } else {
            BotLogger.info(this.isLogged(), bot.getId() + " ‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è `BotBreakTask`!");
        }   

        BotLogger.info(this.isLogged(), "üìê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ config(): " +patternName);

        return this;
    }

    public void setBreakDirection(AxisDirection direction) {
        this.breakDirection = direction;

    }

    public void setOffsetX(int oX) {
        this.offsetX = oX;
    }

    public void setPatterName(String pName) {
        this.patternName = pName;
    }

    public String getPatternName(){
        return this.patternName;
    }

    public void setOffsetY(int oY) {
        this.offsetY = oY;
    }
    

    public void setOffsetZ(int oZ) {
        this.offsetZ = oZ;
    }

    public int getOuterRadius() {
        return outerRadius;
    }

    public void setOuterRadius(int r) {
        this.outerRadius = r;
    }

    public int getInnerRadius() {
        return innerRadius;
    }

    public void setInnerRadius(int r) {
        this.innerRadius = r;
    }

    public int getOffsetX() {
        return this.offsetX;
    }
    public int getOffsetY() {
        return this.offsetY;
    }
    public int getOffsetZ() {
        return this.offsetZ;
    }

    public void setTargetMaterials(Set<Material> materials) {
        this.targetMaterials = materials;
        BotLogger.info(this.isLogged(), "üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + materials);
    }

    public Set<Material> getTargetMaterials() {
        BotLogger.info(this.isLogged(), "üìú –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + targetMaterials);
        return this.targetMaterials;
    }

    @Override
    public void execute() {

        BotLogger.info(this.isLogged(), "üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ " + bot.getId() +
                " (–¶–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + (targetMaterials == null ? "–í–°–ï" : targetMaterials) + ")");

        if (breakPatternImpl == null) {
            if (!StringUtil.isEmpty(patternName)) {

                Path ptrnPath = Paths.get(BotConstants.PLUGIN_PATH_PATTERNS_BREAK, patternName);
                this.breakPatternImpl = new BotExcavateInterpretedYamlPattern(ptrnPath).
                                        configure(offsetX, offsetY, offsetZ, outerRadius, innerRadius, breakDirection);

                BotLogger.info(this.isLogged(),
                        "‚ÑπÔ∏è üìê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è YAML-–ø–∞—Ç—Ç–µ—Ä–Ω: " + this.breakPatternImpl.getName());
                
            } else {
                Path fallbackPath = Paths.get(BotConstants.PLUGIN_PATH_PATTERNS_BREAK, BotConstants.DEFAULT_PATTERN_BREAK);
                
                this.breakPatternImpl = new BotExcavateInterpretedYamlPattern(fallbackPath).configure(offsetX, offsetY, offsetZ, outerRadius, innerRadius, breakDirection);
                
                BotLogger.info(this.isLogged(),
                        "‚ÑπÔ∏è üìê –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π YAML-–ø–∞—Ç—Ç–µ—Ä–Ω: " + BotConstants.DEFAULT_PATTERN_BREAK);
            }
        }

        if (breakPatternImpl.isFinished()) {
            BotLogger.info(this.isLogged(), "üèÅ –í—Å–µ –±–ª–æ–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É.");
            this.stop();
            return;
        }

        if (isInventoryFull() || isEnoughBlocksCollected()) {
            BotLogger.info(this.isLogged(), "‚õî –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ");
            this.stop();
            return;
        }

        bot.pickupNearbyItems(shouldPickup);

        if (getSceneData() == null) {
            BotLogger.info(this.isLogged(), "üîç –ó–∞–ø—É—Å–∫–∞–µ–º 3D-—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–∂–∞—é—â–µ–π —Å—Ä–µ–¥—ã.");
            BotSonar3DTask scanTask = new BotSonar3DTask(bot, this, outerRadius, outerRadius);
            bot.addTaskToQueue(scanTask);
            return;
        }

        BotCoordinate3D coordinate = breakPatternImpl.findNextBlock(bot);

        if (coordinate == null) {
            this.stop();
            BotLogger.info(this.isLogged(), "üôà –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±–ª–æ–∫–∞ –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è. –í—ã—Ö–æ–¥–∏–º.");
            return;
        }

        BotCoordinate3D targetLocation = new BotCoordinate3D(coordinate.x, coordinate.y, coordinate.z);

        Block targetBlock = BotWorldHelper.getBlockAt(targetLocation);

        bot.getRuntimeStatus().setTargetLocation(targetLocation);

        if (bot.getRuntimeStatus().getTargetLocation() != null) {

            setObjective("Probing: " + BotUtils.getBlockName(targetBlock)
                    + " at " + targetLocation);

            if (isInProtectedZone(bot.getRuntimeStatus().getTargetLocation())) {
                BotLogger.info(this.isLogged(), "‚õî " + bot.getId() + " –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï –±—É–¥–µ—Ç —Ä–∞–∑—Ä—É—à–∞—Ç—å –±–ª–æ–∫: " +
                        bot.getRuntimeStatus().getTargetLocation());
                this.stop();
                return;
            }

            if (!BotUtils.isBreakableBlock(targetBlock)) {
                BotLogger.info(this.isLogged(), "‚õî –ù–µ—Ä–∞–∑—Ä—É—à–∞–µ–º—ã–π –±–ª–æ–∫: "
                        + bot.getRuntimeStatus().getTargetLocation());
                bot.getRuntimeStatus().setTargetLocation(null);
                return;
            }

            Material mat = targetBlock.getType();

            if (BotUtils.requiresTool(mat)) {
                if (!BotInventory.equipRequiredTool(bot, mat)) {
                    BotLogger.info(this.isLogged(), "üôà –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Ä—É–∫—É. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                    bot.getRuntimeStatus().setTargetLocation(null);
                    return;
                }
            }

            setObjective("Breaking: " + BotUtils.getBlockName(targetBlock));

            BotHandTask handTask = new BotHandTask(bot, "‚õè");
            handTask.configure(new BotHandTaskParams());
            bot.addTaskToQueue(handTask);

        } else {

            setObjective("The block is not found. ");

            handleNoTargetFound();
        }
    }

    private void handleNoTargetFound() {
        bot.getRuntimeStatus().setTargetLocation(null);

        if (destroyAllIfNoTarget) {
            BotLogger.info(this.isLogged(), "üîÑ " + bot.getId() + " –¶–µ–ª–µ–≤—ã—Ö –±–ª–æ–∫–æ–≤ –Ω–µ—Ç! –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ–µ —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ.");
            bot.addTaskToQueue(new BotExcavateAnyTask(bot));
        } else {
            setObjective("");
            BotLogger.info(this.isLogged(), "‚ùå " + bot.getId() + " –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–∫–æ–≤. –ó–∞–≤–µ—Ä—à–∞–µ–º.");
            this.stop();
        }
    }

    private boolean isInventoryFull() {
        boolean full = !BotInventory.hasFreeInventorySpace(bot, targetMaterials);
        BotLogger.info(this.isLogged(), "üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: " + (full ? "–ø–æ–ª–æ–Ω" : "–µ—Å—Ç—å –º–µ—Å—Ç–æ"));
        return full;
    }

    private boolean isEnoughBlocksCollected() {
        boolean enough = BotInventory.hasEnoughBlocks(bot, targetMaterials, maxBlocks);
        BotLogger.info(this.isLogged(), "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤: " + (enough ? "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" : "–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ"));
        return enough;
    }

    private boolean isInProtectedZone(BotCoordinate3D location) {
        boolean protectedZone = BotZoneManager.getInstance().isInProtectedZone(location);
        if (protectedZone) {
            BotLogger.info(this.isLogged(), "üõë –ë–ª–æ–∫ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.");
        }
        return protectedZone;
    }

    @Override
    public void stop() {
       this.isDone = true;
       this.breakPatternImpl = null;
       bot.getRuntimeStatus().setTargetLocation(null);
       setSceneData(null);
       BotLogger.info(this.isLogged(), "üõë –ó–∞–¥–∞—á–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
    }

}
