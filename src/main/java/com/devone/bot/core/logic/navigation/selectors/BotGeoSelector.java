// üéØ BotTargetRandomizer.java
// @Generated by ChatGPT ‚Äî –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–µ–ª—å—é üòé

package com.devone.bot.core.logic.navigation.selectors;

import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

import com.devone.bot.utils.blocks.BotBlockData;
import com.devone.bot.utils.blocks.BotCoordinate3D;
import com.devone.bot.utils.logger.BotLogger;
import com.devone.bot.utils.world.BotWorldHelper;

public class BotGeoSelector {

    private static final Random RANDOM = new Random();

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.
     *
     * @param targets —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
     * @return –æ–¥–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–∫–∞ –∏–ª–∏ null, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ null
     */
    public static BotBlockData pickRandomTarget(List<BotBlockData> targets) {
        if (targets == null || targets.isEmpty()) {
            return null;
        }
        int index = RANDOM.nextInt(targets.size());
        return targets.get(index);
    }

public static BotBlockData pickEmergencyTeleportTarget(
        BotCoordinate3D botPos,
        List<BotBlockData> reachableGoals,
        List<BotBlockData> reachable,
        List<BotBlockData> navigable,
        List<BotBlockData> walkable) {

    List<List<BotBlockData>> prioritySources = List.of(
        reachableGoals, reachable, navigable, walkable
    );

    for (List<BotBlockData> source : prioritySources) {
        if (source == null || source.isEmpty()) continue;

        List<BotBlockData> options = source.stream()
            .filter(b -> {
                boolean isSame = b.equals(botPos);
                boolean isDirectlyUnder = (b.x == botPos.x && b.z == botPos.z && b.y == botPos.y - 1);
                return !isSame && !isDirectlyUnder && b.distanceTo(botPos) > 1;
            })
            .collect(Collectors.toList());

        if (!options.isEmpty()) {
            Collections.shuffle(options);
            BotBlockData selected = options.get(0);

            BotBlockData elevated = new BotBlockData();
            elevated.x = selected.x;
            elevated.y = selected.y + 1;
            elevated.z = selected.z;
            elevated.type = "AIR";
            return elevated;
        }
    }

    // ‚õî Fallback –Ω–∞ —Å–ø–∞–≤–Ω
    BotLogger.warn(true, "‚ö†Ô∏è EmergencyTeleport: fallback to world spawn!");

    BotCoordinate3D spawn = BotWorldHelper.getWorldSpawnLocation();

    BotBlockData fallback = new BotBlockData();
    fallback.x = spawn.x;
    fallback.y = spawn.y;
    fallback.z = spawn.z;
    fallback.type = "AIR";
    return fallback;
}

}
