// üéØ BotTargetRandomizer.java
// @Generated by ChatGPT ‚Äî –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–µ–ª—å—é üòé

package com.devone.bot.core.logic.navigation.selectors;

import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

import com.devone.bot.utils.blocks.BotBlockData;
import com.devone.bot.utils.blocks.BotCoordinate3D;

public class BotGeoSelector {

    private static final Random RANDOM = new Random();

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.
     *
     * @param targets —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
     * @return –æ–¥–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–∫–∞ –∏–ª–∏ null, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ null
     */
    public static BotBlockData pickRandomTarget(List<BotBlockData> targets) {
        if (targets == null || targets.isEmpty()) {
            return null;
        }
        int index = RANDOM.nextInt(targets.size());
        return targets.get(index);
    }

    public static BotBlockData pickEmergencyTeleportTarget(BotCoordinate3D botPos, List<BotBlockData> reachable) {
        List<BotBlockData> options = reachable.stream()
            .filter(b -> !b.equals(botPos) && b.distanceTo(botPos) > 1)
            .collect(Collectors.toList());

        if (options.isEmpty()) return null;

        Collections.shuffle(options);
        return options.get(0);
    }
}
