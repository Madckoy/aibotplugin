package com.devone.bot.core.utils;

import org.bukkit.Bukkit;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Player;
import org.bukkit.util.Vector;

import com.devone.bot.AIBotPlugin;
import com.devone.bot.core.Bot;
import com.devone.bot.core.brain.navigator.BotNavigator.NavigationSuggestion;
import com.devone.bot.core.task.active.move.BotMoveTask;
import com.devone.bot.core.task.active.move.params.BotMoveTaskParams;
import com.devone.bot.core.task.passive.BotTask;
import com.devone.bot.core.task.passive.BotTaskManager;
import com.devone.bot.core.utils.blocks.BotPosition;
import com.devone.bot.core.utils.logger.BotLogger;
import com.devone.bot.core.utils.world.BotWorldHelper;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Reader;
import java.util.List;
import java.util.concurrent.TimeUnit;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class BotUtils {

    public static String getBlockName(Block bl) {

        String text = bl.toString();

        String result = "";
        // Regular expression to capture the value of type
        String pattern = "type=([A-Za-z0-9_]+)";

        // Create a Pattern object
        Pattern r = Pattern.compile(pattern);

        // Create a matcher object
        Matcher m = r.matcher(text);

        // Check if the pattern is found
        if (m.find()) {
            result = m.group(1);
        }

        return result;
    }

    public static void playBlockBreakEffect(BotTask<?> task, Bot bot, Location location) {
        if (location == null || location.getWorld() == null)
            return;

        Material blockType = location.getBlock().getType();

        // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–ª–æ–∫ –Ω–µ AIR (–∏–Ω–∞—á–µ —ç—Ñ—Ñ–µ–∫—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç)
        if (blockType == Material.AIR) {
            BotLogger.debug(task.getIcon(), true,
                    bot.getId() + " ‚ö†Ô∏è –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –æ—Ç–º–µ–Ω—ë–Ω: –±–ª–æ–∫ —É–∂–µ AIR " + location.toString());
            return;
        }

        location.getWorld().spawnParticle(
                org.bukkit.Particle.BLOCK_CRACK,
                location.clone().add(0.0, 0.0, 0.0), // –¶–µ–Ω—Ç—Ä –±–ª–æ–∫–∞
                20, // –ö–æ–ª-–≤–æ —á–∞—Å—Ç–∏—Ü
                0.25, 0.25, 0.25, // –†–∞–∑–±—Ä–æ—Å
                location.getBlock().getBlockData() // –¢–∏–ø –±–ª–æ–∫–∞ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞
        );

        BotPosition pos = BotWorldHelper.locationToBotPositionSight(location);
        BotLogger.debug(task.getIcon(), true, bot.getId() + " üéá –≠—Ñ—Ñ–µ–∫—Ç —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω –Ω–∞ " + pos);
    }

    public static boolean requiresTool(Material blockType) {
        return switch (blockType) {
            case IRON_ORE, GOLD_ORE, DIAMOND_ORE, DEEPSLATE, OBSIDIAN -> true; // ‚ùó –¢–æ–ª—å–∫–æ —ç—Ç–∏ –±–ª–æ–∫–∏ —Ç—Ä–µ–±—É—é—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
            default -> false; // –í—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ –º–æ–∂–Ω–æ –ª–æ–º–∞—Ç—å —Ä—É–∫–∞–º–∏
        };
    }

    public static Location getFallbackLocation() {
        World world = BotWorldHelper.getWorld();
        return world.getSpawnLocation();
    }

    public static BotPosition getFallbackPosition() {
        BotPosition coord = new BotPosition(getFallbackLocation().getBlockX(), getFallbackLocation().getBlockY(),
                getFallbackLocation().getBlockZ());
        return coord;
    }

    /**
     * –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –ª–∏—Ü–æ–º –∫ —Ü–µ–ª–µ–≤–æ–π —Ç–æ—á–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è teleport —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
     * –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç.
     * –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ –∑–∞–ø—Ä–µ—Ç–∞ –Ω–∞ setRotation().
     *
     * @param bot    –ë–æ—Ç (CraftPlayer –∏–ª–∏ NPC, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π teleport)
     * @param target –¶–µ–ª—å, –∫ –∫–æ—Ç–æ—Ä–æ–π –Ω—É–∂–Ω–æ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –ª–∏—Ü–æ
     */
    private static void lookAt(Bot bot, BotPosition target) {
        if (bot.getNPCEntity() == null)
            return;

        Location from = bot.getNPCEntity().getLocation();
        Location to = BotWorldHelper.botPositionToWorldLocation(target).clone().add(0.5, 0.5, 0.5); // —Ü–µ–Ω—Ç—Ä –±–ª–æ–∫–∞

        Vector dir = to.toVector().subtract(from.toVector());

        float yaw = (float) Math.toDegrees(Math.atan2(dir.getZ(), dir.getX())) - 90f;
        float pitch = (float) Math.toDegrees(-Math.atan2(dir.getY(), Math.sqrt(dir.getX() * dir.getX() + dir.getZ() * dir.getZ())));

        Location newLoc = from.clone();
        newLoc.setYaw(yaw);
        newLoc.setPitch(pitch);

        bot.getNPCEntity().teleport(newLoc); // –∏–ª–∏ setRotation(), –µ—Å–ª–∏ –¥–≤–∏–∂–æ–∫ —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç

        bot.getBrain().notifyYawChanged(yaw);
    }


    public static String formatTime(long milliseconds) {
        long hours = TimeUnit.MILLISECONDS.toHours(milliseconds);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(milliseconds) % 60;
        long seconds = TimeUnit.MILLISECONDS.toSeconds(milliseconds) % 60;
        return String.format("%02d:%02d:%02d", hours, minutes, seconds);
    }

    public static void logMemoryUsage(String context) {
        Runtime runtime = Runtime.getRuntime();
        long usedMemory = runtime.totalMemory() - runtime.freeMemory();
        long maxMemory = runtime.maxMemory();

        String usedMB = String.format("%.2f", usedMemory / 1024.0 / 1024.0);
        String maxMB = String.format("%.2f", maxMemory / 1024.0 / 1024.0);

        BotLogger.debug("üì¶", true, context + " ‚Äî –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–∞–º—è—Ç–∏: " + usedMB + " MB / " + maxMB + " MB");
    }

    public static long getRemainingTime(long start, long timeout) {
        long elapsed = System.currentTimeMillis() - start;
        long diff = (timeout - elapsed) / 1000;
        return diff;
    }

    public static void turnToTarget(BotTask<?> task, Bot bot, BotPosition target) {

        // ‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–≤–æ—Ä–æ—Ç —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è
        Bukkit.getScheduler().runTaskLater(AIBotPlugin.getInstance(), () -> {

            BotLogger.debug(task.getIcon(), task.isLogging(),
                    bot.getId() + " –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ–≤—É –≤ —Å—Ç–æ—Ä–æ–Ω—É: " + target);

            BotUtils.lookAt(bot, target);

        }, 1L); // ‚úÖ –ß–µ—Ä–µ–∑ —Ç–∏–∫, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    }

    public static void animateHand(BotTask<?> task, Bot bot) {
        if (bot.getNPCEntity() instanceof Player playerBot) {
            playerBot.swingMainHand();
            BotLogger.debug(task.getIcon(), true, bot.getId() + " üëãüèª –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
        } else {
            BotLogger.debug(task.getIcon(), true, bot.getId() + " üñêüèª –ê–Ω–∏–º–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: –±–æ—Ç ‚Äî –Ω–µ –∏–≥—Ä–æ–∫");
        }
    }

    // –ø–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ BotUtils –∏–ª–∏ –≤ BotInventory
    public void checkAndSelfMove(Bot bot, Location target) {
        double pickupRadius = 2.0; // –†–∞–¥–∏—É—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã
        List<Entity> nearbyItems = bot.getNPCEntity().getNearbyEntities(pickupRadius, pickupRadius, pickupRadius);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä–æ–ø –≤ —Ä–∞–¥–∏—É—Å–µ 2 –±–ª–æ–∫–æ–≤ ‚Äî –±–æ—Ç –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–∞ –º–µ—Å—Ç–µ
        if (!nearbyItems.isEmpty()) {
            BotLogger.debug("ü§ñ", true,
                    bot.getId() + " üîç –í —Ä–∞–¥–∏—É—Å–µ " + pickupRadius + " –±–ª–æ–∫–æ–≤ –æ—Ç –µ—Å—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, –æ—Å—Ç–∞—é—Å—å –Ω–∞ –º–µ—Å—Ç–µ.");
            return;
        }

        // –ï—Å–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ —Ä—è–¥–æ–º –Ω–µ—Ç, –¥–≤–∏–≥–∞–µ–º –±–æ—Ç–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Ä–∞–∑—Ä—É—à–µ–Ω–Ω–æ–º—É –±–ª–æ–∫—É
        BotPosition pos = BotWorldHelper.locationToBotPositionSight(target);
        BotLogger.debug("ü§ñ", true, bot.getId() + " üì¶ –î—Ä–æ–ø –ø–æ–¥–æ–±—Ä–∞–Ω. –î–≤–∏–≥–∞–µ—Ç—Å—è –∫ —Ü–µ–ª–∏:" + pos);

        BotMoveTask mv_task = new BotMoveTask(bot);
        BotMoveTaskParams mv_taskParams = new BotMoveTaskParams(pos);
        mv_task.setParams(mv_taskParams);

        BotTaskManager.push(bot, mv_task);
    }

    public static String getActiveTaskIcon(Bot bot) {
        String icon = "ü§ñ";
        try {
            BotTask<?> task = bot.getActiveTask();
            icon = task.getIcon();
        } catch (Exception ex) {
        }
        return icon;
    }

    public static float getBotYaw__(Bot bot) {

        Location botLocation = bot.getNPC().getStoredLocation();
        float botYaw = botLocation.getYaw();

        return botYaw;
    }
    
    public static float getBotPitch__(Bot bot) {

        Location botLocation = bot.getNPC().getStoredLocation();
        float botPitch = botLocation.getPitch();

        return botPitch;
    }

    public static String getObjective(Bot bot) {
        try {
            return bot.getActiveTask().getObjective();
        } catch (Exception ex) {
            return "";
        }
    }

    public static boolean isTaskReactive(Bot bot) {
        try {
            return bot.getActiveTask().isReactive();
        } catch (Exception ex) {
            return false;
        }
    }

    public static String getActiveTaskSimpleName(Bot bot) {
        try {
            return bot.getActiveTask().getClass().getSimpleName();
        } catch (Exception ex) {
            return "N/A";
        }
    }

    public static long getActiveTaskElapsed(Bot bot) {
        try {
            return bot.getActiveTask().getElapsedTime();
        } catch (Exception ex) {
            return 0;
        }
    }

    public static String getNavigationSuggestionAsString(Bot bot) {
        String result = "";

        if(bot.getNavigator().getNavigationSuggestion()==NavigationSuggestion.MOVE) {
            return "MOVE";
        }

        if(bot.getNavigator().getNavigationSuggestion()==NavigationSuggestion.CHANGE_DIRECTION) {
            return "CHANGE_DIRECTION";
        }

       return result;
    }

    public static void rotate(BotTask<?> task, Bot bot, float degrees) {
        if (bot == null || bot.getNavigator().getPositionSight() == null || bot.getNPCEntity() == null) return;

        Bukkit.getScheduler().runTaskLater(AIBotPlugin.getInstance(), () -> {

            float currentYaw = bot.getNavigator().getPositionSight().getYaw();
            float newYaw = (currentYaw + degrees) % 360.0f;
    
            Location from = bot.getNPCEntity().getLocation();
            Location newLook = from.clone();
            newLook.setYaw(newYaw);
      
            bot.getNPCEntity().teleport(newLook);

            bot.getBrain().notifyYawChanged(newYaw); // –≤–æ—Ç –∑–¥–µ—Å—å ‚Äî –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ

            BotLogger.debug("‚Üª", true, bot.getId() + " rotated " + degrees + "¬∞ ‚Üí yaw=" + newYaw);
        
        }, 1L); // ‚úÖ –ß–µ—Ä–µ–∑ —Ç–∏–∫, —á—Ç–æ–±—ã –¥–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        
    }

    private static final Gson gson = new GsonBuilder().setPrettyPrinting().create();

    public static <T> T readJson(File file, Class<T> clazz) {
        try (Reader reader = new FileReader(file)) {
            return gson.fromJson(reader, clazz);
        } catch (IOException e) {
            throw new RuntimeException("Failed to read JSON from " + file.getName(), e);
        }
    }

    public static void writeJson(File file, Object obj) {
        try (FileWriter writer = new FileWriter(file)) {
            gson.toJson(obj, writer);
        } catch (IOException e) {
            throw new RuntimeException("Failed to write JSON to " + file.getName(), e);
        }
    }


}