package com.devone.bot.core.inventory;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.entity.Entity;
import org.bukkit.entity.Item;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.InventoryHolder;
import org.bukkit.inventory.ItemStack;

import com.devone.bot.core.Bot;
import com.devone.bot.core.brain.memory.scene.BotScanNatural;
import com.devone.bot.core.utils.BotConstants;
import com.devone.bot.core.utils.BotUtils;
import com.devone.bot.core.utils.logger.BotLogger;
import com.devone.bot.core.utils.world.BotWorldHelper;

public class BotInventory {

    private final Bot bot;

    public BotInventory(Bot bot) {
        this.bot = bot;
        getNPCInventory();
    }

    public Inventory getNPCInventory() {

        if (this.bot.getNPCEntity() == null) {
            return null;
        }

        if (this.bot.getNPCEntity() instanceof InventoryHolder) {
            return ((InventoryHolder) this.bot.getNPCEntity()).getInventory();
        }
        return null; // NPC –Ω–µ –∏–º–µ–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    }

    public int getAmount(Material material) {

        if (this.bot.getNPCEntity() == null) {
            return 0;
        }

        Inventory inv = getNPCInventory();
        if (inv == null)
            return 0; // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0

        int total = 0;
        for (ItemStack item : inv.getContents()) {
            if (item != null && item.getType() == material) {
                total += item.getAmount();
            }
        }
        return total;
    }

    public void addItem(Material material, int amount) {
        if (bot.getInventory().getNPCInventory() == null) {
            return;
        }

        Inventory inv = getNPCInventory();
        if (inv == null)
            return; // –ù–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è - –≤—ã—Ö–æ–¥–∏–º

        inv.addItem(new ItemStack(material, amount));
    }

    public boolean removeItem(Material material, int amount) {
        if (bot.getInventory().getNPCInventory() == null) {
            return false;
        }

        Inventory inv = getNPCInventory();
        if (inv == null)
            return false; // –ù–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è - –Ω–µ –º–æ–∂–µ–º —É–¥–∞–ª–∏—Ç—å

        for (ItemStack item : inv.getContents()) {
            if (item != null && item.getType() == material) {
                int itemAmount = item.getAmount();
                if (itemAmount > amount) {
                    item.setAmount(itemAmount - amount);
                    return true;
                } else {
                    inv.remove(item);
                    amount -= itemAmount;
                    if (amount <= 0)
                        return true;
                }
            }
        }
        return false;
    }

    public void pickupAll(Boolean shouldPickup) {
        BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true, bot.getId() + " Pickup parameters: " + shouldPickup +" | "+bot.getBrain().getAutoPickupItems());

        if (!bot.isNPCSpawned() || bot.getNPC() == null) {
            BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true, bot.getId() + " ‚ùå NPC issue! Can't pickup items. Pickup parameters");
            return;
        }

        logInventory();


        if (!shouldPickup && !bot.getBrain().getAutoPickupItems() ) {
            BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true, bot.getId() + " ‚ùå Will not pickup items. Pickup parameters: " + shouldPickup +" | "+bot.getBrain().getAutoPickupItems());
            return;
        }

        BotScanNatural.logScanNatural(bot, BotConstants.DEFAULT_SCAN_RANGE);

        if (bot.getBrain().getAutoPickupItems()) {
            pullAllItemsinRadius(2.0);
        }



        try {
            Location botLocation = BotWorldHelper.botPositionToWorldLocation(bot.getNavigator().getPosition());

            List<Entity> nearbyEntities = BotWorldHelper.getWorld().getEntities();

            for (Entity entity : nearbyEntities) {
                if (entity instanceof Item) {
                    Item item = (Item) entity;
                    if (botLocation.distance(item.getLocation()) < 2.0) {
                        Material material = item.getItemStack().getType();
                        int amount = item.getItemStack().getAmount();

                        addItem(material, amount); // –ü–µ—Ä–µ–¥–∞—ë–º –¥–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å

                        item.remove(); // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥–º–µ—Ç —Å –∑–µ–º–ª–∏
                        BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true, bot.getId() + " üõí –ü–æ–¥–æ–±—Ä–∞–ª " + amount + " x " + material);
                    }
                }
            }

        } catch (Exception e) {
            BotLogger.debug("üõí", true, bot.getId() + " " + e.getMessage());
        }

    }

    public static boolean hasEnoughBlocks(Bot bot, Set<Material> targetMaterials, int maxBlocksPerMaterial) {

        if (bot.getInventory().getNPCInventory() == null) {
            BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true, bot.getId() + " ‚õî Has no inventory yet!");
            return true;
        } // not yet created

        Map<Material, Integer> collectedCounts = new HashMap<>();

        if (targetMaterials != null) {
            // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            for (ItemStack item : bot.getInventory().getNPCInventory().getContents()) {
                if (item != null && targetMaterials.contains(item.getType())) {
                    collectedCounts.put(item.getType(),
                            collectedCounts.getOrDefault(item.getType(), 0) + item.getAmount());
                }
            }
        } else {
            // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
            for (ItemStack item : bot.getInventory().getNPCInventory().getContents()) {
                if (item != null) {
                    collectedCounts.put(item.getType(),
                            collectedCounts.getOrDefault(item.getType(), 0) + item.getAmount());
                }
            }
        }
        if (targetMaterials != null) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ª—é–±–æ–≥–æ –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            for (Material material : targetMaterials) {
                int count = collectedCounts.getOrDefault(material, 0);
                BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true, 
                        bot.getId() + " üì¶ " + material + ": ( " + count + "/" + maxBlocksPerMaterial + ")");

                if (count >= maxBlocksPerMaterial) {
                    return true; // –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ —Ü–µ–ª—å –ø–æ –∫–∞–∫–æ–º—É-—Ç–æ –º–∞—Ç–µ—Ä–∏–∞–ª—É ‚Üí –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
                }
            }
        }

        return false; // –ï—â—ë –Ω–µ –Ω–∞–±—Ä–∞–ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    }

    public static boolean hasFreeInventorySpace(Bot bot, Set<Material> targetMaterials) {

        if (bot.getInventory().getNPCInventory() == null) {
            BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true,  bot.getId() + " ‚õî Has no inventory yet!");
            return true;
        } // not yet created

        for (ItemStack item : bot.getInventory().getNPCInventory().getContents()) {
            if (item == null || item.getType() == Material.AIR) {
                return true; // –ï—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç
            }
            if (targetMaterials != null) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Å—Ç–∞–∫–µ –¥–ª—è –ª—é–±–æ–≥–æ –∏–∑ —Ü–µ–ª–µ–≤—ã—Ö
                // –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
                if (targetMaterials.contains(item.getType()) && item.getAmount() < item.getMaxStackSize()) {
                    return true; // –í —ç—Ç–æ–º —Å–ª–æ—Ç–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë
                }
            } else {
                if (item.getAmount() < item.getMaxStackSize()) {
                    return true; // –í —ç—Ç–æ–º —Å–ª–æ—Ç–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë
                }
            }
        }
        return false; // –ù–µ—Ç –º–µ—Å—Ç–∞ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–ª–æ—Ç–µ
    }

    public static void dropAllItems(Bot bot) {

        Inventory inv = bot.getInventory().getNPCInventory();
        if (inv == null) {
            return;
        } // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0

        Inventory inventory = bot.getInventory().getNPCInventory();
        if (inventory == null) {
            BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true,  bot.getId() + " ‚õî Has no inventory yet!");
            return;
        } // not yet created

        for (ItemStack item : inventory.getContents()) {
            if (item != null && item.getType() != Material.AIR) {
                bot.getNPCEntity().getWorld().dropItemNaturally(bot.getNPCEntity().getLocation(), item);
            }
        }

        inventory.clear(); // –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ—Å–ª–µ –≤—ã–±—Ä–æ—Å–∞
        BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true, bot.getId() + " üöÆ –í—ã–±—Ä–æ—Å–∏–ª –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è!");
    }

    public void pullAllItemsinRadius(double radius) {
        List<Entity> nearbyItems = bot.getNPCEntity().getNearbyEntities(radius, radius, radius);

        for (Entity entity : nearbyItems) {
            if (entity instanceof Item) {
                entity.teleport(bot.getNPCEntity().getLocation()); // –ü—Ä–∏—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–µ–¥–º–µ—Ç
                BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true, bot.getId() + " üß≤ Pulled up a near item!");
            }
        }
    }

    public void logInventory() {
        Inventory inventory = getNPCInventory();

        if (inventory == null) {
            return;
        }

        List<String> rows = new ArrayList<>();
        int columns = 9; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ (–∫–∞–∫ –≤ GUI)

        StringBuilder row = new StringBuilder("| ");
        int count = 0;

        for (int i = 0; i < inventory.getSize(); i++) {
            ItemStack item = inventory.getItem(i);
            if (item != null && item.getType() != Material.AIR) {
                String material = item.getType().toString();
                int amount = item.getAmount();
                row.append(String.format("%2d x %-15s ", amount, material)); // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ -> –ú–∞—Ç–µ—Ä–∏–∞–ª
            } else {
                row.append(String.format("-- x %-15s ", "------")); // –ü—É—Å—Ç–æ–π —Å–ª–æ—Ç
            }

            count++;
            if (count == columns) {
                rows.add(row.toString() + "|");
                row = new StringBuilder("| ");
                count = 0;
            }
        }

        // –í—ã–≤–æ–¥ –≤ –ª–æ–≥–∏
        // BotLogger.debug("üìù " + bot.getId() + " –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å:");
        // for (String r : rows) {
        // BotLogger.debug(r);
        // }
    }

    public static int getTotalItemCount(Bot bot) {
        Inventory inv = bot.getInventory().getNPCInventory();
        if (inv == null)
            return 0;

        int total = 0;
        for (ItemStack item : inv.getContents()) {
            if (item != null && item.getType() != Material.AIR) {
                total += item.getAmount();
            }
        }
        return total;
    }

    public static boolean hasToolFor(Bot bot, Material blockType) {
        Inventory inv = bot.getInventory().getNPCInventory();
        if (inv == null)
            return false; // –ï—Å–ª–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–µ—Ç ‚Äì –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —Ç–æ—á–Ω–æ –Ω–µ—Ç!

        Material requiredTool = getRequiredTool(blockType);
        if (requiredTool == null)
            return true; // –ï—Å–ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω—É–∂–µ–Ω ‚Äì –≤—Å—ë –Ω–æ—Ä–º, –º–æ–∂–Ω–æ –ª–æ–º–∞—Ç—å

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
        for (ItemStack item : inv.getContents()) {
            if (item != null && item.getType() == requiredTool) {
                return true; // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–∞–π–¥–µ–Ω
            }
        }

        return false; // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–µ—Ç
    }

    public static boolean equipRequiredTool(Bot bot, Material blockType) {
        Inventory inv = bot.getInventory().getNPCInventory();
        if (inv == null)
            return false;

        Material requiredTool = getRequiredTool(blockType);
        if (requiredTool == null)
            return true; // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω—É–∂–µ–Ω

        for (int i = 0; i < inv.getSize(); i++) {
            ItemStack item = inv.getItem(i);
            if (item != null && item.getType() == requiredTool) {
                bot.getPlayer().getInventory().setItemInMainHand(item);
                BotLogger.debug("ü§ñ ", true, "–í–∑—è–ª –≤ —Ä—É–∫—É –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: " + requiredTool);
                return true;
            }
        }

        BotLogger.debug(BotUtils.getActiveTaskIcon(bot), true, "üß∞ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç " + requiredTool + " –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ");
        return false;
    }

    private static Material getRequiredTool(Material blockType) {
        return switch (blockType) {
            case STONE, COBBLESTONE, IRON_ORE, GOLD_ORE, DIAMOND_ORE, DEEPSLATE -> Material.WOODEN_PICKAXE; // ‚ùó
                                                                                                            // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ
                                                                                                            // –Ω—É–∂–Ω–∞
                                                                                                            // –¥–µ—Ä–µ–≤—è–Ω–Ω–∞—è
                                                                                                            // –∫–∏—Ä–∫–∞
            case OBSIDIAN -> Material.DIAMOND_PICKAXE; // ‚ùó –¢–æ–ª—å–∫–æ –∞–ª–º–∞–∑–Ω–∞—è –∫–∏—Ä–∫–∞!
            default -> null; // ‚ùó –ï—Å–ª–∏ `null`, –∑–Ω–∞—á–∏—Ç, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –Ω—É–∂–µ–Ω (–º–æ–∂–Ω–æ –ª–æ–º–∞—Ç—å —Ä—É–∫–∞–º–∏)
        };
    }

    public static boolean isEmpty(Bot bot) {
        Inventory inventory = bot.getInventory().getNPCInventory();
        if (inventory == null)
            return true; 

        for (ItemStack item : inventory.getContents()) {
            if (item != null && item.getType() != Material.AIR) {
                return false;
            }
        }
        return true;
    }

}
