package com.devone.bot.core.brain.navigator.tags;

import com.devone.bot.core.utils.blocks.BlockMaterialUtils;
import com.devone.bot.core.utils.blocks.BotBlockData;
import com.devone.bot.core.utils.blocks.BotPositionKey;
import com.devone.bot.core.utils.blocks.BotTagUtils;

import java.util.*;

public class BotWalkableBlockTagger {

    /**
     * –ü–æ–º–µ—á–∞–µ—Ç –±–ª–æ–∫–∏ —Ç–µ–≥–∞–º–∏ walkable:solid, walkable:cover, walkable:covered, walkable:hazard.
     * –û—Å–Ω–æ–≤—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –Ω–∞–ª–∏—á–∏–∏ safe:block –∏ –ª–æ–≥–∏–∫–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
     */
    public static int tagWalkableBlocks(List<BotBlockData> blocks) {
        if (blocks == null || blocks.isEmpty()) return 0;

        Map<BotPositionKey, BotBlockData> blockMap = new HashMap<>();
        for (BotBlockData block : blocks) {
            blockMap.put(block.toKey(), block);
        }

        blocks.sort(Comparator.comparingInt(BotBlockData::getY).reversed());

        for (BotBlockData block : blocks) {
            if (shouldSkip(block)) continue;

            int x = block.getX();
            int y = block.getY();
            int z = block.getZ();

            BotBlockData above = blockMap.get(new BotPositionKey(x, y + 1, z));
            BotBlockData above2 = blockMap.get(new BotPositionKey(x, y + 2, z));

            if(above2==null || above==null) continue; //–Ω–µ—Ç –º–µ—Å—Ç–∞ —á—Ç–æ –±—ã —Å—Ç–æ—è—Ç—å
            if(BlockMaterialUtils.isDangerous(above) || BlockMaterialUtils.isDangerous(above2))  continue;//–Ω–∞–¥ –≥–æ–ª–æ–≤–æ–π –ª–∏–±–æ –Ω–µ—Ç –±–ª–æ–∫–æ–≤ –ª–∏–±–æ –æ–ø–∞—Å–Ω—ã–µ - –Ω–µ walkable
           
            BotBlockData below = blockMap.get(new BotPositionKey(x, y - 1, z));
            if( BlockMaterialUtils.isDangerous(above) && BlockMaterialUtils.isDangerous(above2)) continue;

            // ‚ö†Ô∏è –û–ø–∞—Å–Ω—ã–µ, –Ω–æ –ø—Ä–æ—Ö–æ–¥–∏–º—ã–µ
            if (BlockMaterialUtils.isPassableDangerous(block)) {
                if ((BlockMaterialUtils.canBotStandInside(above))
                    && below != null
                    && below.hasTag("safe:block")) {

                    block.addTag("walkable:hazard");

                    if (BlockMaterialUtils.isSolidEnoughToStandOn(below)
                        && below.getTags().stream().noneMatch(t -> t.startsWith("walkable:"))) {
                        below.addTag("walkable:covered");
                    }
                }
                continue;
            }

            // ‚úÖ –¢–æ–ª—å–∫–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ

            if (!block.hasTag("safe:block")) continue;

            // üßó –†–∞–∑–º–µ—Ç–∫–∞ climbable (–ª–∏–∞–Ω—ã, –ª–µ—Å—Ç–Ω–∏—Ü—ã –∏ —Ç.–ø.)
            if (BlockMaterialUtils.isClimbable(block) && block.hasTag("safe:block")) {
                block.addTag("walkable:climbable");
            }
            
            // –ï—Å–ª–∏ –Ω–∞–¥ –±–ª–æ–∫–æ–º –µ—Å—Ç—å cover ‚Äî —ç—Ç–æ covered
            if (BlockMaterialUtils.isCover(above)) {
                block.addTag("walkable:covered");
                continue;
            }

            // –ï—Å–ª–∏ –±–ª–æ–∫ —Å–∞–º cover –∏ –Ω–∞–¥ –Ω–∏–º –≤–æ–∑–¥—É—Ö ‚Äî —ç—Ç–æ cover
            if (BlockMaterialUtils.isCover(block)
                && BlockMaterialUtils.canBotStandInside(above)) {
                block.addTag("walkable:cover");
                continue;
            }

            // –ï—Å–ª–∏ –±–ª–æ–∫ —Ç–≤–µ—Ä–¥—ã–π –∏ –Ω–∞–¥ –Ω–∏–º 2 –ø—Ä–æ—Ö–æ–¥–∏–º—ã—Ö ‚Äî —ç—Ç–æ walkable:solid
            if (BlockMaterialUtils.isSolidEnoughToStandOn(block)
                && BlockMaterialUtils.canBotStandInside(above)
                && BlockMaterialUtils.canBotStandInside(above2)) {
                block.addTag("walkable:solid");
            }

        }

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–¥—Å—á—ë—Ç —Ç–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤
        return BotTagUtils.getTaggedBlocks(blocks, "walkable:*").size();
    }

    private static boolean shouldSkip(BotBlockData block) {
        return BlockMaterialUtils.isAir(block);
    }
}
