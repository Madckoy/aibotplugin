package com.devone.bot.core.brain;

import com.devone.bot.core.logic.navigation.BotCache;
import java.util.ArrayList;

import com.devone.bot.core.bot.Bot;
import com.devone.bot.core.logic.task.BotTask;
import com.devone.bot.utils.blocks.BotLocation;
import com.devone.bot.utils.blocks.BotLocationHelper;
import com.devone.bot.utils.logger.BotLogger;
import com.devone.bot.utils.scene.BotSceneData;

public class BotBrain {

    private Bot owner;

    // –î–æ–±–∞–≤–ª—è–µ–º currentLocation, lastKnownLocation –∏ targetLocation
    private BotLocation currentLocation;

    private BotLocation targetLocation;  // –ù–æ–≤–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ –¥–ª—è —Ü–µ–ª–µ–≤–æ–π –ª–æ–∫–∞—Ü–∏–∏
    // auto pick ip items
    private boolean autoPickUpItems = true;
    // –î—Ä—É–≥–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    private boolean stuck;
    private int stuckCount;
    private ArrayList<String> killedMobs;
    private ArrayList<String> brokenBlocks;
    private long teleportUsed;
    protected BotSceneData sceneData;

    private BotCache cache = new BotCache();

    public BotBrain(Bot bot) {
        this.owner = bot;
        this.currentLocation = getCurrentLocation();  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Ç–µ–∫—É—â–µ–π –ª–æ–∫–∞—Ü–∏–µ–π
        this.targetLocation = null;  // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è targetLocation
        this.stuck = false;
        this.stuckCount = 0;
        this.killedMobs   = new ArrayList<String>();
        this.brokenBlocks = new ArrayList<String>();
        this.teleportUsed = 0;
        this.sceneData = null;
    }

    public BotTask<?> getCurrentTask() {
        BotTask<?> task = owner.getLifeCycle().getTaskStackManager().getActiveTask();
        if (task != null) {
            return task; // –ù–∞–º –Ω–µ –Ω—É–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
        }
        return null; // –∏–ª–∏ –≤—ã–±—Ä–æ—Å–∏—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ currentLocation —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏–µ
    public BotLocation getCurrentLocation() {
        if (owner.getNPC() != null) {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –ª–æ–∫–∞—Ü–∏—é NPC
            BotLocation newLocation = BotLocationHelper.convertFrom(owner.getNPC().getStoredLocation());
            currentLocation = newLocation;
        } else {
            // –ï—Å–ª–∏ NPC –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
            return null;
        }
        return currentLocation;
    }

    public void setAutoPickupItems(boolean pickup) {
        autoPickUpItems = pickup;
    }

    public boolean getAutoPickupItems() {
        return autoPickUpItems;
    }

    public void setCurrentLocation(BotLocation location) {
        this.currentLocation = location;
    }

    // –§–ª–∞–≥ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
    public boolean isStuck() {
        return stuck;
    }

    public void setStuck(boolean stuck) {
        this.stuck = stuck;
        BotLogger.info("üîî", true, "BotStatusRuntime: set Stuck="+stuck);
        incrementStuckCount();
    }

    // –°—á—ë—Ç—á–∏–∫ –∑–∞—Å—Ç—Ä–µ–≤–∞–Ω–∏—è
    public int getStuckCount() {
        return stuckCount;
    }

    public void incrementStuckCount() {
        this.stuckCount++;
    }

    public void resetStuckCount() {
        this.stuckCount = 0;
    }

    // –ì–µ—Ç—Ç–µ—Ä –∏ –°–µ—Ç—Ç–µ—Ä –¥–ª—è targetLocation
    public BotLocation getTargetLocation() {
        return targetLocation;
    }

    public void setTargetLocation(BotLocation targetLocation) {
        this.targetLocation = targetLocation;
    }

    public void killedMobsIncrease(String mobName) {
        this.killedMobs.add(mobName);
    }

    public void brokenBlocksIncrease(String blockName) {
        this.brokenBlocks.add(blockName);
    }

    public ArrayList<String> getMobsKilled() {
        return killedMobs;
    }

    public ArrayList<String> getBlocksBroken() {
        return brokenBlocks;
    }

    public void teleportUsedIncrease() {
        this.teleportUsed = teleportUsed + 1;
    }

    public long getTeleportUsed() {
        return teleportUsed;
    }

    public void setSceneData(BotSceneData sceneData) {
        this.sceneData = sceneData;
    }

    public BotSceneData getSceneData() {
        return this.sceneData;
    }

    public BotCache getCache(){
        return cache;
    }
}
