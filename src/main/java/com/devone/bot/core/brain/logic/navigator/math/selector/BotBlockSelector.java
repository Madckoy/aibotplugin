// üéØ BotTargetRandomizer.java
// @Generated by ChatGPT ‚Äî –û—Ö–æ—Ç–Ω–∏–∫ –∑–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–µ–ª—å—é üòé

package com.devone.bot.core.brain.logic.navigator.math.selector;

import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

import com.devone.bot.core.utils.blocks.BotBlockData;
import com.devone.bot.core.utils.blocks.BotLocation;
import com.devone.bot.core.utils.logger.BotLogger;
import com.devone.bot.core.utils.world.BotWorldHelper;

public class BotBlockSelector {

    private static final Random RANDOM = new Random();

    /**
     * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ç–æ—á–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞.
     *
     * @param targets —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ—á–µ–∫
     * @return –æ–¥–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —Ç–æ—á–∫–∞ –∏–ª–∏ null, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç –∏–ª–∏ null
     */
    public static BotBlockData selectRandomTarget(List<BotBlockData> targets) {
        if (targets == null || targets.isEmpty()) {
            return null;
        }
        int index = RANDOM.nextInt(targets.size());
        return targets.get(index);
    }

    public static BotBlockData selectNearestTarget(List<BotBlockData> targets, BotLocation fromLocation) {

        BotLogger.debug("üó∫Ô∏è", true, "üìç–í—ã–±–∏—Ä–∞–µ–º –±–ª–∏–∂–∞–π—à—É—é —Ç–æ–∫—É ");

        if (targets == null || targets.isEmpty() || fromLocation == null) {
            return null;
        }
    
        BotBlockData nearest = null;
        double minDistance = Double.MAX_VALUE;
    
        for (BotBlockData target : targets) {
            if (fromLocation.equals(target.getLocation())) {
                BotLogger.debug("üó∫Ô∏è", true, "‚ùå –¢–æ—á–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç –∫ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–µ–π, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.");
                continue;
            }
    
            double distance = fromLocation.distanceTo(target);
            if (distance < minDistance) {
                minDistance = distance;
                nearest = target;
            }
        }
    
        return nearest;
    }
    

    public static BotBlockData pickEmergencyRelocationTarget(
            BotLocation botPos,
            List<BotBlockData> reachableGoals,
            List<BotBlockData> reachable,
            List<BotBlockData> navigable,
            List<BotBlockData> walkable) {

        List<List<BotBlockData>> prioritySources = List.of(
                reachableGoals, reachable, navigable, walkable);

        for (List<BotBlockData> source : prioritySources) {
            if (source == null || source.isEmpty())
                continue;

            List<BotBlockData> options = source.stream()
                    .filter(b -> {
                        boolean isSame = b.equals(botPos);
                        boolean isDirectlyUnder = (b.getX() == botPos.getX() && b.getZ() == botPos.getZ()
                                && b.getY() == botPos.getY() - 1);
                        return !isSame && !isDirectlyUnder && b.distanceTo(botPos) > 1;
                    })
                    .collect(Collectors.toList());

            if (!options.isEmpty()) {
                Collections.shuffle(options);
                BotBlockData selected = options.get(0);

                BotBlockData elevated = new BotBlockData();
                elevated.setX(selected.getX());
                elevated.setY(selected.getY() + 1);
                elevated.setZ(selected.getZ());
                elevated.setType("AIR");
                return elevated;
            }
        }

        // ‚õî Fallback –Ω–∞ —Å–ø–∞–≤–Ω
        BotLogger.debug("‚ö†Ô∏è", true, "EmergencyTeleport: fallback to world spawn!");

        BotLocation spawn = BotWorldHelper.getWorldSpawnLocation();

        BotBlockData fallback = new BotBlockData();
        fallback.setX(spawn.getX());
        fallback.setY(spawn.getY());
        fallback.setZ(spawn.getZ());
        fallback.setType("AIR");
        return fallback;
    }

}
