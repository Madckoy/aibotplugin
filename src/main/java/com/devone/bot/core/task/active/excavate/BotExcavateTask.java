package com.devone.bot.core.task.active.excavate;

import java.util.Set;

import org.bukkit.Material;
import org.bukkit.block.Block;
import com.devone.bot.core.Bot;
import com.devone.bot.core.inventory.BotInventory;
import com.devone.bot.core.task.passive.BotTaskAutoParams;
import com.devone.bot.core.task.passive.BotTaskManager;
import com.devone.bot.core.task.passive.IBotTaskParameterized;
import com.devone.bot.core.task.active.excavate.BotExcavateTask;
import com.devone.bot.core.task.active.excavate.params.BotExcavateTaskParams;
import com.devone.bot.core.task.active.hand.excavate.BotHandExcavateTask;
import com.devone.bot.core.task.active.hand.excavate.params.BotHandExcavateTaskParams;
import com.devone.bot.core.utils.BotConstants;
import com.devone.bot.core.utils.BotUtils;
import com.devone.bot.core.utils.blocks.BotBlockData;
import com.devone.bot.core.utils.blocks.BotPosition;
import com.devone.bot.core.utils.logger.BotLogger;
import com.devone.bot.core.utils.pattern.BotPatternRunner;
import com.devone.bot.core.utils.world.BotWorldHelper;
import com.devone.bot.core.utils.zone.BotZoneManager;

public class BotExcavateTask extends BotTaskAutoParams<BotExcavateTaskParams> {

    private int maxBlocks;
    private Set<Material> targetMaterials = null;
    private String patternName = BotConstants.DEFAULT_PATTERN_BREAK;
    private BotPosition basePosition;
    private long blocksCounter = 0;
    private BotPatternRunner runner = null;

    public BotExcavateTask(Bot bot) {
        super(bot, BotExcavateTaskParams.class);
    }

    public IBotTaskParameterized<BotExcavateTaskParams> setParams(BotExcavateTaskParams params) {

        this.params = params;

        setIcon(params.getIcon());
        setObjective(params.getObjective());
        setEnabled(params.isEnabled());

        if (params.getPatternName() != null) {
            this.patternName = params.getPatternName();
            BotLogger.debug(icon, isLogging(), bot.getId() + " üìê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è: " + patternName);
        }

        BotLogger.debug(icon, isLogging(),
                bot.getId() + " üìê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è —á–µ—Ä–µ–∑ setParams(): " + patternName);

        return this;
    }

    public String getPatternName() {
        return this.patternName;
    }

    public void setTargetMaterials(Set<Material> materials) {
        this.targetMaterials = materials;
        BotLogger.debug(icon, isLogging(), bot.getId() + " üéØ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + materials);
    }

    public Set<Material> getTargetMaterials() {
        BotLogger.debug(icon, isLogging(), bot.getId() + " üìú –ü–æ–ª—É—á–µ–Ω—ã —Ü–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + targetMaterials);
        return this.targetMaterials;
    }

    @Override
    public void execute() {

        BotLogger.debug(icon, isLogging(), bot.getId() + " üöÄ –ó–∞–ø—É—Å–∫ –∑–∞–¥–∞—á–∏ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ –¥–ª—è –±–æ—Ç–∞ " + bot.getId() +
                " (–¶–µ–ª–µ–≤—ã–µ –±–ª–æ–∫–∏: " + (targetMaterials == null ? "–í–°–ï" : targetMaterials) + ")");

        basePosition = new BotPosition(bot.getNavigator().getPosition());

        if (runner == null) {
            runner = new BotPatternRunner();
        }

        // üö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–ø–∞—Å–Ω—É—é –∂–∏–¥–∫–æ—Å—Ç—å
        if (BotWorldHelper.isInDangerousLiquid(bot)) {
            BotLogger.debug(icon, isLogging(), bot.getId() + " üíß –û–∫–∞–∑–∞–ª—Å—è –≤ –æ–ø–∞—Å–Ω–æ–π –∂–∏–¥–∫–æ—Å—Ç–∏. –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–ø–∫—É.");
            this.stop();
            return;
        }

        BotPosition blockPosition = null;

        setIcon("üìú");

        setObjective(params.getObjective() + ": Processing pattern - " + patternName);

        if (!runner.isLoaded()) {
            try {
                runner.load(basePosition);
            } catch (Exception ex) {
                BotLogger.debug(icon, isLogging(), bot.getId() + " ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞: " + ex.getMessage());
                return; // exit and go to another cycle
            }
        }

        blockPosition = runner.getNextVoid(basePosition);
        BotLogger.debug(icon, isLogging(), bot.getId() + " Next Void: " + blockPosition);

        if (runner.isNoVoid()) {
            BotLogger.debug(icon, isLogging(), " üèÅ –í—Å–µ –±–ª–æ–∫–∏ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É.");
            this.stop();
            return;
        } else {
            if (params.isPickup()) {
                bot.pickupNearbyItems();
                if (isInventoryFull() || isEnoughBlocksCollected()) {
                    BotLogger.debug(icon, isLogging(),
                            bot.getId() + " ‚õî –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø–æ–ª–æ–Ω –∏–ª–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ");
                    this.stop();
                    return;
                }
            }

            if (blockPosition != null) {
                Block targetBlock = BotWorldHelper.botPositionToWorldBlock(blockPosition);
                bot.getNavigator().setPoi(blockPosition);

                if (targetBlock.getType().toString().equals(Material.AIR.toString()) ||
                        targetBlock.getType().toString().equals(Material.CAVE_AIR.toString()) ||
                        targetBlock.getType().toString().equals(Material.VOID_AIR.toString()) ||
                        targetBlock.getType().toString().equals(Material.WATER.toString()) ||
                        targetBlock.getType().toString().equals(Material.LAVA.toString())) {

                    BotLogger.debug(icon, isLogging(), bot.getId() + " –ë–ª–æ–∫ –Ω–µ —Ä–∞–∑—Ä—É—à–∏–º—ã–π –∏–ª–∏ —É–∂–µ —Ä–∞–∑—Ä—É—à–µ–Ω: "
                            + blockPosition + " " + targetBlock.getType());
                    return;
                }

                BotLogger.debug(icon, isLogging(),
                        bot.getId() + " –ü–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –≥–æ–ª–æ–≤—É –≤ —Å—Ç–æ—Ä–æ–Ω—É: " + blockPosition + " " + targetBlock.getType());
                turnToTarget(this, blockPosition);

                if (bot.getNavigator().getPoi() != null) {
                    setObjective(
                            params.getObjective() + " " + BotUtils.getBlockName(targetBlock) + " at " + blockPosition);

                    if (isInProtectedZone(bot.getNavigator().getPoi())) {
                        BotLogger.debug(icon, isLogging(),
                                bot.getId() + " ‚õî –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, –ù–ï –±—É–¥–µ—Ç —Ä–∞–∑—Ä—É—à–∞—Ç—å –±–ª–æ–∫: "
                                        + bot.getNavigator().getPoi());
                        return;
                    }
                }

                if (BotWorldHelper.isBreakableBlock(targetBlock) == false) {

                    BotLogger.debug(icon, isLogging(),
                            bot.getId() + " ‚õî –ù–µ—Ä–∞–∑—Ä—É—à–∞–µ–º—ã–π –±–ª–æ–∫: " + bot.getNavigator().getPoi());

                    bot.getNavigator().setPoi(null);
                    return;
                }

                Material mat = targetBlock.getType();

                if (BotUtils.requiresTool(mat)) {
                    if (!BotInventory.equipRequiredTool(bot, mat)) {
                        BotLogger.debug(icon, isLogging(),
                                bot.getId() + " üôà –ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ —Ä—É–∫—É. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.");
                        bot.getNavigator().setPoi(null);
                        return;
                    }
                }

                this.setPause(true);

                BotBlockData block = BotWorldHelper.blockToBotBlockData(targetBlock);
                BotHandExcavateTask handTask = new BotHandExcavateTask(bot);
                BotHandExcavateTaskParams params = new BotHandExcavateTaskParams();
                params.setTarget(block);
                handTask.setParams(params);
                BotTaskManager.push(bot, handTask);

                BotLogger.info(this.getIcon(), isLogging(), bot.getId() + "  Blocks processed: " + blocksCounter);

            } else {

                setObjective("The block is not found. ");
                handleNoTargetFound();
            }
        }
        return;
    }

    private void handleNoTargetFound() {
        bot.getNavigator().setPoi(null);

        setObjective("");
        BotLogger.debug(icon, isLogging(), bot.getId() + " ‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–∫–æ–≤. –ó–∞–≤–µ—Ä—à–∞–µ–º.");
        this.stop();

    }

    private boolean isInventoryFull() {
        boolean full = !BotInventory.hasFreeInventorySpace(bot, targetMaterials);
        BotLogger.debug(icon, isLogging(), bot.getId() + " üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: " + (full ? "–ø–æ–ª–æ–Ω" : "–µ—Å—Ç—å –º–µ—Å—Ç–æ"));
        return full;
    }

    private boolean isEnoughBlocksCollected() {
        boolean enough = BotInventory.hasEnoughBlocks(bot, targetMaterials, maxBlocks);
        BotLogger.debug(icon, isLogging(),
                bot.getId() + " üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–∫–æ–≤: " + (enough ? "–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" : "–Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ"));
        return enough;
    }

    private boolean isInProtectedZone(BotPosition location) {
        boolean protectedZone = BotZoneManager.getInstance().isInProtectedZone(location);
        if (protectedZone) {
            BotLogger.debug(icon, isLogging(), bot.getId() + " üõë –ë–ª–æ–∫ –≤ –∑–∞–ø—Ä–µ—Ç–Ω–æ–π –∑–æ–Ω–µ, —Ä–∞–∑—Ä—É—à–µ–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–æ.");
        }
        return protectedZone;
    }

    @Override
    public void stop() {
        this.runner = null;
        bot.getNavigator().setPoi(null);
        BotLogger.debug(icon, isLogging(), bot.getId() + " üõë –ó–∞–¥–∞—á–∞ —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
        super.stop();
    }

}