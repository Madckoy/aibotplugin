package com.devone.bot.core.task.passive;

import java.util.Stack;

import com.devone.bot.core.Bot;
import com.devone.bot.core.task.passive.params.BotTaskParams;
import com.devone.bot.core.utils.logger.BotLifecycleLogger;
import com.devone.bot.core.utils.logger.BotLogger;

public class BotTaskManager {

    private final Stack<BotTask<?>> taskStack = new Stack<>();
    // üëá –î–û–ë–ê–í–ò–ú –í–í–ï–†–•–£

    private final Stack<BotTask<?>> reactiveStack = new Stack<>();
    private BotTask<?> currentReactiveRoot = null;

    public boolean isInReactiveMode() {
        return !reactiveStack.isEmpty();
    }

    private final Bot bot;

    private BotReactivityController controller;

    public Bot getBot() {
        return bot;
    }

    public BotReactivityController getController() {
        return controller;
    }

    public void setController(BotReactivityController controller) {
        this.controller = controller;
    }

    public BotTaskManager(Bot bot) {
        this.bot = bot;
        controller = new BotReactivityController(this);
    }

    // –ú–µ—Ç–æ–¥ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –æ–±–æ–±—â—ë–Ω–Ω—ã–º —Ç–∏–ø–æ–º T
    public <T extends BotTaskParams> void pushTask(BotTask<T> task) {
        Stack<BotTask<?>> stack = task.isReactive() ? reactiveStack : taskStack;

        if (!stack.isEmpty()) {
            BotTask<?> currentTask = stack.peek();
            currentTask.setPause(true); // –°—Ç–∞–≤–∏–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É –Ω–∞ –ø–∞—É–∑—É
            if (currentTask.isDeffered()) {
                currentTask.setDeffered(false); // C–Ω–∏–º–∞–º —Ñ–ª–∞–∂–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ —Ç.–∫ –ø—Ä–∏—à–ª–∞ —Å–ª–µ–¥—É—é—â–∞—è —Ç–∞—Å–∫–∞
            }
        }

        stack.push(task);
        task.setInjected(true); // —Å–æ–æ–±—â–∞–µ–º –∑–∞–¥–∞—á–µ —á—Ç–æ –æ–Ω–∞ –¥–æ–±–∞–≤–∏–ª–∞—Å—å –≤ –æ–±—â–∏–π —Å—Ç–µ–∫

        // –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π ‚Äî –∑–∞–ø–æ–º–∏–Ω–∞–µ–º
        if (task.isReactive() && currentReactiveRoot == null) {
            currentReactiveRoot = task;
        }

        BotLogger.debug("ü§ñ", true,
                bot.getId() + " ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: " + task.getIcon() + " " + task.getClass().getSimpleName());
    }

    public void popTask() {
        Stack<BotTask<?>> stack = isInReactiveMode() ? reactiveStack : taskStack;

        if (!stack.isEmpty()) {
            BotLifecycleLogger.write(this.bot);
            BotTask<?> removed = stack.pop();

            BotLogger.debug("ü§ñ", true, bot.getId() + " ‚ûñ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: " + removed.getClass().getSimpleName());

            if (removed == currentReactiveRoot) {
                currentReactiveRoot = null; // —Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            }

            if (!stack.isEmpty()) {
                stack.peek().setPause(false);
            }
        }
    }

    public BotTask<?> getActiveTask() {
        if (isInReactiveMode() && !reactiveStack.isEmpty()) {
            return reactiveStack.peek();
        } else if (!taskStack.isEmpty()) {
            return taskStack.peek();
        } else {
            return null;
        }
    }

    public boolean isEmpty() {
        return taskStack.isEmpty();
    }

    public boolean isTaskActive(Class<? extends BotTask<?>> taskClass) {
        for (BotTask<?> task : taskStack) {
            if (task.getClass().equals(taskClass) && !task.isDone()) {
                return true;
            }
        }
        return false;
    }

    public Stack<BotTask<?>> getTaskStack() {
        return taskStack;
    }

    public void updateActiveTask() {
        BotTask<?> currentTask = getActiveTask();
        if (currentTask != null) {
            BotLogger.debug("ü§ñ", true, bot.getId()     + " üü¢ Activate task: " + currentTask.getIcon() + " "
                    + currentTask.getClass().getSimpleName());

            if (currentTask.isDone()) {
                BotLogger.debug("ü§ñ", true, bot.getId() + " ‚≠ï Deactivating task: " + currentTask.getIcon() + " "
                        + currentTask.getClass().getSimpleName());
                popTask();                        
            
            } else {
                BotLogger.debug("ü§ñ", true, bot.getId() + " üîµ Updating task: " + currentTask.getIcon() + " "
                        + currentTask.getClass().getSimpleName());

                currentTask.update();        
            }
        }
    }

    public void clearTasks() {
        while (!reactiveStack.isEmpty()) {
            BotTask<?> removedTask = reactiveStack.pop();
            removedTask.stop();
            BotLogger.debug("ü§ñ", true, bot.getId()      + " ‚ö´ –£–¥–∞–ª–µ–Ω–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: " + removedTask.getIcon() + " "
                    + removedTask.getClass().getSimpleName());
        }

        currentReactiveRoot = null;

        while (!taskStack.isEmpty()) {
            BotTask<?> removedTask = taskStack.pop();
            removedTask.stop();
            BotLogger.debug("ü§ñ", true, bot.getId()     + " ‚ö´ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞: " + removedTask.getIcon() + " "
                    + removedTask.getClass().getSimpleName());
        }
    }

    public Stack<BotTask<?>> getReactiveStack() {
        return reactiveStack;
    }

    public static void push(Bot bot, BotTask<?> task) {
        task.setReactive(task.isReactive()); // –Ω–µ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å–ª–∏ —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–æ

        if (task.isDeffered()) {
            task.setPause(true);
        }

        bot.getTaskManager().pushTask(task);
    }

    public static void clear(Bot bot) {
        bot.getBootstrap().getTaskManager().clearTasks();
    }

    public String getQueueIcons() {
        if (this == null || getTaskStack() == null || getTaskStack().isEmpty()) {
            return "N/A";
        }

        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < getTaskStack().size(); i++) {
            BotTask<?> task = getTaskStack().get(i);

            BotLogger.debug("ü§ñ", true, bot.getId() + " Task Info: " + task.getIcon() + " | " + task.getObjective());

            sb.append(task != null ? task.getIcon() : "?");
            if (i < getTaskStack().size() - 1) {
                sb.append(" ‚ûú ");
            }
        }
        return sb.toString();
    }

}
