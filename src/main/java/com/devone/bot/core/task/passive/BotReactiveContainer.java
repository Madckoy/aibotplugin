package com.devone.bot.core.task.passive;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.devone.bot.core.Bot;
import com.devone.bot.core.task.passive.params.BotTaskParams;
import com.devone.bot.core.utils.logger.BotLogger;

public abstract class BotReactiveContainer<T extends BotTaskParams> extends BotTaskAutoParams<T> {

    protected List<BotTask<?>> subtasks = new ArrayList<>();
    protected boolean injected = false;

    public BotReactiveContainer(Bot bot, Class<T> paramClass) {
        super(bot, null, paramClass);
        setReactive(true); // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        setIcon("üì¶");
        setObjective("Reactive container for tasks");
    }

    @Override
    public void execute() {

            BotLogger.debug(getIcon(), true,
                    bot.getId() + " ‚ö° –ó–∞–ø—É—â–µ–Ω —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: " + this.getClass().getSimpleName());
      
            if(isDeffered()==true) {
                BotLogger.debug(getIcon(), true,
                    bot.getId() + " ‚ö° –î–æ–±–∞–≤–ª—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –≤ —Å—Ç–µ–∫");

                subtasks = enqueue(bot); // üì¶ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏

                if(subtasks == null) {
                    stop();
                    return;
                } else {
                    BotLogger.debug(getIcon(), true,
                    bot.getId() + " ‚ö° –î–æ–±–∞–≤–ª–µ–Ω—ã –∑–∞–¥–∞—á–∏: " + subtasks);
                }

                List<BotTask<?>> reversed = new ArrayList<>(subtasks);
                Collections.reverse(reversed);
                
                bot.getTaskManager().wait(true); // stop updating the stack

                for (BotTask<?> task : reversed) {
                    BotLogger.debug(getIcon(), true,
                            bot.getId() + " ‚ûï –ó–∞–ø—É—Å–∫ –ø–æ–¥–∑–∞–¥–∞—á–∏: " + task.getClass().getSimpleName());

                    task.setReactive(true); // –Ω–∞—Å–ª–µ–¥—É–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    bot.getTaskManager().wait(true); 
                    bot.getTaskManager().pushTask(task);
                }

                bot.getTaskManager().wait(false); // continue updating the stack
                setDeffered(false);
            }

            if(subtasks!=null) {
                boolean allDone = subtasks.stream().allMatch(BotTask::isDone);

                if (allDone) {
                    BotLogger.debug(getIcon(), true, bot.getId() + " ‚úÖ –í—Å–µ –ø–æ–¥–∑–∞–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è: "
                                + this.getClass().getSimpleName());
                    stop();
                }

            } else {
               stop();     
            }

            return;
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–∑–∞–¥–∞—á
     */
    protected List<BotTask<?>> enqueue(Bot bot) {
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç ‚Äî –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
        return subtasks;
    }

    @Override
    public void stop() {
        setDeffered(false);
        setReactive(false);
        BotLogger.debug(getIcon(), true, bot.getId() + " üîö –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–Ω—è—Ç: " + this.getClass().getSimpleName());
        super.stop();
    }
}
