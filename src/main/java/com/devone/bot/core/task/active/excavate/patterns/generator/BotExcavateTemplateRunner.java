package com.devone.bot.core.task.active.excavate.patterns.generator;

import java.io.IOException;
import java.io.InputStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;

import com.devone.bot.core.Bot;
import com.devone.bot.core.task.active.excavate.patterns.IBotExcavatePatternRunner;
import com.devone.bot.core.task.active.excavate.patterns.generator.params.BotExcavateTemplateRunnerParams;
import com.devone.bot.core.utils.blocks.BotPosition;
import com.devone.bot.core.utils.blocks.BotPositionComparators;
import com.devone.bot.core.utils.blocks.BotAxisDirection.AxisDirection;
import com.devone.bot.core.utils.logger.BotLogger;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–∑—Ä—É—à–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –∏–∑ YAML.
 * –ü–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—É—é Java-–ª–æ–≥–∏–∫—É.
 */
public class BotExcavateTemplateRunner implements IBotExcavatePatternRunner {

    private final Path yamlPath;

    private BotExcavateCoordinatesGenerator generator;

    private boolean initialized = false;
    
    private final Queue<BotPosition> blocksToBreak = new LinkedList<>();

    private BotExcavateTemplateRunnerParams params;

    public BotExcavateTemplateRunner(Path path) {

        this.yamlPath = path;
    }

    public BotExcavateTemplateRunner init(int observerX, int observerY, int observerZ) {

        BotLogger.debug("üõ†Ô∏è", true, "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É YAML-–ø–∞—Ç—Ç–µ—Ä–Ω–∞: " + yamlPath);
    
        try (InputStream inputStream = Files.newInputStream(yamlPath)) {

            this.generator = BotExcavateCoordinatesGenerator.loadYmlFromStream(inputStream);

            if (this.generator != null) {

                BotLogger.debug("üìê", true, " ‚úÖ –ü–∞—Ç—Ç–µ—Ä–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ YAML: " + yamlPath.getFileName());

            } else {

                BotLogger.debug("üìê", true, " ‚ùå loadFromYaml() –≤–µ—Ä–Ω—É–ª null –¥–ª—è —Ñ–∞–π–ª–∞: " + yamlPath);

            }

        } catch (IOException e) {

            BotLogger.debug("üìê", true, " ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ YAML-—Ñ–∞–π–ª–∞: " + yamlPath + " ‚Äî " + e.getMessage());

        }

        BotExcavatePatternAttributes attributes = this.generator.getAttributes();

        params = new BotExcavateTemplateRunnerParams(observerX, 
                                                     observerY, 
                                                     observerZ, 
                                                     attributes.getOffsetOuterX(), 
                                                     attributes.getOffsetOuterY(),
                                                     attributes.getOffsetOuterZ(),
                                                     attributes.getOuterRadius(),
                                                     attributes.getOffsetInnerX(),
                                                     attributes.getOffsetInnerY(),
                                                     attributes.getOffsetInnerZ(),
                                                     attributes.getInnerRadius(),
                                                     attributes.isInverted());

        


        return this;
    } 

    @Override    
    public IBotExcavatePatternRunner setParams(BotExcavateTemplateRunnerParams params) {

        if(params==null) return this; 
    
        this.params = params;

        return this;
    }

    public BotPosition getNextBlock(Bot bot ) {
        if (this.generator == null) {
            BotLogger.debug("üìê", true, " üö® –ü–∞—Ç—Ç–µ—Ä–Ω –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! YAML: " + yamlPath);
            return null;
        }

        if (!initialized) {
            BotLogger.debug("üìê", true, " üîÅ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—á–µ–∫ –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É: " + yamlPath);
            
            if(params!=null) { 
                BotLogger.debug("Params:", true, params.toString());
            }        

            boolean isInverted = generator.getInverted();

            List<BotPosition> outerPts =  generator.generateOuterPoints(params);
            List<BotPosition> innerPts = generator.generateInnerPoints(params);
            List<BotPosition> removedPts = new ArrayList<>(outerPts);
            
            if(isInverted) {
                removedPts.removeAll(innerPts);
            }

            // ‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é
            Comparator<BotPosition> sortingComparator = BotPositionComparators.byAxisDirection(AxisDirection.DOWN);
            if (sortingComparator != null) {
                removedPts.sort(sortingComparator);
            }

            if (removedPts != null && !removedPts.isEmpty()) {

                blocksToBreak.addAll(removedPts);
                
                BotLogger.debug("üìê", true, " ‚úÖ Added " + blocksToBreak.size() + " coordinates");
                BotLogger.debug("üìê", true, " ‚úÖ Added " + blocksToBreak);

            } else {
                
                BotLogger.debug("üìê", true, " ‚ö†Ô∏è –ü–∞—Ç—Ç–µ—Ä–Ω YAML –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–∏ –æ–¥–Ω–æ–π —Ç–æ—á–∫–∏ –¥–ª—è —Ä–∞–∑—Ä—É—à–µ–Ω–∏—è.");

            }

            BotLogger.debug("Block:", true, blocksToBreak.toString());

            initialized = true;
        }

        BotPosition next = blocksToBreak.poll();

        if (next != null) {
            BotLogger.debug("üìê", true, " üéØ Next coordinate: " + next.getX() + ", " + next.getY() + ", " + next.getZ());
        }
        return next;
    }


    public boolean isFinished() {
        return initialized && blocksToBreak.isEmpty();
    }


    public String getName() {
        return "BotBreakInterpretedYamlPattern(" + yamlPath.getFileName().toString() + ")";
    }


    public List<BotPosition> getAllPlannedBlocks() {
        return new ArrayList<>(blocksToBreak);
    }

}
