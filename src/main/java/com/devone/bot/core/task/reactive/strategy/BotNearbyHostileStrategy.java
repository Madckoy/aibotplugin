package com.devone.bot.core.task.reactive.strategy;

import com.devone.bot.core.Bot;
import com.devone.bot.core.brain.memory.scene.BotSceneData;
import com.devone.bot.core.task.passive.BotTaskManager;
import com.devone.bot.core.task.reactive.IBotReactionStrategy;
import com.devone.bot.core.task.reactive.container.BotNearbyHostileReactiveContainer;
import com.devone.bot.core.utils.blocks.BotBlockData;
import com.devone.bot.core.utils.blocks.BotPosition;
import com.devone.bot.core.utils.logger.BotLogger;
import com.devone.bot.core.utils.world.BotWorldHelper;

import java.util.Optional;

public class BotNearbyHostileStrategy implements IBotReactionStrategy {

    @Override
    public Optional<Runnable> check(Bot bot) {
        BotLogger.debug("ü§ñ", true, bot.getId() + " üòà –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ –±–ª–∏–∑–æ—Å—Ç—å –≤—Ä–∞–∂–¥–µ–±–Ω–æ–≥–æ –º–æ–±–∞");

        BotSceneData scene = bot.getBrain().getMemory().getSceneData();
        BotPosition botPos = bot.getNavigator().getPosition();

        if (scene != null) {
            for (BotBlockData entity : scene.entities) {
                if (!entity.isHostile())
                    continue;
                if (BotWorldHelper.isInDangerousLiquid(entity))
                    continue;

                double dist = botPos.distanceTo(entity.getPosition());
                if (dist >= 5)
                    continue;

                BotLogger.debug("ü§ñ", true, bot.getId() + " ‚ùó –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤—Ä–∞–∂–¥–µ–±–Ω—ã–π –º–æ–±: " + entity.getType()
                        + " (" + String.format("%.1f", dist) + " –º)");

                return Optional.of(() -> {
                    BotTaskManager.push(bot, new BotNearbyHostileReactiveContainer(bot, entity));
                });
            }
        }

        return Optional.empty();
    }

    @Override
    public String getName() {
        return "üòà –ë–ª–∏–∑–æ—Å—Ç—å –≤—Ä–∞–∂–¥–µ–±–Ω–æ–≥–æ –º–æ–±–∞";
    }
}
