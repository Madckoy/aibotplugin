package com.devone.bot.core.task.reactive;

import com.devone.bot.core.Bot;
import com.devone.bot.core.task.reactive.strategy.BotStrategyLowHealth;
import com.devone.bot.core.task.reactive.strategy.BotStrategyNearbyHostile;
import com.devone.bot.core.task.reactive.strategy.BotStrategyNearbyPlayer;
import com.devone.bot.core.utils.logger.BotLogger;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

/**
 * üß† –ú–µ–Ω–µ–¥–∂–µ—Ä —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –±–æ—Ç–∞.
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ä–µ–∞–∫—Ü–∏—é.
 */
public class BotReactivityManager {

    private static final List<IBotStrategyReaction> strategies = new ArrayList<>();

    static {
        // üìö –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
        registerStrategy(new BotStrategyNearbyHostile());
        registerStrategy(new BotStrategyLowHealth());
        registerStrategy(new BotStrategyNearbyPlayer());

        BotLogger.debug("üß†", true, "üß© –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏: " + strategies.size());
    }

    public static Optional<Runnable> checkReactions(Bot bot) {
        if (bot.getActiveTask() == null) {
            BotLogger.debug("üß†", true, bot.getId() + " ‚≠ï –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–∞–∫—Ü–∏–π.");
            return Optional.empty();
        }

        BotLogger.debug(bot.getActiveTask().getIcon(), true, bot.getId() + " üß© –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–∫—Ü–∏–π...");

        for (IBotStrategyReaction strategy : strategies) {
            BotLogger.debug(bot.getActiveTask().getIcon(), true, bot.getId() + " üîé –ü—Ä–æ–±—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é: " + strategy.getName());

            Optional<Runnable> reaction = strategy.check(bot);

            if (reaction.isPresent()) {
                BotLogger.debug(bot.getActiveTask().getIcon(), true, bot.getId() + " ‚úÖ –†–µ–∞–∫—Ü–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞: " + strategy.getName());
                return reaction;
            }
        }

        BotLogger.debug(bot.getActiveTask().getIcon(), true, bot.getId() + " ‚ùå –†–µ–∞–∫—Ü–∏–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏.");
        return Optional.empty();
    }

    public static void registerStrategy(IBotStrategyReaction strategy) {
        strategies.add(strategy);
    }
}
