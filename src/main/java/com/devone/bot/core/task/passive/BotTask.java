package com.devone.bot.core.task.passive;

import org.bukkit.entity.Player;
import org.bukkit.event.Listener;

import com.devone.bot.core.Bot;
import com.devone.bot.core.task.active.brain.BotBrainTask;
import com.devone.bot.core.task.passive.params.BotTaskParams;
import com.devone.bot.core.task.reactive.BotReactiveUtils;
import com.devone.bot.core.task.reactive.BotReactivityManager;
import com.devone.bot.core.utils.BotConstants;
import com.devone.bot.core.utils.BotUtils;
import com.devone.bot.core.utils.blocks.BotPosition;
import com.devone.bot.core.utils.logger.BotLogger;

import java.util.Optional;
import java.util.UUID;

public abstract class BotTask<T extends BotTaskParams> implements IBotTask, Listener, IBotTaskParameterized<T> {

    protected T params;

    protected boolean injected = false;

    public boolean isInjected() {
        return injected;
    }

    public void setInjected(boolean injected) {
        this.injected = injected;
    }

    public T getParams() {
        return params;
    }

    protected boolean enabled = true;

    public void setEnabled(boolean enabled) {
        this.enabled = enabled;
    }

    public boolean isStopped() {
        return stopped;
    }

    public void setStopped(boolean stopped) {
        this.stopped = stopped;
    }

    protected boolean stopped = false;
    protected boolean logging = true;

    protected Bot bot;
    protected Player player = null;
    protected long startTime = System.currentTimeMillis();

    private boolean pause = false;
    private boolean deffered = false;

    public boolean isDeffered() {
        return deffered;
    }

    public void setDeffered(boolean deffered) {
        this.deffered = deffered;
    }

    protected boolean done = false;

    protected final String uuid;
    protected String icon = "";
    protected String objective = "";

    protected boolean isListenerRegistered = false;
    private boolean isReactive = false;

    private long pauseStartTime=0;

    public BotTask(Bot bot) {
        this.bot = bot;
        this.uuid = UUID.randomUUID().toString();
        startTime = System.currentTimeMillis();
    }

    public BotTask(Bot bot, String icn) {
        this(bot);
        this.icon = icn;
    }

    public BotTask(Bot bot, Player player) {
        this(bot);
        this.player = player;
    }

    public BotTask(Bot bot, Player player, String icn) {
        this(bot, player);
        this.icon = icn;
    }

    public void update() {
        logTaskStatus();
    
        // ‚õî –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë –ø—Ä–∞–≤–∏–ª—å–Ω–æ
        if (!isEnabled()) {
            BotLogger.debug(icon, true, bot.getId() + " üõë –ó–∞–¥–∞—á–∞ –≤—ã–∫–ª—é—á–µ–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: " + this.getClass().getSimpleName());
            stop();
            return;
        }
    
        if (isPause() && isDeffered()==false) {
            BotLogger.debug(icon, true, bot.getId() + " ‚è∏Ô∏è –ó–∞–¥–∞—á–∞ –Ω–∞ –ø–∞—É–∑–µ: " + this.getClass().getSimpleName());

            if (isPauseTimedOut(BotConstants.DEFAULT_TASK_TIMEOUT)) { 
                BotLogger.debug("ü§ñ", true, bot.getId() + " ‚è≥ –¢–∞–π–º–∞—É—Ç –ø–∞—É–∑—ã. –£–±–∏—Ä–∞–µ–º –∑–∞–¥–∞—á—É.");
                stop();
                return;
            }
            return;
        }
    
        if (playerDisconnected()) {
            handlePlayerDisconnect();
            return;
        }
    
        if (handleReactiveLogic())
            return;
    
        if(injected==true) {
            BotLogger.debug(icon, true, bot.getId() + " ‚ñ∂Ô∏è –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞ –ø–∞—É–∑–µ –∏ –≤ —Å—Ç–µ–∫–µ. –í—ã–ø–æ–ª–Ω—è–µ–º: " + this.getClass().getSimpleName());
            runTaskExecution();
        }
    }    

    private void logTaskStatus() {
        String pos = "N/A";
        String poi = "N/A";

        if(bot.getNavigator().getPosition()!=null ) {
            pos = bot.getNavigator().getPosition().toCompactString();
        }

        if(bot.getNavigator().getTarget()!=null ) {
            poi = bot.getNavigator().getTarget().toCompactString();
        }

        BotLogger.debug(icon, logging, bot.getId() +
                " ‚ùì Status: done: " + done +", enabled: "+isEnabled() +", paused: " + pause + " , deffered: " + deffered + ", " +
                " üìç: " + pos + " / üéØ: " + poi);
    }

    private boolean playerDisconnected() {
        return player != null && !player.isOnline();
    }

    private boolean handleReactiveLogic() {
        if (isReactive && !BotReactiveUtils.isAlreadyReacting(bot)) {
            BotLogger.debug("üß†", logging,
                    bot.getId() + " ‚ö†Ô∏è –ò–Ω–∂–µ–∫—Ç–∞–µ–º —Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∑–∞–¥–∞—á–∞–º–∏ (task = " + getClass().getSimpleName() + ")");

            BotReactiveUtils.activateReaction(bot, true);
        }

        if (!BotReactiveUtils.isAlreadyReacting(bot)) {
            Optional<Runnable> reaction = BotReactivityManager.checkReactions(bot);
            if (reaction.isPresent()) {
                setPause(true);
                BotLogger.debug("üß†", logging, bot.getId() + " üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Ä–µ–∞–∫—Ü–∏—è. –¢–µ–∫—É—â–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.");
                reaction.get().run();
                return true;
            }
        }

        return false;
    }

    private void runTaskExecution() {
        BotLogger.debug("üß†", logging, bot.getId() + " üü° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: " + icon + " " + getClass().getSimpleName());
        execute();
    }

    public abstract void execute();

    public void stop() {
        done = true;

        if (isReactive && BotReactiveUtils.isReactionOwnedBy(bot, this)) {
            BotLogger.debug("üß†", logging,
                    bot.getId() + " üßπ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: " + getClass().getSimpleName());
            BotReactiveUtils.activateReaction(bot, false);
        }
        // ‚úÖ –°–Ω–∏–º–∞–µ–º –ø–∞—É–∑—É, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –∑–∞–¥–∞—á–∞ –µ—ë –Ω–µ —Å–Ω—è–ª–∞ —Å–∞–º–∞
        if (isPause()) {
            setPause(false);
        }
    }

    public void setPause(boolean pause) {
        this.pause = pause;

        if (pause) {
            this.pauseStartTime = System.currentTimeMillis();
        } else {
            this.pauseStartTime = 0L;
        }

        String status = pause ? "‚è∏Ô∏è Pause" : "‚ñ∂Ô∏è Resume";
        BotLogger.debug(icon, logging, bot.getId() + " " + status + " (" + getClass().getSimpleName() + ")");
    }

    public boolean isPauseTimedOut(long timeoutMillis) {
        return pause && (System.currentTimeMillis() - pauseStartTime) > timeoutMillis;
    }

    private void handlePlayerDisconnect() {
        BotLogger.debug("üß†", logging,
                bot.getId() + " üö® –ò–≥—Ä–æ–∫ " + player.getName() + " –æ—Ç–∫–ª—é—á–∏–ª—Å—è. –í–æ–∑–≤—Ä–∞—Ç –∫ BrainTask.");
        //BotTaskManager.clear(bot);
        BotBrainTask brain = new BotBrainTask(bot);
        brain.setPause(false);
        BotTaskManager.push(bot, brain);
    }

    @Override
    public IBotTaskParameterized<T> setParams(T params) {
        this.params = params;
        startTime = System.currentTimeMillis();
        return this;
    }

    public boolean isDone() {
        return done;
    }

    public boolean isPause() {
        return pause;
    }

    public boolean isDeeered() {
        return deffered;
    }


    public boolean isEnabled() {
        return enabled;
    }

    public boolean isLogging() {
        return logging;
    }

    public String getObjective() {
        return objective;
    }

    public void setObjective(String obj) {
        this.objective = obj;
        BotLogger.debug(icon, logging, bot.getId() + " ñ£† Objective: " + obj);
    }

    public String getIcon() {
        return icon;
    }

    public void setIcon(String icn) {
        this.icon = icn;
    }

    public Bot getBot() {
        return bot;
    }

    public String getUUID() {
        return uuid;
    }

    public long getElapsedTime() {
        return System.currentTimeMillis() - startTime;
    }

    public boolean isReactive() {
        return isReactive;
    }

    public void setReactive(boolean reactive) {
        this.isReactive = reactive;
    }

    public void turnToTarget(BotTask<?> task, BotPosition target) {
        BotUtils.turnToTarget(task, bot, target);
    }

    public void animateHand(BotTask<?> task, Bot bot) {
        BotUtils.animateHand(task, bot);
    }
}
