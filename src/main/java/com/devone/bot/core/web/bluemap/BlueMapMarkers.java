package com.devone.bot.core.web.bluemap;

import com.devone.bot.AIBotPlugin;
import com.devone.bot.core.Bot;
import com.devone.bot.core.BotManager;
import com.devone.bot.core.utils.blocks.BotLocation;
import com.devone.bot.core.utils.logger.BotLogger;
import com.devone.bot.core.web.BotWebService;
import com.devone.bot.core.web.image.BotImageUtils;
import com.flowpowered.math.vector.Vector3d;
import de.bluecolored.bluemap.api.BlueMapAPI;

import de.bluecolored.bluemap.api.BlueMapMap;

import de.bluecolored.bluemap.api.markers.MarkerSet;

import de.bluecolored.bluemap.api.markers.POIMarker;

import java.util.*;

import org.bukkit.Bukkit;

public class BlueMapMarkers {
    private final BotManager botManager;
    private static final String MARKERS_SET_ID = "blue-map-bot-markers";
    private MarkerSet mSet;
    private final Map<String, BotLocation> lastKnownLocations = new HashMap<>();

    public BlueMapMarkers(BotManager botManager) {
        this.botManager = botManager;

        // BLUE MAP INTEGRATION IS HERE
        BlueMapAPI.onEnable(api -> {

            mSet = setupMarkerSet(api);

            //scheduleMarkerUpdate();

            BotLogger.debug("üó∫Ô∏è", true, "üí° BlueMapAPI detected! Initializing marker system...");

        });
    }

    public MarkerSet getMarkerSet() {
        return mSet;
    }

    public void updateAllMarkers() {

        if (mSet == null) {
            BotLogger.warn("üó∫Ô∏è", true, "‚ö†Ô∏è –ú–∞—Ä–∫–µ—Ä-—Å–µ—Ç –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ.");
            return;
        }

        mSet.remove(MARKERS_SET_ID);

        boolean hasChanges = false;

        List<Bot> bots = List.copyOf(botManager.getAllBots());

        for (Bot bot : bots) {

            BotLocation loc = bot.getNavigator().getLocation();

            if (loc != null) {
                String botId = bot.getId();
                BotLocation lastLocation = lastKnownLocations.get(botId);

                if (lastLocation != null) {
                    BotLogger.debug("üó∫Ô∏è", true,  bot.getId() + " üìå Last known location on map: " + lastLocation);

                    // –ï—Å–ª–∏ –ø–æ–∑–∏—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å ‚Äì –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                    if (lastLocation.equals(loc)) {
                        BotLogger.debug("üó∫Ô∏è", true, bot.getId() + " ‚ùì Locations are the same! ");
                        continue;
                    }
                }

                lastKnownLocations.put(botId, new BotLocation(loc)); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

                hasChanges = true;

                BotLogger.debug("üó∫Ô∏è", true, bot.getId() + " üìç –û–±–Ω–æ–≤–ª—ë–Ω –º–∞—Ä–∫–µ—Ä –±–æ—Ç–∞ : " + loc);

            } else {
                BotLogger.debug("üó∫Ô∏è", true, bot.getId() + " üìç All Locations are unknown. Skip update.");
            }

        }

        if (hasChanges) {
             updateBlueMapMarkers(bots, lastKnownLocations);

                // üî• –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã –û–î–ò–ù —Ä–∞–∑, –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ü–∏–∫–ª–∞
                // Bukkit.getScheduler().runTaskLater(botManager.getPlugin(), () -> {
                //    BotLogger.debug("üîÑ –§–æ—Ä—Å–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç—ã!");

                //    updateBlueMapMarkers(bots, lastKnownLocations);
                //
                // }, 100L); // 1-—Å–µ–∫—É–Ω–¥–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–µ—Ä

        }
    }

    public void scheduleMarkerUpdate() {

        Bukkit.getScheduler().runTaskTimer(AIBotPlugin.getInstance(), () -> {
            BotLogger.debug("üó∫Ô∏è", true, "‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ä–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ.");

            updateAllMarkers();

        }, 0L, 100L); // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä—ã

    }

    public static MarkerSet setupMarkerSet(BlueMapAPI api) {

        String worldName = Bukkit.getWorlds().isEmpty() ? "world" : Bukkit.getWorlds().get(0).getName();
        Optional<BlueMapMap> mapOptional = api.getMap(worldName);

        if (mapOptional.isPresent()) {
            BlueMapMap map = mapOptional.get();

            // Check if the marker set already exists, otherwise create and add a new one
            MarkerSet markerSet = map.getMarkerSets().get(MARKERS_SET_ID);
            if (markerSet == null) {
                markerSet = new MarkerSet(MARKERS_SET_ID); // Create with ID
                map.getMarkerSets().put(MARKERS_SET_ID, markerSet);
            }

            BotLogger.debug("üó∫Ô∏è",true, "üìö BlueMap marker set initialized.");

            return markerSet;
        } else {
            BotLogger.debug("üó∫Ô∏è", true, "‚ùå No valid map found!");
            return null;
        }
    }

    public void updateBlueMapMarkers(List<Bot> bots,  Map<String, BotLocation> lastKnownLocations) {

        if (mSet == null) {
            BotLogger.debug("üó∫Ô∏è", true, "‚ùå MarkerSet set is not initialized yet!");
            return;
        }

        if (bots.isEmpty()) {
            BotLogger.debug("üó∫Ô∏è", true, "‚ùå No bots on the Map, skipping update.");
            return;
        }

        //boolean updateTriggered = false;

        for (Bot bot : bots) {

            String botId = bot.getId();
            BotLocation loc = bot.getNavigator().getLocation();
            UUID botUUID = bot.getUuid();

            // -----------------------------------------------------------------------------------
            // using BlueMapAPI here

            int x = loc.getX();
            int y = loc.getY();
            int z = loc.getZ();

            // ‚úÖ Get or download the bot‚Äôs skin icon
            @SuppressWarnings("unused")
            String skinFilePath = BotImageUtils.getSkinFile(botUUID);

            POIMarker marker = new POIMarker(botId,  new Vector3d(x, y, z));

            marker.setLabel(botId);

            // ‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –∫ —Å–∫–∏–Ω—É, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Å—Ç–∏—Ç AIBotPlugin
            String iconPath = "http://" + BotWebService.getInstance().SERVER_HOST + ":3000/skins/" + botUUID + ".png";


            marker.setIcon(iconPath, 0,0);
            marker.setLabel(bot.getId());

            mSet.put(botId, marker);

            BotLogger.debug("üó∫Ô∏è", true, botId +" ‚ôªÔ∏è Updating BlueMap Markers for bot: " +  " at " + loc);

        }
    }

    public void removeMarker(String bId) {
        if (mSet!=null) {
            mSet.remove(bId);
        }
    }
}
